// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 24256;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([108,58,106,58,98,58,103,58,105,58,73,58,76,58,97,58,83,58,84,58,67,58,66,58,102,119,122,74,115,99,116,118,0,0,0,0,0,0,0,0,99,97,110,39,116,32,115,101,116,32,97,110,100,114,111,105,100,32,112,101,114,109,105,115,115,105,111,110,115,32,45,32,98,117,105,108,116,32,119,105,116,104,111,117,116,32,97,110,100,114,111,105,100,32,115,117,112,112,111,114,116,10,0,0,87,97,114,110,105,110,103,58,32,45,116,32,40,105,110,105,116,105,97,108,105,122,101,32,105,110,111,100,101,32,116,97,98,108,101,115,41,32,105,115,32,100,101,112,114,101,99,97,116,101,100,10,0,0,0,0,119,0,0,0,0,0,0,0,102,97,105,108,101,100,32,116,111,32,111,112,101,110,32,98,108,111,99,107,95,108,105,115,116,95,102,105,108,101,58,32,37,115,10,0,0,0,0,0,102,97,105,108,101,100,32,116,111,32,108,111,97,100,32,37,115,10,0,0,0,0,0,0,67,97,110,110,111,116,32,115,112,101,99,105,102,105,121,32,98,111,116,104,32,119,105,112,101,32,97,110,100,32,115,112,97,114,115,101,10,0,0,0,67,97,110,110,111,116,32,115,112,101,99,105,102,105,121,32,98,111,116,104,32,119,105,112,101,32,97,110,100,32,103,122,105,112,10,0,0,0,0,0,69,120,112,101,99,116,101,100,32,102,105,108,101,110,97,109,101,32,97,102,116,101,114,32,111,112,116,105,111,110,115,10,0,0,0,0,0,0,0,0,85,110,101,120,112,101,99,116,101,100,32,97,114,103,117,109,101,110,116,58,32,37,115,10,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,111,112,101,110,0,0,0,0,248,1,0,0,232,3,0,0,209,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,11,0,0,0,0,0,0,249,1,0,0,232,3,0,0,232,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,11,0,0,0,0,0,0,249,1,0,0,232,3,0,0,232,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,11,0,0,0,0,0,0,249,1,0,0,232,3,0,0,232,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,11,0,0,0,0,0,0,249,1,0,0,232,3,0,0,232,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,249,1,0,0,208,7,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,12,0,0,0,0,0,0,249,1,0,0,208,7,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,12,0,0,0,0,0,0,249,3,0,0,232,3,0,0,14,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,12,0,0,0,0,0,0,248,1,0,0,246,3,0,0,246,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,12,0,0,0,0,0,0,253,1,0,0,255,3,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,12,0,0,0,0,0,0,253,1,0,0,255,3,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,12,0,0,0,0,0,0,249,1,0,0,232,3,0,0,232,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,12,0,0,0,0,0,0,232,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,12,0,0,0,0,0,0,237,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,12,0,0,0,0,0,0,237,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,12,0,0,0,0,0,0,237,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,12,0,0,0,0,0,0,237,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,12,0,0,0,0,0,0,237,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,12,0,0,0,0,0,0,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,12,0,0,0,0,0,0,237,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,8,0,0,0,0,0,0,253,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,8,0,0,0,0,0,0,253,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,8,0,0,0,0,0,0,32,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,104,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,9,0,0,0,0,0,0,32,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,9,0,0,0,0,0,0,104,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,9,0,0,0,0,0,0,104,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,9,0,0,0,0,0,0,104,1,0,0,246,3,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,9,0,0,0,0,0,0,36,1,0,0,233,3,0,0,237,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,9,0,0,0,0,0,0,109,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,9,0,0,0,0,0,0,109,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,9,0,0,0,0,0,0,164,1,0,0,232,3,0,0,232,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,10,0,0,0,0,0,0,164,1,0,0,255,3,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,10,0,0,0,0,0,0,164,1,0,0,232,3,0,0,232,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,10,0,0,0,0,0,0,164,1,0,0,16,39,0,0,16,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,10,0,0,0,0,0,0,237,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,10,0,0,0,0,0,0,232,5,0,0,0,0,0,0,187,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,10,0,0,0,0,0,0,237,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,10,0,0,0,0,0,0,237,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,10,0,0,0,0,0,0,237,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,10,0,0,0,0,0,0,237,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,10,0,0,0,0,0,0,237,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,10,0,0,0,0,0,0,248,9,0,0,0,0,0,0,233,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,10,0,0,0,0,0,0,232,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,237,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,11,0,0,0,0,0,0,237,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,11,0,0,0,0,0,0,237,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,11,0,0,0,0,0,0,237,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,11,0,0,0,0,0,0,237,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,11,0,0,0,0,0,0,232,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,11,0,0,0,0,0,0,237,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,11,0,0,0,0,0,0,232,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,11,0,0,0,0,0,0,232,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,11,0,0,0,0,0,0,232,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,11,0,0,0,0,0,0,160,1,0,0,0,0,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,11,0,0,0,0,0,0,164,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,121,115,116,101,109,47,98,50,103,47,98,50,103,0,0,115,121,115,116,101,109,47,98,50,103,47,117,112,100,97,116,101,114,0,0,0,0,0,0,115,121,115,116,101,109,47,98,50,103,47,112,108,117,103,105,110,45,99,111,110,116,97,105,110,101,114,0,0,0,0,0,115,121,115,116,101,109,47,101,116,99,47,105,110,105,116,46,103,111,108,100,102,105,115,104,46,114,99,0,0,0,0,0,115,121,115,116,101,109,47,101,116,99,47,105,110,105,116,46,103,111,108,100,102,105,115,104,46,115,104,0,0,0,0,0,115,121,115,116,101,109,47,101,116,99,47,105,110,105,116,46,116,114,111,117,116,46,114,99,0,0,0,0,0,0,0,0,115,121,115,116,101,109,47,101,116,99,47,105,110,105,116,46,114,105,108,0,0,0,0,0,115,121,115,116,101,109,47,101,116,99,47,105,110,105,116,46,116,101,115,116,109,101,110,117,0,0,0,0,0,0,0,0,115,121,115,116,101,109,47,101,116,99,47,100,104,99,112,99,100,47,100,104,99,112,99,100,45,114,117,110,45,104,111,111,107,115,0,0,0,0,0,0,115,121,115,116,101,109,47,101,116,99,47,65,117,100,105,111,80,97,114,97,52,46,99,115,118,0,0,0,0,0,0,0,115,121,115,116,101,109,47,101,116,99,47,112,112,112,47,42,0,0,0,0,0,0,0,0,115,121,115,116,101,109,47,101,116,99,47,114,99,46,42,0,100,97,116,97,47,97,112,112,47,42,0,0,0,0,0,0,100,97,116,97,47,109,101,100,105,97,47,42,0,0,0,0,100,97,116,97,47,97,112,112,45,112,114,105,118,97,116,101,47,42,0,0,0,0,0,0,100,97,116,97,47,100,97,116,97,47,42,0,0,0,0,0,115,121,115,116,101,109,47,98,105,110,47,112,105,110,103,0,115,121,115,116,101,109,47,98,105,110,47,110,101,116,99,102,103,0,0,0,0,0,0,0,115,121,115,116,101,109,47,120,98,105,110,47,115,117,0,0,115,121,115,116,101,109,47,120,98,105,110,47,108,105,98,114,97,110,107,0,0,0,0,0,115,121,115,116,101,109,47,120,98,105,110,47,112,114,111,99,114,97,110,107,0,0,0,0,115,121,115,116,101,109,47,120,98,105,110,47,112,114,111,99,109,101,109,0,0,0,0,0,115,121,115,116,101,109,47,120,98,105,110,47,116,99,112,100,117,109,112,0,0,0,0,0,115,121,115,116,101,109,47,98,105,110,47,112,112,112,100,45,114,105,108,0,0,0,0,0,115,121,115,116,101,109,47,98,105,110,47,114,117,110,45,97,115,0,0,0,0,0,0,0,115,121,115,116,101,109,47,98,105,110,47,42,0,0,0,0,115,121,115,116,101,109,47,108,105,98,47,118,97,108,103,114,105,110,100,47,42,0,0,0,115,121,115,116,101,109,47,120,98,105,110,47,42,0,0,0,115,121,115,116,101,109,47,118,101,110,100,111,114,47,98,105,110,47,42,0,0,0,0,0,118,101,110,100,111,114,47,98,105,110,47,42,0,0,0,0,115,98,105,110,47,42,0,0,98,105,110,47,42,0,0,0,105,110,105,116,42,0,0,0,99,104,97,114,103,101,114,42,0,0,0,0,0,0,0,0,115,98,105,110,47,102,115,95,109,103,114,0,0,0,0,0,102,115,116,97,98,46,42,0,99,97,99,104,101,0,0,0,100,97,116,97,47,97,112,112,0,0,0,0,0,0,0,0,100,97,116,97,47,97,112,112,45,112,114,105,118,97,116,101,0,0,0,0,0,0,0,0,100,97,116,97,47,100,97,108,118,105,107,45,99,97,99,104,101,0,0,0,0,0,0,0,100,97,116,97,47,100,97,116,97,0,0,0,0,0,0,0,100,97,116,97,47,108,111,99,97,108,47,116,109,112,0,0,100,97,116,97,47,108,111,99,97,108,0,0,0,0,0,0,100,97,116,97,47,109,105,115,99,0,0,0,0,0,0,0,100,97,116,97,47,109,105,115,99,47,100,104,99,112,0,0,100,97,116,97,47,109,101,100,105,97,0,0,0,0,0,0,100,97,116,97,47,109,101,100,105,97,47,77,117,115,105,99,0,0,0,0,0,0,0,0,100,97,116,97,0,0,0,0,115,98,105,110,0,0,0,0,115,121,115,116,101,109,47,98,105,110,0,0,0,0,0,0,115,121,115,116,101,109,47,118,101,110,100,111,114,0,0,0,115,121,115,116,101,109,47,120,98,105,110,0,0,0,0,0,115,121,115,116,101,109,47,101,116,99,47,112,112,112,0,0,118,101,110,100,111,114,0,0,115,100,99,97,114,100,0,0,37,115,32,91,32,45,108,32,60,108,101,110,62,32,93,32,91,32,45,106,32,60,106,111,117,114,110,97,108,32,115,105,122,101,62,32,93,32,91,32,45,98,32,60,98,108,111,99,107,95,115,105,122,101,62,32,93,10,0,0,0,0,0,0,32,32,32,32,91,32,45,103,32,60,98,108,111,99,107,115,32,112,101,114,32,103,114,111,117,112,62,32,93,32,91,32,45,105,32,60,105,110,111,100,101,115,62,32,93,32,91,32,45,73,32,60,105,110,111,100,101,32,115,105,122,101,62,32,93,10,0,0,0,0,0,0,32,32,32,32,91,32,45,76,32,60,108,97,98,101,108,62,32,93,32,91,32,45,102,32,93,32,91,32,45,97,32,60,97,110,100,114,111,105,100,32,109,111,117,110,116,112,111,105,110,116,62,32,93,10,0,0,32,32,32,32,91,32,45,83,32,102,105,108,101,95,99,111,110,116,101,120,116,115,32,93,32,91,32,45,67,32,102,115,95,99,111,110,102,105,103,32,93,32,91,32,45,84,32,116,105,109,101,115,116,97,109,112,32,93,10,0,0,0,0,0,32,32,32,32,91,32,45,122,32,124,32,45,115,32,93,32,91,32,45,119,32,93,32,91,32,45,99,32,93,32,91,32,45,74,32,93,32,91,32,45,118,32,93,32,91,32,45,66,32,60,98,108,111,99,107,95,108,105,115,116,95,102,105,108,101,62,32,93,10,0,0,0,32,32,32,32,60,102,105,108,101,110,97,109,101,62,32,91,60,100,105,114,101,99,116,111,114,121,62,93,10,0,0,0,78,101,101,100,32,115,105,122,101,32,111,102,32,102,105,108,101,115,121,115,116,101,109,10,0,0,0,0,0,0,0,0,67,114,101,97,116,105,110,103,32,102,105,108,101,115,121,115,116,101,109,32,119,105,116,104,32,112,97,114,97,109,101,116,101,114,115,58,10,0,0,0,32,32,32,32,83,105,122,101,58,32,37,108,108,117,10,0,32,32,32,32,66,108,111,99,107,32,115,105,122,101,58,32,37,100,10,0,0,0,0,0,32,32,32,32,66,108,111,99,107,115,32,112,101,114,32,103,114,111,117,112,58,32,37,100,10,0,0,0,0,0,0,0,32,32,32,32,73,110,111,100,101,115,32,112,101,114,32,103,114,111,117,112,58,32,37,100,10,0,0,0,0,0,0,0,32,32,32,32,73,110,111,100,101,32,115,105,122,101,58,32,37,100,10,0,0,0,0,0,32,32,32,32,74,111,117,114,110,97,108,32,98,108,111,99,107,115,58,32,37,100,10,0,32,32,32,32,76,97,98,101,108,58,32,37,115,10,0,0,32,32,32,32,66,108,111,99,107,115,58,32,37,108,108,117,10,0,0,0,0,0,0,0,32,32,32,32,66,108,111,99,107,32,103,114,111,117,112,115,58,32,37,100,10,0,0,0,32,32,32,32,82,101,115,101,114,118,101,100,32,98,108,111,99,107,32,103,114,111,117,112,32,115,105,122,101,58,32,37,100,10,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,114,101,115,101,114,118,101,32,102,105,114,115,116,32,49,48,32,105,110,111,100,101,115,10,0,0,0,109,97,107,101,95,101,120,116,52,102,115,95,105,110,116,101,114,110,97,108,0,0,0,0,37,115,37,115,0,0,0,0,67,114,101,97,116,101,100,32,102,105,108,101,115,121,115,116,101,109,32,119,105,116,104,32,37,100,47,37,100,32,105,110,111,100,101,115,32,97,110,100,32,37,100,47,37,100,32,98,108,111,99,107,115,10,0,0,108,111,115,116,43,102,111,117,110,100,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,115,99,97,110,100,105,114,58,32,37,115,10,0,98,117,105,108,100,95,100,105,114,101,99,116,111,114,121,95,115,116,114,117,99,116,117,114,101,0,0,0,0,0,0,0,99,114,105,116,105,99,97,108,32,101,114,114,111,114,58,32,37,115,58,32,109,97,108,108,111,99,58,32,37,115,10,0,99,114,105,116,105,99,97,108,32,101,114,114,111,114,58,32,37,115,58,32,115,116,114,100,117,112,58,32,37,115,10,0,101,114,114,111,114,58,32,37,115,58,32,108,115,116,97,116,58,32,37,115,10,0,0,0,101,114,114,111,114,58,32,37,115,58,32,99,97,110,39,116,32,115,101,116,32,97,110,100,114,111,105,100,32,112,101,114,109,105,115,115,105,111,110,115,32,45,32,98,117,105,108,116,32,119,105,116,104,111,117,116,32,97,110,100,114,111,105,100,32,115,117,112,112,111,114,116,10,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,117,110,107,110,111,119,110,32,102,105,108,101,32,116,121,112,101,32,111,110,32,37,115,10,0,0,0,0,0,37,115,108,111,115,116,43,102,111,117,110,100,0,0,0,0,37,115,47,0,0,0,0,0,99,114,105,116,105,99,97,108,32,101,114,114,111,114,58,32,37,115,58,32,97,115,112,114,105,110,116,102,58,32,37,115,10,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,115,101,116,32,112,101,114,109,105,115,115,105,111,110,115,32,111,110,32,37,115,10,10,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,115,101,116,32,83,69,76,105,110,117,120,32,99,111,110,116,101,120,116,32,111,110,32,37,115,10,10,0,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,115,101,116,32,99,97,112,97,98,105,108,105,116,121,32,111,110,32,37,115,10,10,0,0,0,0,0,47,0,0,0,0,0,0,0,99,114,105,116,105,99,97,108,32,101,114,114,111,114,58,32,37,115,58,32,109,97,108,108,111,99,10,0,0,0,0,0,99,97,110,111,110,105,99,97,108,105,122,101,95,115,108,97,115,104,101,115,0,0,0,0,99,114,105,116,105,99,97,108,32,101,114,114,111,114,58,32,37,115,58,32,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,10,10,0,0,114,0,0,0,0,0,0,0,102,97,105,108,101,100,32,116,111,32,111,112,101,110,32,37,115,58,32,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,99,97,112,97,98,105,108,105,116,105,101,115,61,0,0,0,108,111,97,100,101,100,32,37,100,32,102,115,95,99,111,110,102,105,103,32,101,110,116,114,105,101,115,10,0,0,0,0,102,97,105,108,101,100,32,116,111,32,102,105,110,100,32,91,37,115,93,32,105,110,32,99,97,110,110,101,100,32,102,115,95,99,111,110,102,105,103,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,120,116,52,95,99,114,101,97,116,101,95,102,115,95,97,117,120,95,105,110,102,111,0,101,120,116,97,110,100,114,111,105,100,47,109,97,107,101,95,101,120,116,52,102,115,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,103,101,116,32,114,101,115,105,122,101,32,105,110,111,100,101,10,0,0,101,120,116,52,95,99,114,101,97,116,101,95,114,101,115,105,122,101,95,105,110,111,100,101,0,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,103,101,116,32,106,111,117,114,110,97,108,32,105,110,111,100,101,10,0,101,120,116,52,95,99,114,101,97,116,101,95,106,111,117,114,110,97,108,95,105,110,111,100,101,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,101,120,116,101,110,116,115,32,102,111,114,32,106,111,117,114,110,97,108,32,100,97,116,97,10,0,119,97,114,110,105,110,103,58,32,37,115,58,32,67,111,109,112,117,116,101,100,32,102,105,108,101,115,121,115,116,101,109,32,115,105,122,101,32,108,101,115,115,32,116,104,97,110,32,48,10,0,0,0,0,0,0,103,101,116,95,102,105,108,101,95,115,105,122,101,0,0,0,0,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,105,110,111,100,101,10,10,0,0,0,109,97,107,101,95,100,105,114,101,99,116,111,114,121,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,103,101,116,32,105,110,111,100,101,32,37,117,10,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,37,117,32,101,120,116,101,110,116,115,10,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,100,100,32,46,32,100,105,114,101,99,116,111,114,121,10,0,0,0,46,46,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,100,100,32,46,46,32,100,105,114,101,99,116,111,114,121,10,0,0,99,114,105,116,105,99,97,108,32,101,114,114,111,114,58,32,37,115,58,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,100,101,110,116,114,121,32,102,111,114,32,37,115,32,101,110,100,115,32,97,116,32,37,100,44,32,112,97,115,116,32,37,100,10,10,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,100,100,32,100,105,114,101,99,116,111,114,121,10,0,0,0,0,0,109,97,107,101,95,102,105,108,101,0,0,0,0,0,0,0,109,97,107,101,95,108,105,110,107,0,0,0,0,0,0,0,115,101,108,105,110,117,120,0,99,97,112,97,98,105,108,105,116,121,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,66,85,71,58,32,101,120,116,101,110,100,101,100,32,97,116,116,114,105,98,117,116,101,115,32,97,114,101,32,110,111,116,32,115,111,114,116,101,100,10,10,0,0,0,0,120,97,116,116,114,95,97,115,115,101,114,116,95,115,97,110,101,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,66,85,71,58,32,100,117,112,108,105,99,97,116,101,32,101,120,116,101,110,100,101,100,32,97,116,116,114,105,98,117,116,101,115,32,100,101,116,101,99,116,101,100,10,10,0,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,117,110,101,120,112,101,99,116,101,100,32,114,101,97,100,32,98,101,121,111,110,100,32,101,110,100,32,111,102,32,120,97,116,116,114,32,115,112,97,99,101,10,0,0,0,120,97,116,116,114,95,102,114,101,101,95,115,112,97,99,101,0,0,0,0,0,0,0,0,99,114,105,116,105,99,97,108,32,101,114,114,111,114,58,32,37,115,58,32,110,111,32,112,114,101,118,10,0,0,0,0,97,100,100,95,100,101,110,116,114,121,0,0,0,0,0,0,112,97,100,32,62,61,32,48,0,0,0,0,0,0,0,0,108,105,98,115,112,97,114,115,101,47,115,112,97,114,115,101,46,99,0,0,0,0,0,0,119,114,105,116,101,95,97,108,108,95,98,108,111,99,107,115,0,0,0,0,0,0,0,0,98,98,45,62,116,121,112,101,32,61,61,32,66,65,67,75,69,68,95,66,76,79,67,75,95,68,65,84,65,0,0,0,108,105,98,115,112,97,114,115,101,47,98,97,99,107,101,100,95,98,108,111,99,107,46,99,0,0,0,0,0,0,0,0,98,97,99,107,101,100,95,98,108,111,99,107,95,100,97,116,97,0,0,0,0,0,0,0,98,98,45,62,116,121,112,101,32,61,61,32,66,65,67,75,69,68,95,66,76,79,67,75,95,70,73,76,69,0,0,0,98,97,99,107,101,100,95,98,108,111,99,107,95,102,105,108,101,110,97,109,101,0,0,0,98,98,45,62,116,121,112,101,32,61,61,32,66,65,67,75,69,68,95,66,76,79,67,75,95,70,68,0,0,0,0,0,98,97,99,107,101,100,95,98,108,111,99,107,95,102,100,0,98,98,45,62,116,121,112,101,32,61,61,32,66,65,67,75,69,68,95,66,76,79,67,75,95,70,73,76,69,32,124,124,32,98,98,45,62,116,121,112,101,32,61,61,32,66,65,67,75,69,68,95,66,76,79,67,75,95,70,68,0,0,0,0,98,97,99,107,101,100,95,98,108,111,99,107,95,102,105,108,101,95,111,102,102,115,101,116,0,0,0,0,0,0,0,0,98,98,45,62,116,121,112,101,32,61,61,32,66,65,67,75,69,68,95,66,76,79,67,75,95,70,73,76,76,0,0,0,98,97,99,107,101,100,95,98,108,111,99,107,95,102,105,108,108,95,118,97,108,0,0,0,97,45,62,98,108,111,99,107,32,60,32,98,45,62,98,108,111,99,107,0,0,0,0,0,109,101,114,103,101,95,98,98,0,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,109,97,108,108,111,99,32,115,116,114,117,99,116,32,111,117,116,110,58,32,37,115,10,0,0,0,0,0,0,111,117,116,112,117,116,95,102,105,108,101,95,110,101,119,95,110,111,114,109,97,108,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,119,114,105,116,101,58,32,37,115,10,0,0,0,102,105,108,101,95,119,114,105,116,101,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,105,110,99,111,109,112,108,101,116,101,32,119,114,105,116,101,10,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,108,115,101,101,107,54,52,58,32,37,115,10,0,102,105,108,101,95,115,107,105,112,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,109,97,108,108,111,99,32,115,116,114,117,99,116,32,111,117,116,103,122,58,32,37,115,10,0,0,0,0,0,111,117,116,112,117,116,95,102,105,108,101,95,110,101,119,95,103,122,0,0,0,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,103,122,119,114,105,116,101,58,32,37,115,10,0,103,122,95,102,105,108,101,95,119,114,105,116,101,0,0,0,101,114,114,111,114,58,32,37,115,58,32,105,110,99,111,109,112,108,101,116,101,32,103,122,119,114,105,116,101,10,0,0,101,114,114,111,114,58,32,37,115,58,32,103,122,115,101,101,107,58,32,37,115,10,0,0,103,122,95,102,105,108,101,95,115,107,105,112,0,0,0,0,119,98,57,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,103,122,111,112,101,110,58,32,37,115,10,0,0,103,122,95,102,105,108,101,95,111,112,101,110,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,109,97,108,108,111,99,32,122,101,114,111,95,98,117,102,58,32,37,115,10,0,111,117,116,112,117,116,95,102,105,108,101,95,105,110,105,116,0,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,109,97,108,108,111,99,32,102,105,108,108,95,98,117,102,58,32,37,115,10,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,101,114,114,111,114,58,32,37,115,58,32,100,111,110,39,116,32,99,97,114,101,32,115,105,122,101,32,37,108,108,117,32,105,115,32,110,111,116,32,97,32,109,117,108,116,105,112,108,101,32,111,102,32,116,104,101,32,98,108,111,99,107,32,115,105,122,101,32,37,117,10,0,119,114,105,116,101,95,115,112,97,114,115,101,95,115,107,105,112,95,99,104,117,110,107,0,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,32,37,100,0,0,0,0,0,32,37,100,45,37,100,0,0,98,108,111,99,107,95,97,108,108,111,99,97,116,111,114,95,105,110,105,116,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,37,100,32,98,108,111,99,107,115,10,0,0,0,0,0,0,0,0,97,112,112,101,110,100,95,111,111,98,95,97,108,108,111,99,97,116,105,111,110,0,0,0,101,114,114,111,114,58,32,37,115,58,32,103,101,116,95,120,97,116,116,114,58,32,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,37,100,10,0,0,0,0,103,101,116,95,120,97,116,116,114,95,98,108,111,99,107,95,102,111,114,95,105,110,111,100,101,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,103,101,116,95,120,97,116,116,114,58,32,115,112,97,114,115,101,95,102,105,108,101,95,97,100,100,95,100,97,116,97,32,102,97,105,108,117,114,101,32,37,100,10,0,0,97,108,108,111,99,97,116,101,95,98,103,95,105,110,111,100,101,95,116,97,98,108,101,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,37,100,32,98,108,111,99,107,115,32,105,110,32,98,108,111,99,107,32,103,114,111,117,112,32,37,100,10,0,0,0,0,0,0,101,120,116,52,95,97,108,108,111,99,97,116,101,95,98,101,115,116,95,102,105,116,95,112,97,114,116,105,97,108,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,37,117,32,98,108,111,99,107,115,44,32,111,117,116,32,111,102,32,115,112,97,99,101,63,10,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,114,101,115,101,114,118,101,32,37,117,32,98,108,111,99,107,115,32,105,110,32,98,108,111,99,107,32,103,114,111,117,112,32,37,117,10,10,0,0,0,0,0,0,101,120,116,52,95,97,108,108,111,99,97,116,101,95,98,108,111,99,107,115,95,102,114,111,109,95,98,108,111,99,107,95,103,114,111,117,112,0,0,0,101,114,114,111,114,58,32,37,115,58,32,97,116,116,101,109,112,116,101,100,32,116,111,32,114,101,115,101,114,118,101,32,97,108,114,101,97,100,121,32,114,101,115,101,114,118,101,100,32,98,108,111,99,107,10,0,114,101,115,101,114,118,101,95,98,108,111,99,107,115,0,0,105,110,105,116,95,98,103,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,101,120,116,101,110,116,115,32,102,111,114,32,37,108,117,32,98,121,116,101,115,10,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,116,116,97,99,104,32,98,108,111,99,107,115,32,116,111,32,105,110,100,105,114,101,99,116,32,105,110,111,100,101,10,0,0,0,99,114,105,116,105,99,97,108,32,101,114,114,111,114,58,32,37,115,58,32,114,101,115,101,114,118,101,100,32,98,108,111,99,107,115,32,110,111,116,32,97,32,109,117,108,116,105,112,108,101,32,111,102,32,37,100,10,0,0,0,0,0,0,0,105,110,111,100,101,95,97,116,116,97,99,104,95,114,101,115,105,122,101,0,0,0,0,0,105,110,111,100,101,95,97,108,108,111,99,97,116,101,95,100,97,116,97,95,105,110,100,105,114,101,99,116,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,98,97,99,107,105,110,103,32,102,111,114,32,37,108,117,32,98,121,116,101,115,10,0,0,0,0,0,0,99,114,105,116,105,99,97,108,32,101,114,114,111,114,58,32,37,115,58,32,105,110,100,105,114,101,99,116,32,98,97,99,107,105,110,103,32,108,97,114,103,101,114,32,116,104,97,110,32,37,100,32,98,108,111,99,107,115,10,0,0,0,0,0,99,114,101,97,116,101,95,98,97,99,107,105,110,103,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,116,116,97,99,104,32,100,105,114,101,99,116,32,98,108,111,99,107,115,32,116,111,32,105,110,111,100,101,10,0,0,0,0,0,100,111,95,105,110,111,100,101,95,97,116,116,97,99,104,95,105,110,100,105,114,101,99,116,0,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,116,116,97,99,104,32,105,110,100,105,114,101,99,116,32,98,108,111,99,107,115,32,116,111,32,105,110,111,100,101,10,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,116,116,97,99,104,32,100,105,110,100,105,114,101,99,116,32,98,108,111,99,107,115,32,116,111,32,105,110,111,100,101,10,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,116,116,97,99,104,32,116,105,110,100,105,114,101,99,116,32,98,108,111,99,107,115,32,116,111,32,105,110,111,100,101,10,0,0,101,114,114,111,114,58,32,37,115,58,32,98,108,111,99,107,115,32,108,101,102,116,32,97,102,116,101,114,32,116,114,105,112,108,121,45,105,110,100,105,114,101,99,116,32,97,108,108,111,99,97,116,105,111,110,10,0,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,100,118,97,110,99,101,32,111,111,98,32,98,108,111,99,107,10,0,105,110,111,100,101,95,97,116,116,97,99,104,95,116,105,110,100,105,114,101,99,116,95,98,108,111,99,107,115,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,100,118,97,110,99,101,32,37,100,32,98,108,111,99,107,115,10,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,114,101,115,101,114,118,101,32,111,111,98,32,98,108,111,99,107,10,0,102,105,108,108,95,116,105,110,100,105,114,101,99,116,95,98,108,111,99,107,0,0,0,0,102,105,108,108,95,100,105,110,100,105,114,101,99,116,95,98,108,111,99,107,0,0,0,0,105,110,111,100,101,95,97,116,116,97,99,104,95,100,105,110,100,105,114,101,99,116,95,98,108,111,99,107,115,0,0,0,105,110,111,100,101,95,97,116,116,97,99,104,95,105,110,100,105,114,101,99,116,95,98,108,111,99,107,115,0,0,0,0,105,110,111,100,101,95,97,116,116,97,99,104,95,100,105,114,101,99,116,95,98,108,111,99,107,115,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,37,100,32,98,108,111,99,107,115,10,0,0,0,0,0,0,0,0,100,111,95,105,110,111,100,101,95,97,108,108,111,99,97,116,101,95,105,110,100,105,114,101,99,116,0,0,0,0,0,0,99,114,105,116,105,99,97,108,32,101,114,114,111,114,58,32,37,115,58,32,114,101,113,117,101,115,116,32,116,111,111,32,108,97,114,103,101,10,0,0,105,110,100,105,114,101,99,116,95,98,108,111,99,107,115,95,110,101,101,100,101,100,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,101,120,116,101,110,116,115,32,102,111,114,32,37,108,108,117,32,98,121,116,101,115,10,0,0,0,105,110,111,100,101,95,97,108,108,111,99,97,116,101,95,100,97,116,97,95,101,120,116,101,110,116,115,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,98,97,99,107,105,110,103,32,102,111,114,32,37,108,108,117,32,98,121,116,101,115,10,0,0,0,0,0,105,110,111,100,101,95,97,108,108,111,99,97,116,101,95,102,105,108,101,95,101,120,116,101,110,116,115,0,0,0,0,0,99,114,105,116,105,99,97,108,32,101,114,114,111,114,58,32,37,115,58,32,99,97,108,108,111,99,58,32,37,115,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([101,120,116,101,110,116,95,99,114,101,97,116,101,95,98,97,99,107,105,110,103,0,0,0,101,114,114,111,114,58,32,37,115,58,32,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,37,100,32,98,108,111,99,107,115,10,10,0,0,0,0,0,0,0,100,111,95,105,110,111,100,101,95,97,108,108,111,99,97,116,101,95,101,120,116,101,110,116,115,0,0,0,0,0,0,0,101,114,114,111,114,58,32,37,115,58,32,70,105,108,101,32,115,105,122,101,32,37,108,108,117,32,105,115,32,116,111,111,32,98,105,103,32,116,111,32,102,105,116,32,105,110,32,97,32,115,105,110,103,108,101,32,101,120,116,101,110,116,32,98,108,111,99,107,10,10,0,0,0,0,193,192,129,193,64,1,1,195,192,3,128,2,65,194,1,198,192,6,128,7,65,199,0,5,193,197,129,196,64,4,1,204,192,12,128,13,65,205,0,15,193,207,129,206,64,14,0,10,193,202,129,203,64,11,1,201,192,9,128,8,65,200,1,216,192,24,128,25,65,217,0,27,193,219,129,218,64,26,0,30,193,222,129,223,64,31,1,221,192,29,128,28,65,220,0,20,193,212,129,213,64,21,1,215,192,23,128,22,65,214,1,210,192,18,128,19,65,211,0,17,193,209,129,208,64,16,1,240,192,48,128,49,65,241,0,51,193,243,129,242,64,50,0,54,193,246,129,247,64,55,1,245,192,53,128,52,65,244,0,60,193,252,129,253,64,61,1,255,192,63,128,62,65,254,1,250,192,58,128,59,65,251,0,57,193,249,129,248,64,56,0,40,193,232,129,233,64,41,1,235,192,43,128,42,65,234,1,238,192,46,128,47,65,239,0,45,193,237,129,236,64,44,1,228,192,36,128,37,65,229,0,39,193,231,129,230,64,38,0,34,193,226,129,227,64,35,1,225,192,33,128,32,65,224,1,160,192,96,128,97,65,161,0,99,193,163,129,162,64,98,0,102,193,166,129,167,64,103,1,165,192,101,128,100,65,164,0,108,193,172,129,173,64,109,1,175,192,111,128,110,65,174,1,170,192,106,128,107,65,171,0,105,193,169,129,168,64,104,0,120,193,184,129,185,64,121,1,187,192,123,128,122,65,186,1,190,192,126,128,127,65,191,0,125,193,189,129,188,64,124,1,180,192,116,128,117,65,181,0,119,193,183,129,182,64,118,0,114,193,178,129,179,64,115,1,177,192,113,128,112,65,176,0,80,193,144,129,145,64,81,1,147,192,83,128,82,65,146,1,150,192,86,128,87,65,151,0,85,193,149,129,148,64,84,1,156,192,92,128,93,65,157,0,95,193,159,129,158,64,94,0,90,193,154,129,155,64,91,1,153,192,89,128,88,65,152,1,136,192,72,128,73,65,137,0,75,193,139,129,138,64,74,0,78,193,142,129,143,64,79,1,141,192,77,128,76,65,140,0,68,193,132,129,133,64,69,1,135,192,71,128,70,65,134,1,130,192,66,128,67,65,131,0,65,193,129,129,128,64,64,98,117,102,102,101,114,32,33,61,32,48,0,0,0,0,0,115,104,97,49,46,99,0,0,83,72,65,49,84,114,97,110,115,102,111,114,109,0,0,0,115,116,97,116,101,32,33,61,32,48,0,0,0,0,0,0,99,111,110,116,101,120,116,32,33,61,32,48,0,0,0,0,83,72,65,49,73,110,105,116,0,0,0,0,0,0,0,0,83,72,65,49,85,112,100,97,116,101,0,0,0,0,0,0,100,97,116,97,32,33,61,32,48,0,0,0,0,0,0,0,100,105,103,101,115,116,32,33,61,32,48,0,0,0,0,0,83,72,65,49,70,105,110,97,108,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,0,0,0,0,0,0,0,0,19,0,0,0,4,0,4,0,8,0,4,0,20,0,0,0,4,0,5,0,16,0,8,0,20,0,0,0,4,0,6,0,32,0,32,0,20,0,0,0,4,0,4,0,16,0,16,0,21,0,0,0,8,0,16,0,32,0,32,0,21,0,0,0,8,0,16,0,128,0,128,0,21,0,0,0,8,0,32,0,128,0,0,1,21,0,0,0,32,0,128,0,2,1,0,4,21,0,0,0,32,0,2,1,2,1,0,16,21,0,0,0,60,102,100,58,37,100,62,0,37,115,37,115,37,115,0,0,58,32,0,0,0,0,0,0,37,115,0,0,0,0,0,0,114,101,113,117,101,115,116,101,100,32,108,101,110,103,116,104,32,100,111,101,115,32,110,111,116,32,102,105,116,32,105,110,32,105,110,116,0,0,0,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,100,101,102,108,97,116,101,32,115,116,114,101,97,109,32,99,111,114,114,117,112,116,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,49,46,50,46,56,46,102,45,108,105,110,117,120,102,111,117,110,100,97,116,105,111,110,45,109,111,100,115,45,118,49,0,0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,16,17,18,18,19,19,20,20,20,20,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,1,2,3,4,5,6,7,8,8,9,9,10,10,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,192,79,0,0,184,84,0,0,1,1,0,0,30,1,0,0,15,0,0,0,0,0,0,0,64,84,0,0,168,85,0,0,0,0,0,0,30,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,176,86,0,0,0,0,0,0,19,0,0,0,7,0,0,0,0,0,0,0,12,0,8,0,140,0,8,0,76,0,8,0,204,0,8,0,44,0,8,0,172,0,8,0,108,0,8,0,236,0,8,0,28,0,8,0,156,0,8,0,92,0,8,0,220,0,8,0,60,0,8,0,188,0,8,0,124,0,8,0,252,0,8,0,2,0,8,0,130,0,8], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([66,0,8,0,194,0,8,0,34,0,8,0,162,0,8,0,98,0,8,0,226,0,8,0,18,0,8,0,146,0,8,0,82,0,8,0,210,0,8,0,50,0,8,0,178,0,8,0,114,0,8,0,242,0,8,0,10,0,8,0,138,0,8,0,74,0,8,0,202,0,8,0,42,0,8,0,170,0,8,0,106,0,8,0,234,0,8,0,26,0,8,0,154,0,8,0,90,0,8,0,218,0,8,0,58,0,8,0,186,0,8,0,122,0,8,0,250,0,8,0,6,0,8,0,134,0,8,0,70,0,8,0,198,0,8,0,38,0,8,0,166,0,8,0,102,0,8,0,230,0,8,0,22,0,8,0,150,0,8,0,86,0,8,0,214,0,8,0,54,0,8,0,182,0,8,0,118,0,8,0,246,0,8,0,14,0,8,0,142,0,8,0,78,0,8,0,206,0,8,0,46,0,8,0,174,0,8,0,110,0,8,0,238,0,8,0,30,0,8,0,158,0,8,0,94,0,8,0,222,0,8,0,62,0,8,0,190,0,8,0,126,0,8,0,254,0,8,0,1,0,8,0,129,0,8,0,65,0,8,0,193,0,8,0,33,0,8,0,161,0,8,0,97,0,8,0,225,0,8,0,17,0,8,0,145,0,8,0,81,0,8,0,209,0,8,0,49,0,8,0,177,0,8,0,113,0,8,0,241,0,8,0,9,0,8,0,137,0,8,0,73,0,8,0,201,0,8,0,41,0,8,0,169,0,8,0,105,0,8,0,233,0,8,0,25,0,8,0,153,0,8,0,89,0,8,0,217,0,8,0,57,0,8,0,185,0,8,0,121,0,8,0,249,0,8,0,5,0,8,0,133,0,8,0,69,0,8,0,197,0,8,0,37,0,8,0,165,0,8,0,101,0,8,0,229,0,8,0,21,0,8,0,149,0,8,0,85,0,8,0,213,0,8,0,53,0,8,0,181,0,8,0,117,0,8,0,245,0,8,0,13,0,8,0,141,0,8,0,77,0,8,0,205,0,8,0,45,0,8,0,173,0,8,0,109,0,8,0,237,0,8,0,29,0,8,0,157,0,8,0,93,0,8,0,221,0,8,0,61,0,8,0,189,0,8,0,125,0,8,0,253,0,8,0,19,0,9,0,19,1,9,0,147,0,9,0,147,1,9,0,83,0,9,0,83,1,9,0,211,0,9,0,211,1,9,0,51,0,9,0,51,1,9,0,179,0,9,0,179,1,9,0,115,0,9,0,115,1,9,0,243,0,9,0,243,1,9,0,11,0,9,0,11,1,9,0,139,0,9,0,139,1,9,0,75,0,9,0,75,1,9,0,203,0,9,0,203,1,9,0,43,0,9,0,43,1,9,0,171,0,9,0,171,1,9,0,107,0,9,0,107,1,9,0,235,0,9,0,235,1,9,0,27,0,9,0,27,1,9,0,155,0,9,0,155,1,9,0,91,0,9,0,91,1,9,0,219,0,9,0,219,1,9,0,59,0,9,0,59,1,9,0,187,0,9,0,187,1,9,0,123,0,9,0,123,1,9,0,251,0,9,0,251,1,9,0,7,0,9,0,7,1,9,0,135,0,9,0,135,1,9,0,71,0,9,0,71,1,9,0,199,0,9,0,199,1,9,0,39,0,9,0,39,1,9,0,167,0,9,0,167,1,9,0,103,0,9,0,103,1,9,0,231,0,9,0,231,1,9,0,23,0,9,0,23,1,9,0,151,0,9,0,151,1,9,0,87,0,9,0,87,1,9,0,215,0,9,0,215,1,9,0,55,0,9,0,55,1,9,0,183,0,9,0,183,1,9,0,119,0,9,0,119,1,9,0,247,0,9,0,247,1,9,0,15,0,9,0,15,1,9,0,143,0,9,0,143,1,9,0,79,0,9,0,79,1,9,0,207,0,9,0,207,1,9,0,47,0,9,0,47,1,9,0,175,0,9,0,175,1,9,0,111,0,9,0,111,1,9,0,239,0,9,0,239,1,9,0,31,0,9,0,31,1,9,0,159,0,9,0,159,1,9,0,95,0,9,0,95,1,9,0,223,0,9,0,223,1,9,0,63,0,9,0,63,1,9,0,191,0,9,0,191,1,9,0,127,0,9,0,127,1,9,0,255,0,9,0,255,1,9,0,0,0,7,0,64,0,7,0,32,0,7,0,96,0,7,0,16,0,7,0,80,0,7,0,48,0,7,0,112,0,7,0,8,0,7,0,72,0,7,0,40,0,7,0,104,0,7,0,24,0,7,0,88,0,7,0,56,0,7,0,120,0,7,0,4,0,7,0,68,0,7,0,36,0,7,0,100,0,7,0,20,0,7,0,84,0,7,0,52,0,7,0,116,0,7,0,3,0,8,0,131,0,8,0,67,0,8,0,195,0,8,0,35,0,8,0,163,0,8,0,99,0,8,0,227,0,8,0,0,0,5,0,16,0,5,0,8,0,5,0,24,0,5,0,4,0,5,0,20,0,5,0,12,0,5,0,28,0,5,0,2,0,5,0,18,0,5,0,10,0,5,0,26,0,5,0,6,0,5,0,22,0,5,0,14,0,5,0,30,0,5,0,1,0,5,0,17,0,5,0,9,0,5,0,25,0,5,0,5,0,5,0,21,0,5,0,13,0,5,0,29,0,5,0,3,0,5,0,19,0,5,0,11,0,5,0,27,0,5,0,7,0,5,0,23,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,0,0,0,0,110,101,101,100,32,100,105,99,116,105,111,110,97,114,121,0,115,116,114,101,97,109,32,101,110,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,105,108,101,32,101,114,114,111,114,0,0,0,0,0,0,115,116,114,101,97,109,32,101,114,114,111,114,0,0,0,0,100,97,116,97,32,101,114,114,111,114,0,0,0,0,0,0,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,0,0,0,0,0,98,117,102,102,101,114,32,101,114,114,111,114,0,0,0,0,105,110,99,111,109,112,97,116,105,98,108,101,32,118,101,114,115,105,111,110,0,0,0,0,0,87,0,0,16,87,0,0,32,87,0,0,40,87,0,0,56,87,0,0,72,87,0,0,88,87,0,0,112,87,0,0,128,87,0,0,32,87,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,32,105,108,108,101,103,97,108,32,111,112,116,105,111,110,58,32,0,0,0,0,0,0,10,0,0,0,0,0,0,0,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,58,32,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);




/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _htonl(value) {
      return ((value & 0xff) << 24) + ((value & 0xff00) << 8) +
             ((value & 0xff0000) >>> 8) + ((value & 0xff000000) >>> 24);
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function ___errno_location() {
      return ___errno_state;
    }

  
  function ___libgenSplitName(path) {
      if (path === 0 || HEAP8[((path)>>0)] === 0) {
        // Null or empty results in '.'.
        var me = ___libgenSplitName;
        if (!me.ret) {
          me.ret = allocate([46, 0], 'i8', ALLOC_NORMAL);
        }
        return [me.ret, -1];
      } else {
        var slash = 47;
        var allSlashes = true;
        var slashPositions = [];
        for (var i = 0; HEAP8[(((path)+(i))>>0)] !== 0; i++) {
          if (HEAP8[(((path)+(i))>>0)] === slash) {
            slashPositions.push(i);
          } else {
            allSlashes = false;
          }
        }
        var length = i;
        if (allSlashes) {
          // All slashes result in a single slash.
          HEAP8[(((path)+(1))>>0)]=0;
          return [path, -1];
        } else {
          // Strip trailing slashes.
          while (slashPositions.length &&
                 slashPositions[slashPositions.length - 1] == length - 1) {
            HEAP8[(((path)+(slashPositions.pop(i)))>>0)]=0;
            length--;
          }
          return [path, slashPositions.pop()];
        }
      }
    }function _basename(path) {
      // char *basename(char *path);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/basename.html
      var result = ___libgenSplitName(path);
      return result[0] + result[1] + 1;
    }

   
  Module["_memset"] = _memset;

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      if (!stream.currReading) {
        try {
          // load the list of entries now, then readdir will traverse that list, to ignore changes to files
          stream.currReading = FS.readdir(stream.path);
        } catch (e) {
          return FS.handleFSError(e);
        }
      }
      if (stream.position < 0 || stream.position >= stream.currReading.length) {
        HEAP32[((result)>>2)]=0;
        return 0;
      }
      var id;
      var type;
      var name = stream.currReading[stream.position++];
      if (!name.indexOf('.')) {
        id = 1;
        type = 4;
      } else {
        try {
          // child may have been removed since we started to read this directory
          var child = FS.lookupNode(stream.node, name);
        } catch (e) {
          // skip to the next entry (not infinite since position is incremented until currReading.length)
          return _readdir_r(dirp, entry, result);
        }
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
               8;                             // DT_REG, regular file.
      }
      HEAP32[((entry)>>2)]=id;
      HEAP32[(((entry)+(4))>>2)]=stream.position;
      HEAP32[(((entry)+(8))>>2)]=268;
      for (var i = 0; i < name.length; i++) {
        HEAP8[(((entry + 11)+(i))>>0)]=name.charCodeAt(i);
      }
      HEAP8[(((entry + 11)+(i))>>0)]=0;
      HEAP8[(((entry)+(10))>>0)]=type;
      HEAP32[((result)>>2)]=entry;
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // TODO Is it supposed to be safe to execute multiple readdirs?
      if (!_readdir.entry) _readdir.entry = _malloc(268);
      if (!_readdir.result) _readdir.result = _malloc(4);
      var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
      if (err) {
        ___setErrNo(err);
        return 0;
      }
      return HEAP32[((_readdir.result)>>2)];
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 7) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


  var _emscripten_check_longjmp=true;

   
  Module["_strncpy"] = _strncpy;

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

   
  Module["_i64Add"] = _i64Add;

  var _emscripten_postinvoke=true;

  var _emscripten_prep_setjmp=true;


  function _ntohl() {
  return _htonl.apply(null, arguments)
  }

  var _emscripten_cleanup_setjmp=true;

  
  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;function _realloc(ptr, size) {
      // Very simple, inefficient implementation - if you use a real malloc, best to use
      // a real realloc with it
      if (!size) {
        if (ptr) _free(ptr);
        return 0;
      }
      var ret = _malloc(size);
      if (ptr) {
        _memcpy(ret, ptr, size); // might be some invalid reads
        _free(ptr);
      }
      return ret;
    } 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  function _htons(value) {
      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
    }function _ntohs() {
  return _htons.apply(null, arguments)
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  var _emscripten_get_longjmp_result=true;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  
  function _msync(addr, len, flags) {
      // int msync(void *addr, size_t len, int flags);
      // http://pubs.opengroup.org/onlinepubs/009696799/functions/msync.html
      // TODO: support sync'ing parts of allocations
      var info = _mmap.mappings[addr];
      if (!info) return 0;
      if (len == info.num) {
        var buffer = new Uint8Array(HEAPU8.buffer, addr, len);
        return FS.msync(FS.getStream(info.fd), buffer, 0, len, info.flags);
      }
  
      return 0;
    }function _munmap(start, num) {
      if (!_mmap.mappings) _mmap.mappings = {};
      // TODO: support unmmap'ing parts of allocations
      var info = _mmap.mappings[start];
      if (!info) return 0;
      if (num == info.num) {
        // At the Linux man page, it says:
        // "The file may not actually be updated until msync(2) or munmap(2) are called."
        // I guess that means we need to call msync when doing munmap
        _msync(start, num); // todo: which flags?
  
        FS.munmap(FS.getStream(info.fd));
  
        _mmap.mappings[start] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }

  
  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        if (e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
          // an error occurred while trying to look up the path; we should just report ENOTDIR
          e.setErrno(ERRNO_CODES.ENOTDIR);
        }
        FS.handleFSError(e);
        return -1;
      }
    }function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      return _stat(stream.path, buf);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_strcpy"] = _strcpy;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  function _mmap(start, num, prot, flags, fd, offset) {
      /* FIXME: Since mmap is normally implemented at the kernel level,
       * this implementation simply uses malloc underneath the call to
       * mmap.
       */
      var MAP_PRIVATE = 2;
      var ptr;
      var allocated = false;
  
      if (!_mmap.mappings) _mmap.mappings = {};
  
      if (fd == -1) {
        ptr = _malloc(num);
        if (!ptr) return -1;
        _memset(ptr, 0, num);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -1;
        try {
          var res = FS.mmap(info, HEAPU8, start, num, offset, prot, flags);
          ptr = res.ptr;
          allocated = res.allocated;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }
  
      _mmap.mappings[ptr] = { malloc: ptr, num: num, allocated: allocated, fd: fd, flags: flags };
      return ptr;
    }

  function _lstat(path, buf) {
      // int lstat(const char *path, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/lstat.html
      return _stat(path, buf, true);
    }

  var _BDtoILow=true;

  var _BDtoIHigh=true;

  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      var fd = _fileno(dirp);
      var stream = FS.getStream(fd);
      if (stream.currReading) stream.currReading = null;
      return _close(fd);
    }

  function _readlink(path, buf, bufsize) {
      // ssize_t readlink(const char *restrict path, char *restrict buf, size_t bufsize);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/readlink.html
      path = Pointer_stringify(path);
      var str;
      try {
        str = FS.readlink(path);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
      str = str.slice(0, Math.max(0, bufsize - 1));
      writeStringToMemory(str, buf, true);
      return str.length;
    }

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }


  var _emscripten_setjmp=true;

  
  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

   
  Module["_i64Subtract"] = _i64Subtract;

  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = Pointer_stringify(dirname);
      if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return 0;
      }
      if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      }
      var fd = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function _truncate(path, length) {
      // int truncate(const char *path, off_t length);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/truncate.html
      // NOTE: The path argument may be a string, to simplify ftruncate().
      if (typeof path !== 'string') path = Pointer_stringify(path);
      try {
        FS.truncate(path, length);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _ftruncate(fildes, length) {
      // int ftruncate(int fildes, off_t length);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftruncate.html
      try {
        FS.ftruncate(fildes, length);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiii": invoke_iiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_readdir_r": _readdir_r, "__formatString": __formatString, "_truncate": _truncate, "_send": _send, "_fread": _fread, "_lseek": _lseek, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_fstat": _fstat, "___assert_fail": ___assert_fail, "_write": _write, "_ntohs": _ntohs, "_longjmp": _longjmp, "_open": _open, "_fflush": _fflush, "_lstat": _lstat, "_opendir": _opendir, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "_sbrk": _sbrk, "_readlink": _readlink, "___libgenSplitName": ___libgenSplitName, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_basename": _basename, "_unlink": _unlink, "_perror": _perror, "__exit": __exit, "___setErrNo": ___setErrNo, "_ftruncate": _ftruncate, "_fgets": _fgets, "_htonl": _htonl, "_fputs": _fputs, "_readdir": _readdir, "_pread": _pread, "_puts": _puts, "_mkport": _mkport, "_fclose": _fclose, "_htons": _htons, "_ntohl": _ntohl, "_fsync": _fsync, "___errno_location": ___errno_location, "_stat": _stat, "_recv": _recv, "_fgetc": _fgetc, "_printf": _printf, "_sysconf": _sysconf, "_read": _read, "_fputc": _fputc, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "_munmap": _munmap, "_closedir": _closedir, "_fopen": _fopen, "_exit": _exit, "_close": _close, "_mmap": _mmap, "_msync": _msync, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _readdir_r=env._readdir_r;
  var __formatString=env.__formatString;
  var _truncate=env._truncate;
  var _send=env._send;
  var _fread=env._fread;
  var _lseek=env._lseek;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _fstat=env._fstat;
  var ___assert_fail=env.___assert_fail;
  var _write=env._write;
  var _ntohs=env._ntohs;
  var _longjmp=env._longjmp;
  var _open=env._open;
  var _fflush=env._fflush;
  var _lstat=env._lstat;
  var _opendir=env._opendir;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var _sbrk=env._sbrk;
  var _readlink=env._readlink;
  var ___libgenSplitName=env.___libgenSplitName;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _basename=env._basename;
  var _unlink=env._unlink;
  var _perror=env._perror;
  var __exit=env.__exit;
  var ___setErrNo=env.___setErrNo;
  var _ftruncate=env._ftruncate;
  var _fgets=env._fgets;
  var _htonl=env._htonl;
  var _fputs=env._fputs;
  var _readdir=env._readdir;
  var _pread=env._pread;
  var _puts=env._puts;
  var _mkport=env._mkport;
  var _fclose=env._fclose;
  var _htons=env._htons;
  var _ntohl=env._ntohl;
  var _fsync=env._fsync;
  var ___errno_location=env.___errno_location;
  var _stat=env._stat;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _printf=env._printf;
  var _sysconf=env._sysconf;
  var _read=env._read;
  var _fputc=env._fputc;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _munmap=env._munmap;
  var _closedir=env._closedir;
  var _fopen=env._fopen;
  var _exit=env._exit;
  var _close=env._close;
  var _mmap=env._mmap;
  var _msync=env._msync;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block_list_file = 0, $crc = 0, $directory = 0, $exitcode = 0, $fd = 0, $filename = 0, $fixed_time = 0;
 var $fs_config_file = 0, $fs_config_func = 0, $gzip = 0, $mountpoint = 0, $opt = 0, $sehnd = 0, $sparse = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $verbose = 0, $wipe = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 $filename = 0;
 $directory = 0;
 $mountpoint = 0;
 $fs_config_func = 0;
 $fs_config_file = 0;
 $gzip = 0;
 $sparse = 0;
 $crc = 0;
 $wipe = 0;
 $verbose = 0;
 $fixed_time = -1;
 $sehnd = 0;
 $block_list_file = 0;
 L1: while(1) {
  $3 = $1;
  $4 = $2;
  $5 = (_getopt($3,$4,8)|0);
  $opt = $5;
  $6 = ($5|0)!=(-1);
  if (!($6)) {
   label = 28;
   break;
  }
  $7 = $opt;
  do {
   switch ($7|0) {
   case 83:  {
    break;
   }
   case 116:  {
    $34 = HEAP32[_stderr>>2]|0;
    (_fprintf(($34|0),(112|0),($vararg_buffer1|0))|0);
    break;
   }
   case 118:  {
    $verbose = 1;
    break;
   }
   case 115:  {
    $sparse = 1;
    break;
   }
   case 76:  {
    $30 = HEAP32[22568>>2]|0;
    HEAP32[((4880 + 44|0))>>2] = $30;
    break;
   }
   case 106:  {
    $15 = HEAP32[22568>>2]|0;
    $16 = (_parse_num($15)|0);
    $17 = tempRet0;
    HEAP32[((4880 + 28|0))>>2] = $16;
    break;
   }
   case 103:  {
    $21 = HEAP32[22568>>2]|0;
    $22 = (_parse_num($21)|0);
    $23 = tempRet0;
    HEAP32[((4880 + 12|0))>>2] = $22;
    break;
   }
   case 102:  {
    HEAP32[4872>>2] = 1;
    break;
   }
   case 122:  {
    $gzip = 1;
    break;
   }
   case 84:  {
    $35 = HEAP32[22568>>2]|0;
    $36 = (_strtoll($35,0,0)|0);
    $37 = tempRet0;
    $fixed_time = $36;
    break;
   }
   case 119:  {
    $wipe = 1;
    break;
   }
   case 108:  {
    $8 = HEAP32[22568>>2]|0;
    $9 = (_parse_num($8)|0);
    $10 = tempRet0;
    $11 = 4880;
    $12 = $11;
    HEAP32[$12>>2] = $9;
    $13 = (($11) + 4)|0;
    $14 = $13;
    HEAP32[$14>>2] = $10;
    break;
   }
   case 97:  {
    label = 12;
    break L1;
    break;
   }
   case 66:  {
    $39 = HEAP32[22568>>2]|0;
    $40 = (_fopen(($39|0),(168|0))|0);
    $block_list_file = $40;
    $41 = $block_list_file;
    $42 = ($41|0)==(0|0);
    if ($42) {
     label = 24;
     break L1;
    }
    break;
   }
   case 99:  {
    $crc = 1;
    break;
   }
   case 74:  {
    HEAP8[((4880 + 48|0))>>0] = 1;
    break;
   }
   case 67:  {
    $38 = HEAP32[22568>>2]|0;
    $fs_config_file = $38;
    break;
   }
   case 98:  {
    $18 = HEAP32[22568>>2]|0;
    $19 = (_parse_num($18)|0);
    $20 = tempRet0;
    HEAP32[((4880 + 8|0))>>2] = $19;
    break;
   }
   case 105:  {
    $24 = HEAP32[22568>>2]|0;
    $25 = (_parse_num($24)|0);
    $26 = tempRet0;
    HEAP32[((4880 + 24|0))>>2] = $25;
    break;
   }
   case 73:  {
    $27 = HEAP32[22568>>2]|0;
    $28 = (_parse_num($27)|0);
    $29 = tempRet0;
    HEAP32[((4880 + 20|0))>>2] = $28;
    break;
   }
   default: {
    label = 26;
    break L1;
   }
   }
  } while(0);
 }
 if ((label|0) == 12) {
  $31 = HEAP32[_stderr>>2]|0;
  (_fprintf(($31|0),(48|0),($vararg_buffer|0))|0);
  $32 = $2;
  $33 = HEAP32[$32>>2]|0;
  _usage($33);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $43 = HEAP32[_stderr>>2]|0;
  $44 = (___errno_location()|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (_strerror(($45|0))|0);
  HEAP32[$vararg_buffer3>>2] = $46;
  (_fprintf(($43|0),(176|0),($vararg_buffer3|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 26) {
  $47 = $2;
  $48 = HEAP32[$47>>2]|0;
  _usage($48);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 28) {
  $49 = $fs_config_file;
  $50 = ($49|0)!=(0|0);
  do {
   if ($50) {
    $51 = $fs_config_file;
    $52 = (_load_canned_fs_config($51)|0);
    $53 = ($52|0)<(0);
    if ($53) {
     $54 = HEAP32[_stderr>>2]|0;
     $55 = $fs_config_file;
     HEAP32[$vararg_buffer5>>2] = $55;
     (_fprintf(($54|0),(216|0),($vararg_buffer5|0))|0);
     _exit(1);
     // unreachable;
    } else {
     $fs_config_func = 23;
     break;
    }
   } else {
    $56 = $mountpoint;
    $57 = ($56|0)!=(0|0);
    if ($57) {
     $fs_config_func = 24;
    }
   }
  } while(0);
  $58 = $wipe;
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $sparse;
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = HEAP32[_stderr>>2]|0;
    (_fprintf(($62|0),(240|0),($vararg_buffer8|0))|0);
    $63 = $2;
    $64 = HEAP32[$63>>2]|0;
    _usage($64);
    _exit(1);
    // unreachable;
   }
  }
  $65 = $wipe;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $gzip;
   $68 = ($67|0)!=(0);
   if ($68) {
    $69 = HEAP32[_stderr>>2]|0;
    (_fprintf(($69|0),(280|0),($vararg_buffer10|0))|0);
    $70 = $2;
    $71 = HEAP32[$70>>2]|0;
    _usage($71);
    _exit(1);
    // unreachable;
   }
  }
  $72 = HEAP32[22464>>2]|0;
  $73 = $1;
  $74 = ($72|0)>=($73|0);
  if ($74) {
   $75 = HEAP32[_stderr>>2]|0;
   (_fprintf(($75|0),(320|0),($vararg_buffer12|0))|0);
   $76 = $2;
   $77 = HEAP32[$76>>2]|0;
   _usage($77);
   _exit(1);
   // unreachable;
  }
  $78 = HEAP32[22464>>2]|0;
  $79 = (($78) + 1)|0;
  HEAP32[22464>>2] = $79;
  $80 = $2;
  $81 = (($80) + ($78<<2)|0);
  $82 = HEAP32[$81>>2]|0;
  $filename = $82;
  $83 = HEAP32[22464>>2]|0;
  $84 = $1;
  $85 = ($83|0)<($84|0);
  if ($85) {
   $86 = HEAP32[22464>>2]|0;
   $87 = (($86) + 1)|0;
   HEAP32[22464>>2] = $87;
   $88 = $2;
   $89 = (($88) + ($86<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $directory = $90;
  }
  $91 = HEAP32[22464>>2]|0;
  $92 = $1;
  $93 = ($91|0)<($92|0);
  if ($93) {
   $94 = HEAP32[_stderr>>2]|0;
   $95 = HEAP32[22464>>2]|0;
   $96 = $2;
   $97 = (($96) + ($95<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   HEAP32[$vararg_buffer14>>2] = $98;
   (_fprintf(($94|0),(360|0),($vararg_buffer14|0))|0);
   $99 = $2;
   $100 = HEAP32[$99>>2]|0;
   _usage($100);
   _exit(1);
   // unreachable;
  }
  $101 = $filename;
  $102 = (_strcmp($101,392)|0);
  $103 = ($102|0)!=(0);
  do {
   if ($103) {
    $104 = $filename;
    HEAP32[$vararg_buffer17>>2] = 420;
    $105 = (_open(($104|0),577,($vararg_buffer17|0))|0);
    $fd = $105;
    $106 = $fd;
    $107 = ($106|0)<(0);
    if (!($107)) {
     break;
    }
    _perror((400|0));
    $0 = 1;
    $132 = $0;
    STACKTOP = sp;return ($132|0);
   } else {
    $fd = 1;
   }
  } while(0);
  $108 = $fd;
  $109 = $directory;
  $110 = $mountpoint;
  $111 = $fs_config_func;
  $112 = $gzip;
  $113 = $sparse;
  $114 = $crc;
  $115 = $wipe;
  $116 = $sehnd;
  $117 = $verbose;
  $118 = $fixed_time;
  $119 = $block_list_file;
  $120 = (_make_ext4fs_internal($108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119)|0);
  $exitcode = $120;
  $121 = $fd;
  (_close(($121|0))|0);
  $122 = $block_list_file;
  $123 = ($122|0)!=(0|0);
  if ($123) {
   $124 = $block_list_file;
   (_fclose(($124|0))|0);
  }
  $125 = $exitcode;
  $126 = ($125|0)!=(0);
  if ($126) {
   $127 = $filename;
   $128 = (_strcmp($127,392)|0);
   $129 = ($128|0)!=(0);
   if ($129) {
    $130 = $filename;
    (_unlink(($130|0))|0);
   }
  }
  $131 = $exitcode;
  $0 = $131;
  $132 = $0;
  STACKTOP = sp;return ($132|0);
 }
 return (0)|0;
}
function _usage($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $path;
 $1 = HEAP32[_stderr>>2]|0;
 $2 = $0;
 $3 = (_basename(($2|0))|0);
 HEAP32[$vararg_buffer>>2] = $3;
 (_fprintf(($1|0),(3288|0),($vararg_buffer|0))|0);
 $4 = HEAP32[_stderr>>2]|0;
 (_fprintf(($4|0),(3352|0),($vararg_buffer1|0))|0);
 $5 = HEAP32[_stderr>>2]|0;
 (_fprintf(($5|0),(3424|0),($vararg_buffer3|0))|0);
 $6 = HEAP32[_stderr>>2]|0;
 (_fprintf(($6|0),(3480|0),($vararg_buffer5|0))|0);
 $7 = HEAP32[_stderr>>2]|0;
 (_fprintf(($7|0),(3544|0),($vararg_buffer7|0))|0);
 $8 = HEAP32[_stderr>>2]|0;
 (_fprintf(($8|0),(3616|0),($vararg_buffer9|0))|0);
 STACKTOP = sp;return;
}
function _fs_config($path,$dir,$uid,$gid,$mode,$capabilities) {
 $path = $path|0;
 $dir = $dir|0;
 $uid = $uid|0;
 $gid = $gid|0;
 $mode = $mode|0;
 $capabilities = $capabilities|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $len = 0, $pc = 0, $plen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dir;
 $2 = $uid;
 $3 = $gid;
 $4 = $mode;
 $5 = $capabilities;
 $6 = $0;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = ($8|0)==(47);
 if ($9) {
  $10 = $0;
  $11 = (($10) + 1|0);
  $0 = $11;
 }
 $12 = $1;
 $13 = ($12|0)!=(0);
 $14 = $13 ? 408 : 1048;
 $pc = $14;
 $15 = $0;
 $16 = (_strlen(($15|0))|0);
 $plen = $16;
 L4: while(1) {
  $17 = $pc;
  $18 = (($17) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if (!($20)) {
   break;
  }
  $21 = $pc;
  $22 = (($21) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_strlen(($23|0))|0);
  $len = $24;
  $25 = $1;
  $26 = ($25|0)!=(0);
  do {
   if ($26) {
    $27 = $plen;
    $28 = $len;
    $29 = ($27|0)<($28|0);
    if ($29) {
     break;
    }
    $30 = $pc;
    $31 = (($30) + 24|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $0;
    $34 = $len;
    $35 = (_strncmp($32,$33,$34)|0);
    $36 = ($35|0)!=(0);
    if (!($36)) {
     label = 9;
     break L4;
    }
   } else {
    $37 = $len;
    $38 = (($37) - 1)|0;
    $39 = $pc;
    $40 = (($39) + 24|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + ($38)|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = ($44|0)==(42);
    if ($45) {
     $46 = $pc;
     $47 = (($46) + 24|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $0;
     $50 = $len;
     $51 = (($50) - 1)|0;
     $52 = (_strncmp($48,$49,$51)|0);
     $53 = ($52|0)!=(0);
     if (!($53)) {
      label = 13;
      break L4;
     }
    } else {
     $54 = $plen;
     $55 = $len;
     $56 = ($54|0)==($55|0);
     if ($56) {
      $57 = $pc;
      $58 = (($57) + 24|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $0;
      $61 = $len;
      $62 = (_strncmp($59,$60,$61)|0);
      $63 = ($62|0)!=(0);
      if (!($63)) {
       label = 17;
       break L4;
      }
     }
    }
   }
  } while(0);
  $64 = $pc;
  $65 = (($64) + 32|0);
  $pc = $65;
 }
 if ((label|0) == 9) {
 }
 else if ((label|0) == 13) {
 }
 else if ((label|0) == 17) {
 }
 $66 = $pc;
 $67 = (($66) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $2;
 HEAP32[$69>>2] = $68;
 $70 = $pc;
 $71 = (($70) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $3;
 HEAP32[$73>>2] = $72;
 $74 = $4;
 $75 = HEAP32[$74>>2]|0;
 $76 = $75 & -4096;
 $77 = $pc;
 $78 = HEAP32[$77>>2]|0;
 $79 = $76 | $78;
 $80 = $4;
 HEAP32[$80>>2] = $79;
 $81 = $pc;
 $82 = (($81) + 16|0);
 $83 = $82;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $86 = (($83) + 4)|0;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = $5;
 $90 = $89;
 $91 = $90;
 HEAP32[$91>>2] = $85;
 $92 = (($90) + 4)|0;
 $93 = $92;
 HEAP32[$93>>2] = $88;
 STACKTOP = sp;return;
}
function _make_ext4fs_internal($fd,$_directory,$_mountpoint,$fs_config_func,$gzip,$sparse,$crc,$wipe,$sehnd,$verbose,$fixed_time,$block_list_file) {
 $fd = $fd|0;
 $_directory = $_directory|0;
 $_mountpoint = $_mountpoint|0;
 $fs_config_func = $fs_config_func|0;
 $gzip = $gzip|0;
 $sparse = $sparse|0;
 $crc = $crc|0;
 $wipe = $wipe|0;
 $sehnd = $sehnd|0;
 $verbose = $verbose|0;
 $fixed_time = $fixed_time|0;
 $block_list_file = $block_list_file|0;
 var $$0 = 0, $$reg2mem160$0 = 0, $$reg2mem162$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond14 = 0, $cond15 = 0, $cond16 = 0, $cond17 = 0, $cond18 = 0, $cond19 = 0, $cond2 = 0, $cond20 = 0, $cond21 = 0, $cond22 = 0;
 var $cond23 = 0, $cond24 = 0, $cond25 = 0, $cond26 = 0, $cond27 = 0, $cond28 = 0, $cond29 = 0, $cond3 = 0, $cond30 = 0, $cond31 = 0, $cond32 = 0, $cond33 = 0, $cond34 = 0, $cond35 = 0, $cond36 = 0, $cond37 = 0, $cond38 = 0, $cond39 = 0, $cond4 = 0, $cond40 = 0;
 var $cond41 = 0, $cond42 = 0, $cond43 = 0, $cond44 = 0, $cond45 = 0, $cond46 = 0, $cond47 = 0, $cond48 = 0, $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, $directory$0 = 0, $directory$0$phi = 0, $directory$1 = 0, $mountpoint$0 = 0, $p$0 = 0, $root_inode_num$0 = 0, $vararg_buffer = 0;
 var $vararg_buffer164 = 0, $vararg_buffer166 = 0, $vararg_buffer168 = 0, $vararg_buffer171 = 0, $vararg_buffer174 = 0, $vararg_buffer177 = 0, $vararg_buffer180 = 0, $vararg_buffer183 = 0, $vararg_buffer186 = 0, $vararg_buffer189 = 0, $vararg_buffer192 = 0, $vararg_buffer195 = 0, $vararg_buffer198 = 0, $vararg_buffer202 = 0, $vararg_buffer205 = 0, $vararg_ptr201 = 0, $vararg_ptr208 = 0, $vararg_ptr209 = 0, $vararg_ptr210 = 0, _setjmpTable = 0;
 var _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer205 = sp + 120|0;
 $vararg_buffer202 = sp + 112|0;
 $vararg_buffer198 = sp + 104|0;
 $vararg_buffer195 = sp + 96|0;
 $vararg_buffer192 = sp + 88|0;
 $vararg_buffer189 = sp + 80|0;
 $vararg_buffer186 = sp + 72|0;
 $vararg_buffer183 = sp + 64|0;
 $vararg_buffer180 = sp + 56|0;
 $vararg_buffer177 = sp + 48|0;
 $vararg_buffer174 = sp + 40|0;
 $vararg_buffer171 = sp + 32|0;
 $vararg_buffer168 = sp + 24|0;
 $vararg_buffer166 = sp + 16|0;
 $vararg_buffer164 = sp + 8|0;
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 _setjmpTable = _saveSetjmp(4936,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
 __THREW__ = 0;
 $0 = __THREW__; __THREW__ = 0;
 if ((($0|0) != 0) & ((threwValue|0) != 0)) { $1 = _testSetjmp(HEAP32[$0>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1|0) == 0) { _longjmp($0|0, threwValue|0); } tempRet0 = threwValue; } else { $1 = -1; };
 $2 = tempRet0;
 $cond = ($1|0)==(1);
 if ($cond) {
  $$reg2mem162$0 = $2;$directory$0 = 0;
 } else {
  $$reg2mem162$0 = 0;$directory$0 = 0;
 }
 L3: while(1) {
  $3 = ($$reg2mem162$0|0)!=(0);
  if ($3) {
   label = 4;
   break;
  }
  $4 = ($_mountpoint|0)==(0|0);
  if ($4) {
   __THREW__ = 0;
   $5 = (invoke_ii(25,(22304|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = threwValue; } else { $7 = -1; };
   $8 = tempRet0;
   $cond48 = ($7|0)==(1);
   if ($cond48) {
    $directory$0$phi = $directory$0;$$reg2mem162$0 = $8;$directory$0 = $directory$0$phi;
    continue;
   }
   $mountpoint$0 = $5;
  } else {
   __THREW__ = 0;
   $9 = (invoke_ii(26,($_mountpoint|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
   $12 = tempRet0;
   $cond1 = ($11|0)==(1);
   if ($cond1) {
    $directory$0$phi = $directory$0;$$reg2mem162$0 = $12;$directory$0 = $directory$0$phi;
    continue;
   }
   $mountpoint$0 = $9;
  }
  $13 = ($_directory|0)!=(0|0);
  if ($13) {
   __THREW__ = 0;
   $14 = (invoke_ii(27,($_directory|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   if ((($15|0) != 0) & ((threwValue|0) != 0)) { $16 = _testSetjmp(HEAP32[$15>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($16|0) == 0) { _longjmp($15|0, threwValue|0); } tempRet0 = threwValue; } else { $16 = -1; };
   $17 = tempRet0;
   $cond47 = ($16|0)==(1);
   if ($cond47) {
    $directory$0$phi = $directory$0;$$reg2mem162$0 = $17;$directory$0 = $directory$0$phi;
    continue;
   }
   $directory$1 = $14;
  } else {
   $directory$1 = $directory$0;
  }
  $18 = 4880;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)<(0);
  $25 = ($20>>>0)<=(0);
  $26 = ($23|0)==(0);
  $27 = $26 & $25;
  $28 = $24 | $27;
  if ($28) {
   __THREW__ = 0;
   $29 = (invoke_ii(28,($fd|0))|0);
   $30 = tempRet0;
   $31 = __THREW__; __THREW__ = 0;
   if ((($31|0) != 0) & ((threwValue|0) != 0)) { $32 = _testSetjmp(HEAP32[$31>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($32|0) == 0) { _longjmp($31|0, threwValue|0); } tempRet0 = threwValue; } else { $32 = -1; };
   $33 = tempRet0;
   $cond46 = ($32|0)==(1);
   if ($cond46) {
    $$reg2mem162$0 = $33;$directory$0 = $directory$1;
    continue;
   }
   $34 = 4880;
   $35 = $34;
   HEAP32[$35>>2] = $29;
   $36 = (($34) + 4)|0;
   $37 = $36;
   HEAP32[$37>>2] = $30;
  }
  $38 = 4880;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($38) + 4)|0;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)<(0);
  $45 = ($40>>>0)<=(0);
  $46 = ($43|0)==(0);
  $47 = $46 & $45;
  $48 = $44 | $47;
  if ($48) {
   $49 = HEAP32[_stderr>>2]|0;
   __THREW__ = 0;
   (invoke_iiii(29,($49|0),(3648|0),($vararg_buffer|0))|0);
   $50 = __THREW__; __THREW__ = 0;
   if ((($50|0) != 0) & ((threwValue|0) != 0)) { $51 = _testSetjmp(HEAP32[$50>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($51|0) == 0) { _longjmp($50|0, threwValue|0); } tempRet0 = threwValue; } else { $51 = -1; };
   $52 = tempRet0;
   $cond45 = ($51|0)==(1);
   if ($cond45) {
    $$reg2mem162$0 = $52;$directory$0 = $directory$1;
    continue;
   } else {
    label = 18;
    break;
   }
  }
  $53 = HEAP32[((4880 + 8|0))>>2]|0;
  $54 = ($53>>>0)<=(0);
  if ($54) {
   __THREW__ = 0;
   $55 = (invoke_i(30)|0);
   $56 = __THREW__; __THREW__ = 0;
   if ((($56|0) != 0) & ((threwValue|0) != 0)) { $57 = _testSetjmp(HEAP32[$56>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($57|0) == 0) { _longjmp($56|0, threwValue|0); } tempRet0 = threwValue; } else { $57 = -1; };
   $58 = tempRet0;
   $cond44 = ($57|0)==(1);
   if ($cond44) {
    $$reg2mem162$0 = $58;$directory$0 = $directory$1;
    continue;
   }
   HEAP32[((4880 + 8|0))>>2] = $55;
  }
  $59 = HEAP32[((4880 + 8|0))>>2]|0;
  $60 = (_i64Subtract(($59|0),0,1,0)|0);
  $61 = tempRet0;
  $62 = $60 ^ -1;
  $63 = $61 ^ -1;
  $64 = 4880;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($64) + 4)|0;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = $66 & $62;
  $71 = $69 & $63;
  $72 = 4880;
  $73 = $72;
  HEAP32[$73>>2] = $70;
  $74 = (($72) + 4)|0;
  $75 = $74;
  HEAP32[$75>>2] = $71;
  $76 = HEAP32[((4880 + 28|0))>>2]|0;
  $77 = ($76|0)==(0);
  if ($77) {
   __THREW__ = 0;
   $78 = (invoke_i(31)|0);
   $79 = __THREW__; __THREW__ = 0;
   if ((($79|0) != 0) & ((threwValue|0) != 0)) { $80 = _testSetjmp(HEAP32[$79>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($80|0) == 0) { _longjmp($79|0, threwValue|0); } tempRet0 = threwValue; } else { $80 = -1; };
   $81 = tempRet0;
   $cond43 = ($80|0)==(1);
   if ($cond43) {
    $$reg2mem162$0 = $81;$directory$0 = $directory$1;
    continue;
   }
   HEAP32[((4880 + 28|0))>>2] = $78;
  }
  $82 = HEAP8[((4880 + 48|0))>>0]|0;
  $83 = $82&255;
  $84 = ($83|0)==(0);
  if ($84) {
   HEAP16[((4880 + 34|0))>>1] = 4;
  } else {
   HEAP32[((4880 + 28|0))>>2] = 0;
  }
  $85 = HEAP32[((4880 + 12|0))>>2]|0;
  $86 = ($85>>>0)<=(0);
  if ($86) {
   __THREW__ = 0;
   $87 = (invoke_i(32)|0);
   $88 = __THREW__; __THREW__ = 0;
   if ((($88|0) != 0) & ((threwValue|0) != 0)) { $89 = _testSetjmp(HEAP32[$88>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($89|0) == 0) { _longjmp($88|0, threwValue|0); } tempRet0 = threwValue; } else { $89 = -1; };
   $90 = tempRet0;
   $cond42 = ($89|0)==(1);
   if ($cond42) {
    $$reg2mem162$0 = $90;$directory$0 = $directory$1;
    continue;
   }
   HEAP32[((4880 + 12|0))>>2] = $87;
  }
  $91 = HEAP32[((4880 + 24|0))>>2]|0;
  $92 = ($91>>>0)<=(0);
  if ($92) {
   __THREW__ = 0;
   $93 = (invoke_i(33)|0);
   $94 = __THREW__; __THREW__ = 0;
   if ((($94|0) != 0) & ((threwValue|0) != 0)) { $95 = _testSetjmp(HEAP32[$94>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($95|0) == 0) { _longjmp($94|0, threwValue|0); } tempRet0 = threwValue; } else { $95 = -1; };
   $96 = tempRet0;
   $cond41 = ($95|0)==(1);
   if ($cond41) {
    $$reg2mem162$0 = $96;$directory$0 = $directory$1;
    continue;
   }
   HEAP32[((4880 + 24|0))>>2] = $93;
  }
  $97 = HEAP32[((4880 + 20|0))>>2]|0;
  $98 = ($97>>>0)<=(0);
  if ($98) {
   HEAP32[((4880 + 20|0))>>2] = 256;
  }
  $99 = HEAP32[((4880 + 44|0))>>2]|0;
  $100 = ($99|0)==(0|0);
  if ($100) {
   HEAP32[((4880 + 44|0))>>2] = 22304;
  }
  __THREW__ = 0;
  $101 = (invoke_i(34)|0);
  $102 = __THREW__; __THREW__ = 0;
  if ((($102|0) != 0) & ((threwValue|0) != 0)) { $103 = _testSetjmp(HEAP32[$102>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($103|0) == 0) { _longjmp($102|0, threwValue|0); } tempRet0 = threwValue; } else { $103 = -1; };
  $104 = tempRet0;
  $cond2 = ($103|0)==(1);
  if ($cond2) {
   $$reg2mem162$0 = $104;$directory$0 = $directory$1;
   continue;
  }
  HEAP32[((4880 + 16|0))>>2] = $101;
  $105 = HEAP16[((4880 + 34|0))>>1]|0;
  $106 = $105&65535;
  $107 = $106 | 24;
  $108 = $107&65535;
  HEAP16[((4880 + 34|0))>>1] = $108;
  $109 = HEAP16[((4880 + 32|0))>>1]|0;
  $110 = $109&65535;
  $111 = $110 | 19;
  $112 = $111&65535;
  HEAP16[((4880 + 32|0))>>1] = $112;
  $113 = HEAP16[((4880 + 36|0))>>1]|0;
  $114 = $113&65535;
  $115 = $114 | 66;
  $116 = $115&65535;
  HEAP16[((4880 + 36|0))>>1] = $116;
  __THREW__ = 0;
  $117 = (invoke_i(35)|0);
  $118 = __THREW__; __THREW__ = 0;
  if ((($118|0) != 0) & ((threwValue|0) != 0)) { $119 = _testSetjmp(HEAP32[$118>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($119|0) == 0) { _longjmp($118|0, threwValue|0); } tempRet0 = threwValue; } else { $119 = -1; };
  $120 = tempRet0;
  $cond3 = ($119|0)==(1);
  if ($cond3) {
   $$reg2mem162$0 = $120;$directory$0 = $directory$1;
   continue;
  }
  HEAP32[((4880 + 40|0))>>2] = $117;
  __THREW__ = 0;
  (invoke_iii(36,(3680|0),($vararg_buffer164|0))|0);
  $121 = __THREW__; __THREW__ = 0;
  if ((($121|0) != 0) & ((threwValue|0) != 0)) { $122 = _testSetjmp(HEAP32[$121>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($122|0) == 0) { _longjmp($121|0, threwValue|0); } tempRet0 = threwValue; } else { $122 = -1; };
  $123 = tempRet0;
  $cond4 = ($122|0)==(1);
  if ($cond4) {
   $$reg2mem162$0 = $123;$directory$0 = $directory$1;
   continue;
  }
  $124 = 4880;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = (($124) + 4)|0;
  $128 = $127;
  $129 = HEAP32[$128>>2]|0;
  __THREW__ = 0;
  $130 = $vararg_buffer166;
  $131 = $130;
  HEAP32[$131>>2] = $126;
  $132 = (($130) + 4)|0;
  $133 = $132;
  HEAP32[$133>>2] = $129;
  (invoke_iii(36,(3720|0),($vararg_buffer166|0))|0);
  $134 = __THREW__; __THREW__ = 0;
  if ((($134|0) != 0) & ((threwValue|0) != 0)) { $135 = _testSetjmp(HEAP32[$134>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($135|0) == 0) { _longjmp($134|0, threwValue|0); } tempRet0 = threwValue; } else { $135 = -1; };
  $136 = tempRet0;
  $cond5 = ($135|0)==(1);
  if ($cond5) {
   $$reg2mem162$0 = $136;$directory$0 = $directory$1;
   continue;
  }
  $137 = HEAP32[((4880 + 8|0))>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer168>>2] = $137;
  (invoke_iii(36,(3736|0),($vararg_buffer168|0))|0);
  $138 = __THREW__; __THREW__ = 0;
  if ((($138|0) != 0) & ((threwValue|0) != 0)) { $139 = _testSetjmp(HEAP32[$138>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($139|0) == 0) { _longjmp($138|0, threwValue|0); } tempRet0 = threwValue; } else { $139 = -1; };
  $140 = tempRet0;
  $cond6 = ($139|0)==(1);
  if ($cond6) {
   $$reg2mem162$0 = $140;$directory$0 = $directory$1;
   continue;
  }
  $141 = HEAP32[((4880 + 12|0))>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer171>>2] = $141;
  (invoke_iii(36,(3760|0),($vararg_buffer171|0))|0);
  $142 = __THREW__; __THREW__ = 0;
  if ((($142|0) != 0) & ((threwValue|0) != 0)) { $143 = _testSetjmp(HEAP32[$142>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($143|0) == 0) { _longjmp($142|0, threwValue|0); } tempRet0 = threwValue; } else { $143 = -1; };
  $144 = tempRet0;
  $cond7 = ($143|0)==(1);
  if ($cond7) {
   $$reg2mem162$0 = $144;$directory$0 = $directory$1;
   continue;
  }
  $145 = HEAP32[((4880 + 16|0))>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer174>>2] = $145;
  (invoke_iii(36,(3792|0),($vararg_buffer174|0))|0);
  $146 = __THREW__; __THREW__ = 0;
  if ((($146|0) != 0) & ((threwValue|0) != 0)) { $147 = _testSetjmp(HEAP32[$146>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($147|0) == 0) { _longjmp($146|0, threwValue|0); } tempRet0 = threwValue; } else { $147 = -1; };
  $148 = tempRet0;
  $cond8 = ($147|0)==(1);
  if ($cond8) {
   $$reg2mem162$0 = $148;$directory$0 = $directory$1;
   continue;
  }
  $149 = HEAP32[((4880 + 20|0))>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer177>>2] = $149;
  (invoke_iii(36,(3824|0),($vararg_buffer177|0))|0);
  $150 = __THREW__; __THREW__ = 0;
  if ((($150|0) != 0) & ((threwValue|0) != 0)) { $151 = _testSetjmp(HEAP32[$150>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($151|0) == 0) { _longjmp($150|0, threwValue|0); } tempRet0 = threwValue; } else { $151 = -1; };
  $152 = tempRet0;
  $cond9 = ($151|0)==(1);
  if ($cond9) {
   $$reg2mem162$0 = $152;$directory$0 = $directory$1;
   continue;
  }
  $153 = HEAP32[((4880 + 28|0))>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer180>>2] = $153;
  (invoke_iii(36,(3848|0),($vararg_buffer180|0))|0);
  $154 = __THREW__; __THREW__ = 0;
  if ((($154|0) != 0) & ((threwValue|0) != 0)) { $155 = _testSetjmp(HEAP32[$154>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($155|0) == 0) { _longjmp($154|0, threwValue|0); } tempRet0 = threwValue; } else { $155 = -1; };
  $156 = tempRet0;
  $cond10 = ($155|0)==(1);
  if ($cond10) {
   $$reg2mem162$0 = $156;$directory$0 = $directory$1;
   continue;
  }
  $157 = HEAP32[((4880 + 44|0))>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer183>>2] = $157;
  (invoke_iii(36,(3872|0),($vararg_buffer183|0))|0);
  $158 = __THREW__; __THREW__ = 0;
  if ((($158|0) != 0) & ((threwValue|0) != 0)) { $159 = _testSetjmp(HEAP32[$158>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($159|0) == 0) { _longjmp($158|0, threwValue|0); } tempRet0 = threwValue; } else { $159 = -1; };
  $160 = tempRet0;
  $cond11 = ($159|0)==(1);
  if ($cond11) {
   $$reg2mem162$0 = $160;$directory$0 = $directory$1;
   continue;
  }
  __THREW__ = 0;
  invoke_v(37);
  $161 = __THREW__; __THREW__ = 0;
  if ((($161|0) != 0) & ((threwValue|0) != 0)) { $162 = _testSetjmp(HEAP32[$161>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($162|0) == 0) { _longjmp($161|0, threwValue|0); } tempRet0 = threwValue; } else { $162 = -1; };
  $163 = tempRet0;
  $cond12 = ($162|0)==(1);
  if ($cond12) {
   $$reg2mem162$0 = $163;$directory$0 = $directory$1;
   continue;
  }
  $164 = ((5104 + 24|0));
  $165 = $164;
  $166 = HEAP32[$165>>2]|0;
  $167 = (($164) + 4)|0;
  $168 = $167;
  $169 = HEAP32[$168>>2]|0;
  __THREW__ = 0;
  $170 = $vararg_buffer186;
  $171 = $170;
  HEAP32[$171>>2] = $166;
  $172 = (($170) + 4)|0;
  $173 = $172;
  HEAP32[$173>>2] = $169;
  (invoke_iii(36,(3888|0),($vararg_buffer186|0))|0);
  $174 = __THREW__; __THREW__ = 0;
  if ((($174|0) != 0) & ((threwValue|0) != 0)) { $175 = _testSetjmp(HEAP32[$174>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($175|0) == 0) { _longjmp($174|0, threwValue|0); } tempRet0 = threwValue; } else { $175 = -1; };
  $176 = tempRet0;
  $cond13 = ($175|0)==(1);
  if ($cond13) {
   $$reg2mem162$0 = $176;$directory$0 = $directory$1;
   continue;
  }
  $177 = HEAP32[((5104 + 36|0))>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer189>>2] = $177;
  (invoke_iii(36,(3912|0),($vararg_buffer189|0))|0);
  $178 = __THREW__; __THREW__ = 0;
  if ((($178|0) != 0) & ((threwValue|0) != 0)) { $179 = _testSetjmp(HEAP32[$178>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($179|0) == 0) { _longjmp($178|0, threwValue|0); } tempRet0 = threwValue; } else { $179 = -1; };
  $180 = tempRet0;
  $cond14 = ($179|0)==(1);
  if ($cond14) {
   $$reg2mem162$0 = $180;$directory$0 = $directory$1;
   continue;
  }
  $181 = HEAP32[((4880 + 40|0))>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer192>>2] = $181;
  (invoke_iii(36,(3936|0),($vararg_buffer192|0))|0);
  $182 = __THREW__; __THREW__ = 0;
  if ((($182|0) != 0) & ((threwValue|0) != 0)) { $183 = _testSetjmp(HEAP32[$182>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($183|0) == 0) { _longjmp($182|0, threwValue|0); } tempRet0 = threwValue; } else { $183 = -1; };
  $184 = tempRet0;
  $cond15 = ($183|0)==(1);
  if ($cond15) {
   $$reg2mem162$0 = $184;$directory$0 = $directory$1;
   continue;
  }
  $185 = HEAP32[((4880 + 8|0))>>2]|0;
  $186 = 4880;
  $187 = $186;
  $188 = HEAP32[$187>>2]|0;
  $189 = (($186) + 4)|0;
  $190 = $189;
  $191 = HEAP32[$190>>2]|0;
  __THREW__ = 0;
  $192 = (invoke_iiii(38,($185|0),($188|0),($191|0))|0);
  $193 = __THREW__; __THREW__ = 0;
  if ((($193|0) != 0) & ((threwValue|0) != 0)) { $194 = _testSetjmp(HEAP32[$193>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($194|0) == 0) { _longjmp($193|0, threwValue|0); } tempRet0 = threwValue; } else { $194 = -1; };
  $195 = tempRet0;
  $cond16 = ($194|0)==(1);
  if ($cond16) {
   $$reg2mem162$0 = $195;$directory$0 = $directory$1;
   continue;
  }
  HEAP32[5096>>2] = $192;
  __THREW__ = 0;
  invoke_v(39);
  $196 = __THREW__; __THREW__ = 0;
  if ((($196|0) != 0) & ((threwValue|0) != 0)) { $197 = _testSetjmp(HEAP32[$196>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($197|0) == 0) { _longjmp($196|0, threwValue|0); } tempRet0 = threwValue; } else { $197 = -1; };
  $198 = tempRet0;
  $cond17 = ($197|0)==(1);
  if ($cond17) {
   $$reg2mem162$0 = $198;$directory$0 = $directory$1;
   continue;
  }
  __THREW__ = 0;
  invoke_v(40);
  $199 = __THREW__; __THREW__ = 0;
  if ((($199|0) != 0) & ((threwValue|0) != 0)) { $200 = _testSetjmp(HEAP32[$199>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($200|0) == 0) { _longjmp($199|0, threwValue|0); } tempRet0 = threwValue; } else { $200 = -1; };
  $201 = tempRet0;
  $cond18 = ($200|0)==(1);
  if ($cond18) {
   $$reg2mem162$0 = $201;$directory$0 = $directory$1;
   continue;
  }
  __THREW__ = 0;
  $202 = (invoke_iii(41,0,10)|0);
  $203 = __THREW__; __THREW__ = 0;
  if ((($203|0) != 0) & ((threwValue|0) != 0)) { $204 = _testSetjmp(HEAP32[$203>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($204|0) == 0) { _longjmp($203|0, threwValue|0); } tempRet0 = threwValue; } else { $204 = -1; };
  $205 = tempRet0;
  $cond19 = ($204|0)==(1);
  if ($cond19) {
   $$reg2mem162$0 = $205;$directory$0 = $directory$1;
   continue;
  }
  $206 = ($202|0)==(-1);
  if ($206) {
   $207 = HEAP32[_stderr>>2]|0;
   __THREW__ = 0;
   HEAP32[$vararg_buffer195>>2] = 4024;
   (invoke_iiii(29,($207|0),(3976|0),($vararg_buffer195|0))|0);
   $208 = __THREW__; __THREW__ = 0;
   if ((($208|0) != 0) & ((threwValue|0) != 0)) { $209 = _testSetjmp(HEAP32[$208>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($209|0) == 0) { _longjmp($208|0, threwValue|0); } tempRet0 = threwValue; } else { $209 = -1; };
   $210 = tempRet0;
   $cond39 = ($209|0)==(1);
   if ($cond39) {
    $$reg2mem162$0 = $210;$directory$0 = $directory$1;
    continue;
   }
   $211 = HEAP32[4872>>2]|0;
   $212 = ($211|0)!=(0);
   if (!($212)) {
    __THREW__ = 0;
    invoke_vii(42,(4936|0),1);
    $213 = __THREW__; __THREW__ = 0;
    if ((($213|0) != 0) & ((threwValue|0) != 0)) { $214 = _testSetjmp(HEAP32[$213>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($214|0) == 0) { _longjmp($213|0, threwValue|0); } tempRet0 = threwValue; } else { $214 = -1; };
    $215 = tempRet0;
    $cond40 = ($214|0)==(1);
    if ($cond40) {
     $$reg2mem162$0 = $215;$directory$0 = $directory$1;
     continue;
    } else {
     label = 61;
     break;
    }
   }
  }
  $216 = HEAP16[((4880 + 34|0))>>1]|0;
  $217 = $216&65535;
  $218 = $217 & 4;
  $219 = ($218|0)!=(0);
  if ($219) {
   __THREW__ = 0;
   invoke_v(43);
   $220 = __THREW__; __THREW__ = 0;
   if ((($220|0) != 0) & ((threwValue|0) != 0)) { $221 = _testSetjmp(HEAP32[$220>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($221|0) == 0) { _longjmp($220|0, threwValue|0); } tempRet0 = threwValue; } else { $221 = -1; };
   $222 = tempRet0;
   $cond38 = ($221|0)==(1);
   if ($cond38) {
    $$reg2mem162$0 = $222;$directory$0 = $directory$1;
    continue;
   }
  }
  $223 = HEAP16[((4880 + 34|0))>>1]|0;
  $224 = $223&65535;
  $225 = $224 & 16;
  $226 = ($225|0)!=(0);
  if ($226) {
   __THREW__ = 0;
   invoke_v(44);
   $227 = __THREW__; __THREW__ = 0;
   if ((($227|0) != 0) & ((threwValue|0) != 0)) { $228 = _testSetjmp(HEAP32[$227>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($228|0) == 0) { _longjmp($227|0, threwValue|0); } tempRet0 = threwValue; } else { $228 = -1; };
   $229 = tempRet0;
   $cond37 = ($228|0)==(1);
   if ($cond37) {
    $$reg2mem162$0 = $229;$directory$0 = $directory$1;
    continue;
   }
  }
  $230 = ($directory$1|0)!=(0|0);
  if ($230) {
   __THREW__ = 0;
   $231 = (invoke_iiiiiiii(45,($directory$1|0),($mountpoint$0|0),0,($fs_config_func|0),($sehnd|0),($verbose|0),($fixed_time|0))|0);
   $232 = __THREW__; __THREW__ = 0;
   if ((($232|0) != 0) & ((threwValue|0) != 0)) { $233 = _testSetjmp(HEAP32[$232>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($233|0) == 0) { _longjmp($232|0, threwValue|0); } tempRet0 = threwValue; } else { $233 = -1; };
   $234 = tempRet0;
   $cond36 = ($233|0)==(1);
   if ($cond36) {
    $$reg2mem162$0 = $234;$directory$0 = $directory$1;
    continue;
   }
   $root_inode_num$0 = $231;
  } else {
   __THREW__ = 0;
   $235 = (invoke_iii(46,($mountpoint$0|0),($sehnd|0))|0);
   $236 = __THREW__; __THREW__ = 0;
   if ((($236|0) != 0) & ((threwValue|0) != 0)) { $237 = _testSetjmp(HEAP32[$236>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($237|0) == 0) { _longjmp($236|0, threwValue|0); } tempRet0 = threwValue; } else { $237 = -1; };
   $238 = tempRet0;
   $cond20 = ($237|0)==(1);
   if ($cond20) {
    $$reg2mem162$0 = $238;$directory$0 = $directory$1;
    continue;
   }
   $root_inode_num$0 = $235;
  }
  __THREW__ = 0;
  (invoke_iiiiii(47,($root_inode_num$0|0),493,0,0,0)|0);
  $239 = __THREW__; __THREW__ = 0;
  if ((($239|0) != 0) & ((threwValue|0) != 0)) { $240 = _testSetjmp(HEAP32[$239>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($240|0) == 0) { _longjmp($239|0, threwValue|0); } tempRet0 = threwValue; } else { $240 = -1; };
  $241 = tempRet0;
  $cond21 = ($240|0)==(1);
  if ($cond21) {
   $$reg2mem162$0 = $241;$directory$0 = $directory$1;
   continue;
  }
  __THREW__ = 0;
  invoke_v(48);
  $242 = __THREW__; __THREW__ = 0;
  if ((($242|0) != 0) & ((threwValue|0) != 0)) { $243 = _testSetjmp(HEAP32[$242>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($243|0) == 0) { _longjmp($242|0, threwValue|0); } tempRet0 = threwValue; } else { $243 = -1; };
  $244 = tempRet0;
  $cond22 = ($243|0)==(1);
  if ($cond22) {
   $$reg2mem162$0 = $244;$directory$0 = $directory$1;
   continue;
  }
  __THREW__ = 0;
  invoke_v(49);
  $245 = __THREW__; __THREW__ = 0;
  if ((($245|0) != 0) & ((threwValue|0) != 0)) { $246 = _testSetjmp(HEAP32[$245>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($246|0) == 0) { _longjmp($245|0, threwValue|0); } tempRet0 = threwValue; } else { $246 = -1; };
  $247 = tempRet0;
  $cond23 = ($246|0)==(1);
  if ($cond23) {
   $$reg2mem162$0 = $247;$directory$0 = $directory$1;
   continue;
  }
  $248 = ($block_list_file|0)!=(0|0);
  if ($248) {
   $249 = ($directory$1|0)!=(0|0);
   if ($249) {
    __THREW__ = 0;
    $250 = (invoke_ii(50,($directory$1|0))|0);
    $251 = __THREW__; __THREW__ = 0;
    if ((($251|0) != 0) & ((threwValue|0) != 0)) { $252 = _testSetjmp(HEAP32[$251>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($252|0) == 0) { _longjmp($251|0, threwValue|0); } tempRet0 = threwValue; } else { $252 = -1; };
    $253 = tempRet0;
    $cond35 = ($252|0)==(1);
    if ($cond35) {
     $$reg2mem162$0 = $253;$directory$0 = $directory$1;
     continue;
    }
    $$reg2mem160$0 = $250;
   } else {
    $$reg2mem160$0 = 0;
   }
   __THREW__ = 0;
   $254 = (invoke_i(51)|0);
   $255 = __THREW__; __THREW__ = 0;
   if ((($255|0) != 0) & ((threwValue|0) != 0)) { $256 = _testSetjmp(HEAP32[$255>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($256|0) == 0) { _longjmp($255|0, threwValue|0); } tempRet0 = threwValue; } else { $256 = -1; };
   $257 = tempRet0;
   $cond29 = ($256|0)==(1);
   if ($cond29) {
    $$reg2mem162$0 = $257;$directory$0 = $directory$1;
    continue;
   }
   $p$0 = $254;
   while(1) {
    $258 = ($p$0|0)!=(0|0);
    if (!($258)) {
     break;
    }
    $259 = ($directory$1|0)!=(0|0);
    do {
     if ($259) {
      $260 = (($p$0) + 32|0);
      $261 = HEAP32[$260>>2]|0;
      __THREW__ = 0;
      $262 = (invoke_iiii(52,($261|0),($directory$1|0),($$reg2mem160$0|0))|0);
      $263 = __THREW__; __THREW__ = 0;
      if ((($263|0) != 0) & ((threwValue|0) != 0)) { $264 = _testSetjmp(HEAP32[$263>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($264|0) == 0) { _longjmp($263|0, threwValue|0); } tempRet0 = threwValue; } else { $264 = -1; };
      $265 = tempRet0;
      $cond33 = ($264|0)==(1);
      if ($cond33) {
       $$reg2mem162$0 = $265;$directory$0 = $directory$1;
       continue L3;
      }
      $266 = ($262|0)==(0);
      if (!($266)) {
       label = 91;
       break;
      }
      $267 = (($p$0) + 32|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = (($268) + ($$reg2mem160$0)|0);
      __THREW__ = 0;
      HEAP32[$vararg_buffer198>>2] = $mountpoint$0;
      $vararg_ptr201 = (($vararg_buffer198) + 4|0);
      HEAP32[$vararg_ptr201>>2] = $269;
      (invoke_iiii(29,($block_list_file|0),(4048|0),($vararg_buffer198|0))|0);
      $270 = __THREW__; __THREW__ = 0;
      if ((($270|0) != 0) & ((threwValue|0) != 0)) { $271 = _testSetjmp(HEAP32[$270>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($271|0) == 0) { _longjmp($270|0, threwValue|0); } tempRet0 = threwValue; } else { $271 = -1; };
      $272 = tempRet0;
      $cond34 = ($271|0)==(1);
      if ($cond34) {
       $$reg2mem162$0 = $272;$directory$0 = $directory$1;
       continue L3;
      }
     } else {
      label = 91;
     }
    } while(0);
    if ((label|0) == 91) {
     label = 0;
     $273 = (($p$0) + 32|0);
     $274 = HEAP32[$273>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer202>>2] = $274;
     (invoke_iiii(29,($block_list_file|0),(19440|0),($vararg_buffer202|0))|0);
     $275 = __THREW__; __THREW__ = 0;
     if ((($275|0) != 0) & ((threwValue|0) != 0)) { $276 = _testSetjmp(HEAP32[$275>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($276|0) == 0) { _longjmp($275|0, threwValue|0); } tempRet0 = threwValue; } else { $276 = -1; };
     $277 = tempRet0;
     $cond30 = ($276|0)==(1);
     if ($cond30) {
      $$reg2mem162$0 = $277;$directory$0 = $directory$1;
      continue L3;
     }
    }
    __THREW__ = 0;
    invoke_vii(53,($block_list_file|0),($p$0|0));
    $278 = __THREW__; __THREW__ = 0;
    if ((($278|0) != 0) & ((threwValue|0) != 0)) { $279 = _testSetjmp(HEAP32[$278>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($279|0) == 0) { _longjmp($278|0, threwValue|0); } tempRet0 = threwValue; } else { $279 = -1; };
    $280 = tempRet0;
    $cond31 = ($279|0)==(1);
    if ($cond31) {
     $$reg2mem162$0 = $280;$directory$0 = $directory$1;
     continue L3;
    }
    $281 = (($p$0) + 36|0);
    $282 = HEAP32[$281>>2]|0;
    __THREW__ = 0;
    invoke_vi(54,($p$0|0));
    $283 = __THREW__; __THREW__ = 0;
    if ((($283|0) != 0) & ((threwValue|0) != 0)) { $284 = _testSetjmp(HEAP32[$283>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($284|0) == 0) { _longjmp($283|0, threwValue|0); } tempRet0 = threwValue; } else { $284 = -1; };
    $285 = tempRet0;
    $cond32 = ($284|0)==(1);
    if ($cond32) {
     $$reg2mem162$0 = $285;$directory$0 = $directory$1;
     continue L3;
    }
    $p$0 = $282;
   }
  }
  $286 = HEAP32[5104>>2]|0;
  $287 = HEAP32[$286>>2]|0;
  $288 = HEAP32[5104>>2]|0;
  $289 = (($288) + 16|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = (($287) - ($290))|0;
  $292 = HEAP32[5104>>2]|0;
  $293 = HEAP32[$292>>2]|0;
  $294 = HEAP32[5104>>2]|0;
  $295 = (($294) + 4|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = HEAP32[5104>>2]|0;
  $298 = (($297) + 12|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = (($296) - ($299))|0;
  $301 = HEAP32[5104>>2]|0;
  $302 = (($301) + 4|0);
  $303 = HEAP32[$302>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer205>>2] = $291;
  $vararg_ptr208 = (($vararg_buffer205) + 4|0);
  HEAP32[$vararg_ptr208>>2] = $293;
  $vararg_ptr209 = (($vararg_buffer205) + 8|0);
  HEAP32[$vararg_ptr209>>2] = $300;
  $vararg_ptr210 = (($vararg_buffer205) + 12|0);
  HEAP32[$vararg_ptr210>>2] = $303;
  (invoke_iii(36,(4056|0),($vararg_buffer205|0))|0);
  $304 = __THREW__; __THREW__ = 0;
  if ((($304|0) != 0) & ((threwValue|0) != 0)) { $305 = _testSetjmp(HEAP32[$304>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($305|0) == 0) { _longjmp($304|0, threwValue|0); } tempRet0 = threwValue; } else { $305 = -1; };
  $306 = tempRet0;
  $cond24 = ($305|0)==(1);
  if ($cond24) {
   $$reg2mem162$0 = $306;$directory$0 = $directory$1;
   continue;
  }
  $307 = ($wipe|0)!=(0);
  if ($307) {
  }
  __THREW__ = 0;
  invoke_viiii(55,($fd|0),($gzip|0),($sparse|0),($crc|0));
  $308 = __THREW__; __THREW__ = 0;
  if ((($308|0) != 0) & ((threwValue|0) != 0)) { $309 = _testSetjmp(HEAP32[$308>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($309|0) == 0) { _longjmp($308|0, threwValue|0); } tempRet0 = threwValue; } else { $309 = -1; };
  $310 = tempRet0;
  $cond25 = ($309|0)==(1);
  if ($cond25) {
   $$reg2mem162$0 = $310;$directory$0 = $directory$1;
   continue;
  }
  $311 = HEAP32[5096>>2]|0;
  __THREW__ = 0;
  invoke_vi(56,($311|0));
  $312 = __THREW__; __THREW__ = 0;
  if ((($312|0) != 0) & ((threwValue|0) != 0)) { $313 = _testSetjmp(HEAP32[$312>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($313|0) == 0) { _longjmp($312|0, threwValue|0); } tempRet0 = threwValue; } else { $313 = -1; };
  $314 = tempRet0;
  $cond26 = ($313|0)==(1);
  if ($cond26) {
   $$reg2mem162$0 = $314;$directory$0 = $directory$1;
   continue;
  }
  HEAP32[5096>>2] = 0;
  __THREW__ = 0;
  invoke_vi(57,($mountpoint$0|0));
  $315 = __THREW__; __THREW__ = 0;
  if ((($315|0) != 0) & ((threwValue|0) != 0)) { $316 = _testSetjmp(HEAP32[$315>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($316|0) == 0) { _longjmp($315|0, threwValue|0); } tempRet0 = threwValue; } else { $316 = -1; };
  $317 = tempRet0;
  $cond27 = ($316|0)==(1);
  if ($cond27) {
   $$reg2mem162$0 = $317;$directory$0 = $directory$1;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(57,($directory$1|0));
  $318 = __THREW__; __THREW__ = 0;
  if ((($318|0) != 0) & ((threwValue|0) != 0)) { $319 = _testSetjmp(HEAP32[$318>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($319|0) == 0) { _longjmp($318|0, threwValue|0); } tempRet0 = threwValue; } else { $319 = -1; };
  $320 = tempRet0;
  $cond28 = ($319|0)==(1);
  if ($cond28) {
   $$reg2mem162$0 = $320;$directory$0 = $directory$1;
  } else {
   label = 104;
   break;
  }
 }
 if ((label|0) == 4) {
  $$0 = 1;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 18) {
  $$0 = 1;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 61) {
  // unreachable;
 }
 else if ((label|0) == 104) {
  $$0 = 0;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _canonicalize_abs_slashes($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $0;
 $2 = (_canonicalize_slashes($1,1)|0);
 STACKTOP = sp;return ($2|0);
}
function _canonicalize_rel_slashes($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $0;
 $2 = (_canonicalize_slashes($1,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _compute_block_size() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4096;
}
function _compute_journal_blocks() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $journal_blocks = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = 4880;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[((4880 + 8|0))>>2]|0;
 $7 = (_i64Add(($2|0),($5|0),($6|0),0)|0);
 $8 = tempRet0;
 $9 = (_i64Subtract(($7|0),($8|0),1,0)|0);
 $10 = tempRet0;
 $11 = HEAP32[((4880 + 8|0))>>2]|0;
 $12 = (___divdi3(($9|0),($10|0),($11|0),0)|0);
 $13 = tempRet0;
 $14 = (___divdi3(($12|0),($13|0),64,0)|0);
 $15 = tempRet0;
 $journal_blocks = $14;
 $16 = $journal_blocks;
 $17 = ($16>>>0)<(1024);
 if ($17) {
  $journal_blocks = 1024;
 }
 $18 = $journal_blocks;
 $19 = ($18>>>0)>(32768);
 if (!($19)) {
  $20 = $journal_blocks;
  STACKTOP = sp;return ($20|0);
 }
 $journal_blocks = 32768;
 $20 = $journal_blocks;
 STACKTOP = sp;return ($20|0);
}
function _compute_blocks_per_group() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((4880 + 8|0))>>2]|0;
 $1 = $0<<3;
 return ($1|0);
}
function _compute_inodes() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 4880;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[((4880 + 8|0))>>2]|0;
 $7 = (_i64Add(($2|0),($5|0),($6|0),0)|0);
 $8 = tempRet0;
 $9 = (_i64Subtract(($7|0),($8|0),1,0)|0);
 $10 = tempRet0;
 $11 = HEAP32[((4880 + 8|0))>>2]|0;
 $12 = (___divdi3(($9|0),($10|0),($11|0),0)|0);
 $13 = tempRet0;
 $14 = (___divdi3(($12|0),($13|0),4,0)|0);
 $15 = tempRet0;
 return ($14|0);
}
function _compute_inodes_per_group() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block_groups = 0, $blocks = 0, $inodes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = 4880;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[((4880 + 8|0))>>2]|0;
 $7 = (_i64Add(($2|0),($5|0),($6|0),0)|0);
 $8 = tempRet0;
 $9 = (_i64Subtract(($7|0),($8|0),1,0)|0);
 $10 = tempRet0;
 $11 = HEAP32[((4880 + 8|0))>>2]|0;
 $12 = (___divdi3(($9|0),($10|0),($11|0),0)|0);
 $13 = tempRet0;
 $blocks = $12;
 $14 = $blocks;
 $15 = HEAP32[((4880 + 12|0))>>2]|0;
 $16 = (($14) + ($15))|0;
 $17 = (($16) - 1)|0;
 $18 = HEAP32[((4880 + 12|0))>>2]|0;
 $19 = (($17>>>0) / ($18>>>0))&-1;
 $block_groups = $19;
 $20 = HEAP32[((4880 + 24|0))>>2]|0;
 $21 = $block_groups;
 $22 = (($20) + ($21))|0;
 $23 = (($22) - 1)|0;
 $24 = $block_groups;
 $25 = (($23>>>0) / ($24>>>0))&-1;
 $inodes = $25;
 $26 = HEAP32[((4880 + 8|0))>>2]|0;
 $27 = HEAP32[((4880 + 20|0))>>2]|0;
 $28 = (($26>>>0) / ($27>>>0))&-1;
 $29 = $inodes;
 $30 = HEAP32[((4880 + 8|0))>>2]|0;
 $31 = HEAP32[((4880 + 20|0))>>2]|0;
 $32 = (($30>>>0) / ($31>>>0))&-1;
 $33 = (($29) + ($32))|0;
 $34 = (($33) - 1)|0;
 $35 = HEAP32[((4880 + 8|0))>>2]|0;
 $36 = HEAP32[((4880 + 20|0))>>2]|0;
 $37 = (($35>>>0) / ($36>>>0))&-1;
 $38 = (($34>>>0) / ($37>>>0))&-1;
 $39 = Math_imul($28, $38)|0;
 $inodes = $39;
 $40 = $inodes;
 $41 = $block_groups;
 $42 = Math_imul($40, $41)|0;
 HEAP32[((4880 + 24|0))>>2] = $42;
 $43 = $inodes;
 STACKTOP = sp;return ($43|0);
}
function _compute_bg_desc_reserve_blocks() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bg_desc_blocks = 0, $bg_desc_reserve_blocks = 0, $block_groups = 0, $blocks = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = 4880;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[((4880 + 8|0))>>2]|0;
 $7 = (_i64Add(($2|0),($5|0),($6|0),0)|0);
 $8 = tempRet0;
 $9 = (_i64Subtract(($7|0),($8|0),1,0)|0);
 $10 = tempRet0;
 $11 = HEAP32[((4880 + 8|0))>>2]|0;
 $12 = (___divdi3(($9|0),($10|0),($11|0),0)|0);
 $13 = tempRet0;
 $blocks = $12;
 $14 = $blocks;
 $15 = HEAP32[((4880 + 12|0))>>2]|0;
 $16 = (($14) + ($15))|0;
 $17 = (($16) - 1)|0;
 $18 = HEAP32[((4880 + 12|0))>>2]|0;
 $19 = (($17>>>0) / ($18>>>0))&-1;
 $block_groups = $19;
 $20 = $block_groups;
 $21 = $20<<5;
 $22 = HEAP32[((4880 + 8|0))>>2]|0;
 $23 = (($21) + ($22))|0;
 $24 = (($23) - 1)|0;
 $25 = HEAP32[((4880 + 8|0))>>2]|0;
 $26 = (($24>>>0) / ($25>>>0))&-1;
 $bg_desc_blocks = $26;
 $27 = $block_groups;
 $28 = $27<<10;
 $29 = $28<<5;
 $30 = HEAP32[((4880 + 8|0))>>2]|0;
 $31 = (($29) + ($30))|0;
 $32 = (($31) - 1)|0;
 $33 = HEAP32[((4880 + 8|0))>>2]|0;
 $34 = (($32>>>0) / ($33>>>0))&-1;
 $35 = $bg_desc_blocks;
 $36 = (($34) - ($35))|0;
 $bg_desc_reserve_blocks = $36;
 $37 = $bg_desc_reserve_blocks;
 $38 = HEAP32[((4880 + 8|0))>>2]|0;
 $39 = (($38>>>0) / 4)&-1;
 $40 = ($37>>>0)>($39>>>0);
 if (!($40)) {
  $43 = $bg_desc_reserve_blocks;
  STACKTOP = sp;return ($43|0);
 }
 $41 = HEAP32[((4880 + 8|0))>>2]|0;
 $42 = (($41>>>0) / 4)&-1;
 $bg_desc_reserve_blocks = $42;
 $43 = $bg_desc_reserve_blocks;
 STACKTOP = sp;return ($43|0);
}
function _build_directory_structure($full_path,$dir_path,$dir_inode,$fs_config_func,$sehnd,$verbose,$fixed_time) {
 $full_path = $full_path|0;
 $dir_path = $dir_path|0;
 $dir_inode = $dir_inode|0;
 $fs_config_func = $fs_config_func|0;
 $sehnd = $sehnd|0;
 $verbose = $verbose|0;
 $fixed_time = $fixed_time|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $dentries = 0, $dirs = 0, $entries = 0, $entry_inode = 0, $i = 0, $inode = 0, $namelist = 0, $needs_lost_and_found = 0, $ret = 0, $stat = 0, $subdir_dir_path = 0, $subdir_full_path = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer46 = 0, $vararg_buffer50 = 0, $vararg_buffer54 = 0, $vararg_buffer58 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr28 = 0, $vararg_ptr38 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0, $vararg_ptr5 = 0;
 var $vararg_ptr53 = 0, $vararg_ptr57 = 0, $vararg_ptr61 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer58 = sp + 128|0;
 $vararg_buffer54 = sp + 120|0;
 $vararg_buffer50 = sp + 112|0;
 $vararg_buffer46 = sp + 104|0;
 $vararg_buffer42 = sp + 96|0;
 $vararg_buffer39 = sp + 88|0;
 $vararg_buffer35 = sp + 80|0;
 $vararg_buffer32 = sp + 72|0;
 $vararg_buffer29 = sp + 64|0;
 $vararg_buffer25 = sp + 56|0;
 $vararg_buffer22 = sp + 48|0;
 $vararg_buffer18 = sp + 40|0;
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $namelist = sp + 244|0;
 $stat = sp + 168|0;
 $subdir_full_path = sp + 140|0;
 $subdir_dir_path = sp + 136|0;
 $1 = $full_path;
 $2 = $dir_path;
 $3 = $dir_inode;
 $4 = $fs_config_func;
 $5 = $sehnd;
 $6 = $verbose;
 $7 = $fixed_time;
 $entries = 0;
 HEAP32[$namelist>>2] = 0;
 $dirs = 0;
 $needs_lost_and_found = 0;
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  $11 = (_scandir($10,$namelist,58,59)|0);
  $entries = $11;
  $12 = $entries;
  $13 = ($12|0)<(0);
  do {
   if ($13) {
    $14 = $entries;
    $15 = ($14|0)<(0);
    if (!($15)) {
     break;
    }
    $16 = HEAP32[_stderr>>2]|0;
    $17 = (___errno_location()|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (_strerror(($18|0))|0);
    HEAP32[$vararg_buffer>>2] = 4152;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $19;
    (_fprintf(($16|0),(4128|0),($vararg_buffer|0))|0);
    $20 = HEAP32[4872>>2]|0;
    $21 = ($20|0)!=(0);
    if (!($21)) {
     _longjmp((4936|0),1);
     // unreachable;
    }
    $0 = -1;
    $460 = $0;
    STACKTOP = sp;return ($460|0);
   }
  } while(0);
 }
 $22 = $3;
 $23 = ($22|0)==(0);
 if ($23) {
  $i = 0;
  while(1) {
   $24 = $i;
   $25 = $entries;
   $26 = ($24|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = $i;
   $28 = HEAP32[$namelist>>2]|0;
   $29 = (($28) + ($27<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + 11|0);
   $32 = (_strcmp($31,4112)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    label = 15;
    break;
   }
   $34 = $i;
   $35 = (($34) + 1)|0;
   $i = $35;
  }
  if ((label|0) == 15) {
  }
  $36 = $i;
  $37 = $entries;
  $38 = ($36|0)==($37|0);
  if ($38) {
   $needs_lost_and_found = 1;
  }
 }
 $39 = $entries;
 $40 = (_calloc($39,48)|0);
 $dentries = $40;
 $41 = $dentries;
 $42 = ($41|0)==(0|0);
 if ($42) {
  $43 = HEAP32[_stderr>>2]|0;
  $44 = (___errno_location()|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (_strerror(($45|0))|0);
  HEAP32[$vararg_buffer2>>2] = 4152;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $46;
  (_fprintf(($43|0),(4184|0),($vararg_buffer2|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 $i = 0;
 while(1) {
  $47 = $i;
  $48 = $entries;
  $49 = ($47|0)<($48|0);
  if (!($49)) {
   label = 71;
   break;
  }
  $50 = $i;
  $51 = HEAP32[$namelist>>2]|0;
  $52 = (($51) + ($50<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 11|0);
  $55 = (___strdup($54)|0);
  $56 = $i;
  $57 = $dentries;
  $58 = (($57) + (($56*48)|0)|0);
  $59 = (($58) + 8|0);
  HEAP32[$59>>2] = $55;
  $60 = $i;
  $61 = $dentries;
  $62 = (($61) + (($60*48)|0)|0);
  $63 = (($62) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(0|0);
  if ($65) {
   label = 27;
   break;
  }
  $70 = $i;
  $71 = $dentries;
  $72 = (($71) + (($70*48)|0)|0);
  $73 = $2;
  $74 = $i;
  $75 = HEAP32[$namelist>>2]|0;
  $76 = (($75) + ($74<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + 11|0);
  HEAP32[$vararg_buffer10>>2] = $73;
  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $78;
  (_asprintf($72,4048,$vararg_buffer10)|0);
  $79 = $i;
  $80 = $dentries;
  $81 = (($80) + (($79*48)|0)|0);
  $82 = (($81) + 4|0);
  $83 = $1;
  $84 = $i;
  $85 = HEAP32[$namelist>>2]|0;
  $86 = (($85) + ($84<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + 11|0);
  HEAP32[$vararg_buffer14>>2] = $83;
  $vararg_ptr17 = (($vararg_buffer14) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $88;
  (_asprintf($82,4048,$vararg_buffer14)|0);
  $89 = $i;
  $90 = HEAP32[$namelist>>2]|0;
  $91 = (($90) + ($89<<2)|0);
  $92 = HEAP32[$91>>2]|0;
  _free($92);
  $93 = $i;
  $94 = $dentries;
  $95 = (($94) + (($93*48)|0)|0);
  $96 = (($95) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (_lstat(($97|0),($stat|0))|0);
  $ret = $98;
  $99 = $ret;
  $100 = ($99|0)<(0);
  if ($100) {
   $101 = HEAP32[_stderr>>2]|0;
   $102 = (___errno_location()|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (_strerror(($103|0))|0);
   HEAP32[$vararg_buffer18>>2] = 4152;
   $vararg_ptr21 = (($vararg_buffer18) + 4|0);
   HEAP32[$vararg_ptr21>>2] = $104;
   (_fprintf(($101|0),(4248|0),($vararg_buffer18|0))|0);
   $105 = HEAP32[4872>>2]|0;
   $106 = ($105|0)!=(0);
   if (!($106)) {
    label = 32;
    break;
   }
   $107 = $i;
   $108 = (($107) + -1)|0;
   $i = $108;
   $109 = $entries;
   $110 = (($109) + -1)|0;
   $entries = $110;
  } else {
   $111 = (($stat) + 36|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $i;
   $114 = $dentries;
   $115 = (($114) + (($113*48)|0)|0);
   $116 = (($115) + 16|0);
   HEAP32[$116>>2] = $112;
   $117 = (($stat) + 12|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $118 & 4095;
   $120 = $119&65535;
   $121 = $i;
   $122 = $dentries;
   $123 = (($122) + (($121*48)|0)|0);
   $124 = (($123) + 22|0);
   HEAP16[$124>>1] = $120;
   $125 = $7;
   $126 = ($125|0)==(-1);
   if ($126) {
    $127 = (($stat) + 56|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = $i;
    $130 = $dentries;
    $131 = (($130) + (($129*48)|0)|0);
    $132 = (($131) + 32|0);
    HEAP32[$132>>2] = $128;
   } else {
    $133 = $7;
    $134 = $i;
    $135 = $dentries;
    $136 = (($135) + (($134*48)|0)|0);
    $137 = (($136) + 32|0);
    HEAP32[$137>>2] = $133;
   }
   $138 = $4;
   $139 = ($138|0)!=(0|0);
   if ($139) {
    $140 = HEAP32[_stderr>>2]|0;
    HEAP32[$vararg_buffer22>>2] = 4152;
    (_fprintf(($140|0),(4272|0),($vararg_buffer22|0))|0);
    $141 = HEAP32[4872>>2]|0;
    $142 = ($141|0)!=(0);
    if (!($142)) {
     label = 41;
     break;
    }
   }
   $143 = (($stat) + 12|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $144 & 61440;
   $146 = ($145|0)==(32768);
   if ($146) {
    $147 = $i;
    $148 = $dentries;
    $149 = (($148) + (($147*48)|0)|0);
    $150 = (($149) + 20|0);
    HEAP8[$150>>0] = 1;
   } else {
    $151 = (($stat) + 12|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $152 & 61440;
    $154 = ($153|0)==(16384);
    if ($154) {
     $155 = $i;
     $156 = $dentries;
     $157 = (($156) + (($155*48)|0)|0);
     $158 = (($157) + 20|0);
     HEAP8[$158>>0] = 2;
     $159 = $dirs;
     $160 = (($159) + 1)|0;
     $dirs = $160;
    } else {
     $161 = (($stat) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $162 & 61440;
     $164 = ($163|0)==(8192);
     if ($164) {
      $165 = $i;
      $166 = $dentries;
      $167 = (($166) + (($165*48)|0)|0);
      $168 = (($167) + 20|0);
      HEAP8[$168>>0] = 3;
     } else {
      $169 = (($stat) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = $170 & 61440;
      $172 = ($171|0)==(24576);
      if ($172) {
       $173 = $i;
       $174 = $dentries;
       $175 = (($174) + (($173*48)|0)|0);
       $176 = (($175) + 20|0);
       HEAP8[$176>>0] = 4;
      } else {
       $177 = (($stat) + 12|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = $178 & 61440;
       $180 = ($179|0)==(4096);
       if ($180) {
        $181 = $i;
        $182 = $dentries;
        $183 = (($182) + (($181*48)|0)|0);
        $184 = (($183) + 20|0);
        HEAP8[$184>>0] = 5;
       } else {
        $185 = (($stat) + 12|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = $186 & 61440;
        $188 = ($187|0)==(49152);
        if ($188) {
         $189 = $i;
         $190 = $dentries;
         $191 = (($190) + (($189*48)|0)|0);
         $192 = (($191) + 20|0);
         HEAP8[$192>>0] = 6;
        } else {
         $193 = (($stat) + 12|0);
         $194 = HEAP32[$193>>2]|0;
         $195 = $194 & 61440;
         $196 = ($195|0)==(40960);
         if ($196) {
          $197 = $i;
          $198 = $dentries;
          $199 = (($198) + (($197*48)|0)|0);
          $200 = (($199) + 20|0);
          HEAP8[$200>>0] = 7;
          $201 = HEAP32[((4880 + 8|0))>>2]|0;
          $202 = (_calloc($201,1)|0);
          $203 = $i;
          $204 = $dentries;
          $205 = (($204) + (($203*48)|0)|0);
          $206 = (($205) + 12|0);
          HEAP32[$206>>2] = $202;
          $207 = $i;
          $208 = $dentries;
          $209 = (($208) + (($207*48)|0)|0);
          $210 = (($209) + 4|0);
          $211 = HEAP32[$210>>2]|0;
          $212 = $i;
          $213 = $dentries;
          $214 = (($213) + (($212*48)|0)|0);
          $215 = (($214) + 12|0);
          $216 = HEAP32[$215>>2]|0;
          $217 = HEAP32[((4880 + 8|0))>>2]|0;
          $218 = (($217) - 1)|0;
          (_readlink(($211|0),($216|0),($218|0))|0);
         } else {
          $219 = HEAP32[_stderr>>2]|0;
          $220 = $i;
          $221 = $dentries;
          $222 = (($221) + (($220*48)|0)|0);
          $223 = HEAP32[$222>>2]|0;
          HEAP32[$vararg_buffer25>>2] = 4152;
          $vararg_ptr28 = (($vararg_buffer25) + 4|0);
          HEAP32[$vararg_ptr28>>2] = $223;
          (_fprintf(($219|0),(4352|0),($vararg_buffer25|0))|0);
          $224 = HEAP32[4872>>2]|0;
          $225 = ($224|0)!=(0);
          if (!($225)) {
           label = 60;
           break;
          }
          $226 = $i;
          $227 = (($226) + -1)|0;
          $i = $227;
          $228 = $entries;
          $229 = (($228) + -1)|0;
          $entries = $229;
         }
        }
       }
      }
     }
    }
   }
  }
  $230 = $i;
  $231 = (($230) + 1)|0;
  $i = $231;
 }
 if ((label|0) == 27) {
  $66 = HEAP32[_stderr>>2]|0;
  $67 = (___errno_location()|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (_strerror(($68|0))|0);
  HEAP32[$vararg_buffer6>>2] = 4152;
  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $69;
  (_fprintf(($66|0),(4216|0),($vararg_buffer6|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 else if ((label|0) == 32) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 else if ((label|0) == 41) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 else if ((label|0) == 60) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 else if ((label|0) == 71) {
  $232 = HEAP32[$namelist>>2]|0;
  _free($232);
  $233 = $needs_lost_and_found;
  $234 = $233&1;
  if ($234) {
   $235 = $entries;
   $236 = (($235) + 1)|0;
   $237 = (_calloc($236,48)|0);
   $tmp = $237;
   $238 = $tmp;
   dest=$238+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $239 = $tmp;
   $240 = (($239) + 48|0);
   $241 = $dentries;
   $242 = $entries;
   $243 = ($242*48)|0;
   _memcpy(($240|0),($241|0),($243|0))|0;
   $244 = $tmp;
   $dentries = $244;
   $245 = (___strdup(4112)|0);
   $246 = $dentries;
   $247 = (($246) + 8|0);
   HEAP32[$247>>2] = $245;
   $248 = $dentries;
   $249 = $2;
   HEAP32[$vararg_buffer29>>2] = $249;
   (_asprintf($248,4392,$vararg_buffer29)|0);
   $250 = $dentries;
   $251 = (($250) + 4|0);
   HEAP32[$251>>2] = 0;
   $252 = $dentries;
   $253 = (($252) + 16|0);
   HEAP32[$253>>2] = 0;
   $254 = $dentries;
   $255 = (($254) + 22|0);
   HEAP16[$255>>1] = 448;
   $256 = $dentries;
   $257 = (($256) + 20|0);
   HEAP8[$257>>0] = 2;
   $258 = $dentries;
   $259 = (($258) + 24|0);
   HEAP16[$259>>1] = 0;
   $260 = $dentries;
   $261 = (($260) + 26|0);
   HEAP16[$261>>1] = 0;
   $262 = $entries;
   $263 = (($262) + 1)|0;
   $entries = $263;
   $264 = $dirs;
   $265 = (($264) + 1)|0;
   $dirs = $265;
  }
  $266 = $3;
  $267 = $entries;
  $268 = $dentries;
  $269 = $dirs;
  $270 = (_make_directory($266,$267,$268,$269)|0);
  $inode = $270;
  $i = 0;
  while(1) {
   $271 = $i;
   $272 = $entries;
   $273 = ($271|0)<($272|0);
   if (!($273)) {
    label = 116;
    break;
   }
   $274 = $i;
   $275 = $dentries;
   $276 = (($275) + (($274*48)|0)|0);
   $277 = (($276) + 20|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = $278&255;
   $280 = ($279|0)==(1);
   if ($280) {
    $281 = $i;
    $282 = $dentries;
    $283 = (($282) + (($281*48)|0)|0);
    $284 = (($283) + 4|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = $i;
    $287 = $dentries;
    $288 = (($287) + (($286*48)|0)|0);
    $289 = (($288) + 16|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = (_make_file($285,$290,0)|0);
    $entry_inode = $291;
   } else {
    $292 = $i;
    $293 = $dentries;
    $294 = (($293) + (($292*48)|0)|0);
    $295 = (($294) + 20|0);
    $296 = HEAP8[$295>>0]|0;
    $297 = $296&255;
    $298 = ($297|0)==(2);
    if ($298) {
     HEAP32[$subdir_full_path>>2] = 0;
     $299 = $i;
     $300 = $dentries;
     $301 = (($300) + (($299*48)|0)|0);
     $302 = (($301) + 4|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = ($303|0)!=(0|0);
     if ($304) {
      $305 = $i;
      $306 = $dentries;
      $307 = (($306) + (($305*48)|0)|0);
      $308 = (($307) + 4|0);
      $309 = HEAP32[$308>>2]|0;
      HEAP32[$vararg_buffer32>>2] = $309;
      $310 = (_asprintf($subdir_full_path,4408,$vararg_buffer32)|0);
      $ret = $310;
      $311 = $ret;
      $312 = ($311|0)<(0);
      if ($312) {
       label = 80;
       break;
      }
     }
     $317 = $i;
     $318 = $dentries;
     $319 = (($318) + (($317*48)|0)|0);
     $320 = HEAP32[$319>>2]|0;
     HEAP32[$vararg_buffer39>>2] = $320;
     $321 = (_asprintf($subdir_dir_path,4408,$vararg_buffer39)|0);
     $ret = $321;
     $322 = $ret;
     $323 = ($322|0)<(0);
     if ($323) {
      label = 84;
      break;
     }
     $328 = HEAP32[$subdir_full_path>>2]|0;
     $329 = HEAP32[$subdir_dir_path>>2]|0;
     $330 = $inode;
     $331 = $4;
     $332 = $5;
     $333 = $6;
     $334 = $7;
     $335 = (_build_directory_structure($328,$329,$330,$331,$332,$333,$334)|0);
     $entry_inode = $335;
     $336 = HEAP32[$subdir_full_path>>2]|0;
     _free($336);
     $337 = HEAP32[$subdir_dir_path>>2]|0;
     _free($337);
    } else {
     $338 = $i;
     $339 = $dentries;
     $340 = (($339) + (($338*48)|0)|0);
     $341 = (($340) + 20|0);
     $342 = HEAP8[$341>>0]|0;
     $343 = $342&255;
     $344 = ($343|0)==(7);
     if ($344) {
      $345 = $i;
      $346 = $dentries;
      $347 = (($346) + (($345*48)|0)|0);
      $348 = (($347) + 12|0);
      $349 = HEAP32[$348>>2]|0;
      $350 = (_make_link($349)|0);
      $entry_inode = $350;
     } else {
      $351 = HEAP32[_stderr>>2]|0;
      $352 = $i;
      $353 = $dentries;
      $354 = (($353) + (($352*48)|0)|0);
      $355 = HEAP32[$354>>2]|0;
      HEAP32[$vararg_buffer46>>2] = 4152;
      $vararg_ptr49 = (($vararg_buffer46) + 4|0);
      HEAP32[$vararg_ptr49>>2] = $355;
      (_fprintf(($351|0),(4352|0),($vararg_buffer46|0))|0);
      $356 = HEAP32[4872>>2]|0;
      $357 = ($356|0)!=(0);
      if (!($357)) {
       label = 91;
       break;
      }
      $entry_inode = 0;
     }
    }
   }
   $358 = $entry_inode;
   $359 = $i;
   $360 = $dentries;
   $361 = (($360) + (($359*48)|0)|0);
   $362 = (($361) + 28|0);
   $363 = HEAP32[$362>>2]|0;
   HEAP32[$363>>2] = $358;
   $364 = $entry_inode;
   $365 = $i;
   $366 = $dentries;
   $367 = (($366) + (($365*48)|0)|0);
   $368 = (($367) + 22|0);
   $369 = HEAP16[$368>>1]|0;
   $370 = $i;
   $371 = $dentries;
   $372 = (($371) + (($370*48)|0)|0);
   $373 = (($372) + 24|0);
   $374 = HEAP16[$373>>1]|0;
   $375 = $i;
   $376 = $dentries;
   $377 = (($376) + (($375*48)|0)|0);
   $378 = (($377) + 26|0);
   $379 = HEAP16[$378>>1]|0;
   $380 = $i;
   $381 = $dentries;
   $382 = (($381) + (($380*48)|0)|0);
   $383 = (($382) + 32|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = (_inode_set_permissions($364,$369,$374,$379,$384)|0);
   $ret = $385;
   $386 = $ret;
   $387 = ($386|0)!=(0);
   if ($387) {
    $388 = HEAP32[_stderr>>2]|0;
    $389 = $i;
    $390 = $dentries;
    $391 = (($390) + (($389*48)|0)|0);
    $392 = HEAP32[$391>>2]|0;
    HEAP32[$vararg_buffer50>>2] = 4152;
    $vararg_ptr53 = (($vararg_buffer50) + 4|0);
    HEAP32[$vararg_ptr53>>2] = $392;
    (_fprintf(($388|0),(4456|0),($vararg_buffer50|0))|0);
    $393 = HEAP32[4872>>2]|0;
    $394 = ($393|0)!=(0);
    if (!($394)) {
     label = 99;
     break;
    }
   }
   $395 = $entry_inode;
   $396 = $i;
   $397 = $dentries;
   $398 = (($397) + (($396*48)|0)|0);
   $399 = (($398) + 36|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = (_inode_set_selinux($395,$400)|0);
   $ret = $401;
   $402 = $ret;
   $403 = ($402|0)!=(0);
   if ($403) {
    $404 = HEAP32[_stderr>>2]|0;
    $405 = $i;
    $406 = $dentries;
    $407 = (($406) + (($405*48)|0)|0);
    $408 = HEAP32[$407>>2]|0;
    HEAP32[$vararg_buffer54>>2] = 4152;
    $vararg_ptr57 = (($vararg_buffer54) + 4|0);
    HEAP32[$vararg_ptr57>>2] = $408;
    (_fprintf(($404|0),(4504|0),($vararg_buffer54|0))|0);
    $409 = HEAP32[4872>>2]|0;
    $410 = ($409|0)!=(0);
    if (!($410)) {
     label = 105;
     break;
    }
   }
   $411 = $entry_inode;
   $412 = $i;
   $413 = $dentries;
   $414 = (($413) + (($412*48)|0)|0);
   $415 = (($414) + 40|0);
   $416 = $415;
   $417 = $416;
   $418 = HEAP32[$417>>2]|0;
   $419 = (($416) + 4)|0;
   $420 = $419;
   $421 = HEAP32[$420>>2]|0;
   $422 = (_inode_set_capabilities($411,$418,$421)|0);
   $ret = $422;
   $423 = $ret;
   $424 = ($423|0)!=(0);
   if ($424) {
    $425 = HEAP32[_stderr>>2]|0;
    $426 = $i;
    $427 = $dentries;
    $428 = (($427) + (($426*48)|0)|0);
    $429 = HEAP32[$428>>2]|0;
    HEAP32[$vararg_buffer58>>2] = 4152;
    $vararg_ptr61 = (($vararg_buffer58) + 4|0);
    HEAP32[$vararg_ptr61>>2] = $429;
    (_fprintf(($425|0),(4560|0),($vararg_buffer58|0))|0);
    $430 = HEAP32[4872>>2]|0;
    $431 = ($430|0)!=(0);
    if (!($431)) {
     label = 111;
     break;
    }
   }
   $432 = $i;
   $433 = $dentries;
   $434 = (($433) + (($432*48)|0)|0);
   $435 = HEAP32[$434>>2]|0;
   _free($435);
   $436 = $i;
   $437 = $dentries;
   $438 = (($437) + (($436*48)|0)|0);
   $439 = (($438) + 4|0);
   $440 = HEAP32[$439>>2]|0;
   _free($440);
   $441 = $i;
   $442 = $dentries;
   $443 = (($442) + (($441*48)|0)|0);
   $444 = (($443) + 12|0);
   $445 = HEAP32[$444>>2]|0;
   _free($445);
   $446 = $i;
   $447 = $dentries;
   $448 = (($447) + (($446*48)|0)|0);
   $449 = (($448) + 8|0);
   $450 = HEAP32[$449>>2]|0;
   _free($450);
   $451 = $i;
   $452 = $dentries;
   $453 = (($452) + (($451*48)|0)|0);
   $454 = (($453) + 36|0);
   $455 = HEAP32[$454>>2]|0;
   _free($455);
   $456 = $i;
   $457 = (($456) + 1)|0;
   $i = $457;
  }
  if ((label|0) == 80) {
   $313 = HEAP32[_stderr>>2]|0;
   $314 = (___errno_location()|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = (_strerror(($315|0))|0);
   HEAP32[$vararg_buffer35>>2] = 4152;
   $vararg_ptr38 = (($vararg_buffer35) + 4|0);
   HEAP32[$vararg_ptr38>>2] = $316;
   (_fprintf(($313|0),(4416|0),($vararg_buffer35|0))|0);
   _longjmp((4936|0),1);
   // unreachable;
  }
  else if ((label|0) == 84) {
   $324 = HEAP32[_stderr>>2]|0;
   $325 = (___errno_location()|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = (_strerror(($326|0))|0);
   HEAP32[$vararg_buffer42>>2] = 4152;
   $vararg_ptr45 = (($vararg_buffer42) + 4|0);
   HEAP32[$vararg_ptr45>>2] = $327;
   (_fprintf(($324|0),(4416|0),($vararg_buffer42|0))|0);
   _longjmp((4936|0),1);
   // unreachable;
  }
  else if ((label|0) == 91) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  else if ((label|0) == 99) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  else if ((label|0) == 105) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  else if ((label|0) == 111) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  else if ((label|0) == 116) {
   $458 = $dentries;
   _free($458);
   $459 = $inode;
   $0 = $459;
   $460 = $0;
   STACKTOP = sp;return ($460|0);
  }
 }
 return (0)|0;
}
function _build_default_directory_structure($dir_path,$sehnd) {
 $dir_path = $dir_path|0;
 $sehnd = $sehnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dentries = 0, $inode = 0, $root_inode = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dentries = sp;
 $0 = $dir_path;
 $1 = $sehnd;
 dest=$dentries+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = (($dentries) + 8|0);
 HEAP32[$2>>2] = 4112;
 $3 = (($dentries) + 20|0);
 HEAP8[$3>>0] = 2;
 $4 = (($dentries) + 22|0);
 HEAP16[$4>>1] = 448;
 $5 = (_make_directory(0,1,$dentries,1)|0);
 $root_inode = $5;
 $6 = $root_inode;
 $7 = (_make_directory($6,0,0,0)|0);
 $inode = $7;
 $8 = $inode;
 $9 = (($dentries) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$10>>2] = $8;
 $11 = $inode;
 $12 = (($dentries) + 22|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = (($dentries) + 24|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = (($dentries) + 26|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = (($dentries) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 (_inode_set_permissions($11,$13,$15,$17,$19)|0);
 $20 = $root_inode;
 STACKTOP = sp;return ($20|0);
}
function _canonicalize_slashes($str,$absolute) {
 $str = $str|0;
 $absolute = $absolute|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $newlen = 0, $ptr = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $str;
 $3 = $absolute&1;
 $2 = $3;
 $4 = $1;
 $5 = (_strlen(($4|0))|0);
 $len = $5;
 $6 = $len;
 $newlen = $6;
 $7 = $len;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $2;
  $10 = $9&1;
  if ($10) {
   $11 = (___strdup(4608)|0);
   $0 = $11;
   $67 = $0;
   STACKTOP = sp;return ($67|0);
  } else {
   $12 = (___strdup(22304)|0);
   $0 = $12;
   $67 = $0;
   STACKTOP = sp;return ($67|0);
  }
 }
 $13 = $1;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)!=(47);
 if ($16) {
  $17 = $2;
  $18 = $17&1;
  if ($18) {
   $19 = $newlen;
   $20 = (($19) + 1)|0;
   $newlen = $20;
  }
 }
 $21 = $len;
 $22 = (($21) - 1)|0;
 $23 = $1;
 $24 = (($23) + ($22)|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 << 24 >> 24;
 $27 = ($26|0)!=(47);
 if ($27) {
  $28 = $newlen;
  $29 = (($28) + 1)|0;
  $newlen = $29;
 }
 $30 = $newlen;
 $31 = (($30) + 1)|0;
 $32 = (_malloc($31)|0);
 $ret = $32;
 $33 = $ret;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $35 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 4648;
  (_fprintf(($35|0),(4616|0),($vararg_buffer|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 $36 = $ret;
 $ptr = $36;
 $37 = $1;
 $38 = HEAP8[$37>>0]|0;
 $39 = $38 << 24 >> 24;
 $40 = ($39|0)!=(47);
 if ($40) {
  $41 = $2;
  $42 = $41&1;
  if ($42) {
   $43 = $ptr;
   $44 = (($43) + 1|0);
   $ptr = $44;
   HEAP8[$43>>0] = 47;
  }
 }
 $45 = $ptr;
 $46 = $1;
 (_strcpy(($45|0),($46|0))|0);
 $47 = $len;
 $48 = $ptr;
 $49 = (($48) + ($47)|0);
 $ptr = $49;
 $50 = $len;
 $51 = (($50) - 1)|0;
 $52 = $1;
 $53 = (($52) + ($51)|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54 << 24 >> 24;
 $56 = ($55|0)!=(47);
 if ($56) {
  $57 = $ptr;
  $58 = (($57) + 1|0);
  $ptr = $58;
  HEAP8[$57>>0] = 47;
 }
 $59 = $ptr;
 $60 = $ret;
 $61 = $newlen;
 $62 = (($60) + ($61)|0);
 $63 = ($59|0)!=($62|0);
 if ($63) {
  $64 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer1>>2] = 4648;
  (_fprintf(($64|0),(4672|0),($vararg_buffer1|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 } else {
  $65 = $ptr;
  HEAP8[$65>>0] = 0;
  $66 = $ret;
  $0 = $66;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 return (0)|0;
}
function _filter_dot($d) {
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $d;
 $1 = $0;
 $2 = (($1) + 11|0);
 $3 = (_strcmp($2,5680)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 11|0);
  $7 = (_strcmp($6,24128)|0);
  $8 = ($7|0)!=(0);
  $10 = $8;
 } else {
  $10 = 0;
 }
 $9 = $10&1;
 STACKTOP = sp;return ($9|0);
}
function _load_canned_fs_config($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $f = 0, $line = 0, $p = 0, $token = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $line = sp + 32|0;
 $1 = $fn;
 $2 = $1;
 $3 = (_fopen(($2|0),(4712|0))|0);
 $f = $3;
 $4 = $f;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = HEAP32[_stderr>>2]|0;
  $7 = $1;
  $8 = (___errno_location()|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_strerror(($9|0))|0);
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $10;
  (_fprintf(($6|0),(4720|0),($vararg_buffer|0))|0);
  $0 = -1;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 while(1) {
  $11 = $f;
  $12 = (_fgets(($line|0),4296,($11|0))|0);
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   break;
  }
  while(1) {
   $14 = HEAP32[4744>>2]|0;
   $15 = HEAP32[4752>>2]|0;
   $16 = ($14|0)>=($15|0);
   if (!($16)) {
    break;
   }
   $17 = HEAP32[4752>>2]|0;
   $18 = (($17) + 1)|0;
   $19 = $18<<1;
   HEAP32[4752>>2] = $19;
   $20 = HEAP32[4760>>2]|0;
   $21 = HEAP32[4752>>2]|0;
   $22 = ($21*24)|0;
   $23 = (_realloc($20,$22)|0);
   HEAP32[4760>>2] = $23;
  }
  $24 = HEAP32[4760>>2]|0;
  $25 = HEAP32[4744>>2]|0;
  $26 = (($24) + (($25*24)|0)|0);
  $p = $26;
  $27 = (_strtok($line,4768)|0);
  $28 = (___strdup($27)|0);
  $29 = $p;
  HEAP32[$29>>2] = $28;
  $30 = (_strtok(0,4768)|0);
  $31 = (_atoi($30)|0);
  $32 = $p;
  $33 = (($32) + 4|0);
  HEAP32[$33>>2] = $31;
  $34 = (_strtok(0,4768)|0);
  $35 = (_atoi($34)|0);
  $36 = $p;
  $37 = (($36) + 8|0);
  HEAP32[$37>>2] = $35;
  $38 = (_strtok(0,4768)|0);
  $39 = (_strtol($38,0,8)|0);
  $40 = $p;
  $41 = (($40) + 12|0);
  HEAP32[$41>>2] = $39;
  $42 = $p;
  $43 = (($42) + 16|0);
  $44 = $43;
  $45 = $44;
  HEAP32[$45>>2] = 0;
  $46 = (($44) + 4)|0;
  $47 = $46;
  HEAP32[$47>>2] = 0;
  $token = 0;
  while(1) {
   $48 = (_strtok(0,4768)|0);
   $token = $48;
   $49 = $token;
   $50 = ($49|0)!=(0|0);
   if ($50) {
    $51 = $token;
    $52 = (_strncmp($51,4776,13)|0);
    $53 = ($52|0)==(0);
    if ($53) {
     label = 11;
     break;
    }
   }
   $64 = $token;
   $65 = ($64|0)!=(0|0);
   if (!($65)) {
    break;
   }
  }
  if ((label|0) == 11) {
   label = 0;
   $54 = $token;
   $55 = (($54) + 13|0);
   $56 = (_strtoll($55,0,0)|0);
   $57 = tempRet0;
   $58 = $p;
   $59 = (($58) + 16|0);
   $60 = $59;
   $61 = $60;
   HEAP32[$61>>2] = $56;
   $62 = (($60) + 4)|0;
   $63 = $62;
   HEAP32[$63>>2] = $57;
  }
  $66 = HEAP32[4744>>2]|0;
  $67 = (($66) + 1)|0;
  HEAP32[4744>>2] = $67;
 }
 $68 = $f;
 (_fclose(($68|0))|0);
 $69 = HEAP32[4760>>2]|0;
 $70 = HEAP32[4744>>2]|0;
 _qsort($69,$70,24,60);
 $71 = HEAP32[4744>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $71;
 (_printf((4792|0),($vararg_buffer2|0))|0);
 $0 = 0;
 $72 = $0;
 STACKTOP = sp;return ($72|0);
}
function _canned_fs_config($path,$dir,$uid,$gid,$mode,$capabilities) {
 $path = $path|0;
 $dir = $dir|0;
 $uid = $uid|0;
 $gid = $gid|0;
 $mode = $mode|0;
 $capabilities = $capabilities|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $key = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 24|0;
 $key = sp;
 $0 = $path;
 $1 = $dir;
 $2 = $uid;
 $3 = $gid;
 $4 = $mode;
 $5 = $capabilities;
 $6 = $0;
 $7 = (($6) + 1|0);
 HEAP32[$key>>2] = $7;
 $8 = HEAP32[4760>>2]|0;
 $9 = HEAP32[4744>>2]|0;
 $10 = (_bsearch($key,$8,$9,24,60)|0);
 $p = $10;
 $11 = $p;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = HEAP32[_stderr>>2]|0;
  $14 = $0;
  HEAP32[$vararg_buffer>>2] = $14;
  (_fprintf(($13|0),(4824|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $15 = $p;
  $16 = (($15) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  HEAP32[$18>>2] = $17;
  $19 = $p;
  $20 = (($19) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $3;
  HEAP32[$22>>2] = $21;
  $23 = $p;
  $24 = (($23) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $4;
  HEAP32[$26>>2] = $25;
  $27 = $p;
  $28 = (($27) + 16|0);
  $29 = $28;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = $35;
  $37 = $36;
  HEAP32[$37>>2] = $31;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $34;
  STACKTOP = sp;return;
 }
}
function _path_compare($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_strcmp($3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _ext4_bg_has_super_block($bg) {
 $bg = $bg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $bg;
 $2 = HEAP16[((4880 + 32|0))>>1]|0;
 $3 = $2&65535;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   $6 = $1;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $8 = $1;
    $9 = ($8|0)==(1);
    if (!($9)) {
     $10 = $1;
     $11 = (_is_power_of($10,3)|0);
     $12 = ($11|0)!=(0);
     if (!($12)) {
      $13 = $1;
      $14 = (_is_power_of($13,5)|0);
      $15 = ($14|0)!=(0);
      if (!($15)) {
       $16 = $1;
       $17 = (_is_power_of($16,7)|0);
       $18 = ($17|0)!=(0);
       if (!($18)) {
        $0 = 0;
        break;
       }
      }
     }
     $0 = 1;
     break;
    }
   }
   $0 = 1;
  } else {
   $0 = 1;
  }
 } while(0);
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _write_ext4_image($fd,$gz,$sparse,$crc) {
 $fd = $fd|0;
 $gz = $gz|0;
 $sparse = $sparse|0;
 $crc = $crc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fd;
 $1 = $gz;
 $2 = $sparse;
 $3 = $crc;
 $4 = HEAP32[5096>>2]|0;
 $5 = $0;
 $6 = $1;
 $7 = ($6|0)!=(0);
 $8 = $2;
 $9 = ($8|0)!=(0);
 $10 = $3;
 $11 = ($10|0)!=(0);
 (_sparse_file_write($4,$5,$7,$9,$11)|0);
 STACKTOP = sp;return;
}
function _ext4_create_fs_aux_info() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $last_group_size = 0, $last_header_size = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[((4880 + 8|0))>>2]|0;
 $1 = ($0>>>0)>(1024);
 $2 = $1 ? 0 : 1;
 HEAP32[((5104 + 20|0))>>2] = $2;
 $3 = 4880;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[((4880 + 8|0))>>2]|0;
 $10 = (___divdi3(($5|0),($8|0),($9|0),0)|0);
 $11 = tempRet0;
 $12 = ((5104 + 24|0));
 $13 = $12;
 HEAP32[$13>>2] = $10;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = HEAP32[((4880 + 16|0))>>2]|0;
 $17 = HEAP32[((4880 + 20|0))>>2]|0;
 $18 = Math_imul($16, $17)|0;
 $19 = HEAP32[((4880 + 8|0))>>2]|0;
 $20 = (($18) + ($19))|0;
 $21 = (($20) - 1)|0;
 $22 = HEAP32[((4880 + 8|0))>>2]|0;
 $23 = (($21>>>0) / ($22>>>0))&-1;
 HEAP32[((5104 + 32|0))>>2] = $23;
 $24 = ((5104 + 24|0));
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[((5104 + 20|0))>>2]|0;
 $31 = (_i64Subtract(($26|0),($29|0),($30|0),0)|0);
 $32 = tempRet0;
 $33 = HEAP32[((4880 + 12|0))>>2]|0;
 $34 = (_i64Add(($31|0),($32|0),($33|0),0)|0);
 $35 = tempRet0;
 $36 = (_i64Subtract(($34|0),($35|0),1,0)|0);
 $37 = tempRet0;
 $38 = HEAP32[((4880 + 12|0))>>2]|0;
 $39 = (___udivdi3(($36|0),($37|0),($38|0),0)|0);
 $40 = tempRet0;
 HEAP32[((5104 + 36|0))>>2] = $39;
 $41 = HEAP32[((4880 + 8|0))>>2]|0;
 $42 = (($41>>>0) / 4)&-1;
 HEAP32[((5104 + 48|0))>>2] = $42;
 $43 = HEAP32[((5104 + 48|0))>>2]|0;
 $44 = HEAP32[((5104 + 48|0))>>2]|0;
 $45 = Math_imul($43, $44)|0;
 HEAP32[((5104 + 52|0))>>2] = $45;
 $46 = HEAP32[((5104 + 52|0))>>2]|0;
 $47 = HEAP32[((5104 + 52|0))>>2]|0;
 $48 = Math_imul($46, $47)|0;
 HEAP32[((5104 + 56|0))>>2] = $48;
 $49 = HEAP32[((5104 + 36|0))>>2]|0;
 $50 = $49<<5;
 $51 = HEAP32[((4880 + 8|0))>>2]|0;
 $52 = (($50) + ($51))|0;
 $53 = (($52) - 1)|0;
 $54 = HEAP32[((4880 + 8|0))>>2]|0;
 $55 = (($53>>>0) / ($54>>>0))&-1;
 HEAP32[((5104 + 40|0))>>2] = $55;
 HEAP32[((5104 + 44|0))>>2] = 128;
 $56 = ((5104 + 24|0));
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56) + 4)|0;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[((4880 + 12|0))>>2]|0;
 $63 = (___uremdi3(($58|0),($61|0),($62|0),0)|0);
 $64 = tempRet0;
 $last_group_size = $63;
 $65 = HEAP32[((5104 + 32|0))>>2]|0;
 $66 = (2 + ($65))|0;
 $last_header_size = $66;
 $67 = HEAP32[((5104 + 36|0))>>2]|0;
 $68 = (($67) - 1)|0;
 $69 = (_ext4_bg_has_super_block($68)|0);
 $70 = ($69|0)!=(0);
 if ($70) {
  $71 = HEAP32[((5104 + 40|0))>>2]|0;
  $72 = (1 + ($71))|0;
  $73 = HEAP32[((4880 + 40|0))>>2]|0;
  $74 = (($72) + ($73))|0;
  $75 = $last_header_size;
  $76 = (($75) + ($74))|0;
  $last_header_size = $76;
 }
 $77 = $last_group_size;
 $78 = ($77>>>0)>(0);
 if ($78) {
  $79 = $last_group_size;
  $80 = $last_header_size;
  $81 = ($79>>>0)<($80>>>0);
  if ($81) {
   $82 = HEAP32[((5104 + 36|0))>>2]|0;
   $83 = (($82) + -1)|0;
   HEAP32[((5104 + 36|0))>>2] = $83;
   $84 = $last_group_size;
   $85 = ((5104 + 24|0));
   $86 = $85;
   $87 = HEAP32[$86>>2]|0;
   $88 = (($85) + 4)|0;
   $89 = $88;
   $90 = HEAP32[$89>>2]|0;
   $91 = (_i64Subtract(($87|0),($90|0),($84|0),0)|0);
   $92 = tempRet0;
   $93 = ((5104 + 24|0));
   $94 = $93;
   HEAP32[$94>>2] = $91;
   $95 = (($93) + 4)|0;
   $96 = $95;
   HEAP32[$96>>2] = $92;
  }
 }
 $97 = HEAP32[((4880 + 8|0))>>2]|0;
 $98 = (_calloc($97,1)|0);
 HEAP32[5104>>2] = $98;
 $99 = HEAP32[((5104 + 36|0))>>2]|0;
 $100 = (_calloc($99,4)|0);
 HEAP32[((5104 + 4|0))>>2] = $100;
 $101 = HEAP32[5104>>2]|0;
 $102 = ($101|0)!=(0|0);
 if (!($102)) {
  $103 = HEAP32[_stderr>>2]|0;
  $104 = (___errno_location()|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (_strerror(($105|0))|0);
  HEAP32[$vararg_buffer>>2] = 5168;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $106;
  (_fprintf(($103|0),(10216|0),($vararg_buffer|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 $107 = HEAP32[((4880 + 8|0))>>2]|0;
 $108 = HEAP32[((5104 + 40|0))>>2]|0;
 $109 = (_calloc($107,$108)|0);
 HEAP32[((5104 + 8|0))>>2] = $109;
 $110 = HEAP32[((5104 + 8|0))>>2]|0;
 $111 = ($110|0)!=(0|0);
 if ($111) {
  HEAP32[((5104 + 16|0))>>2] = 0;
  STACKTOP = sp;return;
 }
 $112 = HEAP32[_stderr>>2]|0;
 $113 = (___errno_location()|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (_strerror(($114|0))|0);
 HEAP32[$vararg_buffer2>>2] = 5168;
 $vararg_ptr5 = (($vararg_buffer2) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $115;
 (_fprintf(($112|0),(10216|0),($vararg_buffer2|0))|0);
 _longjmp((4936|0),1);
 // unreachable;
}
function _ext4_fill_in_sb() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $group_start_block = 0;
 var $header_size = 0, $i = 0, $sb = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $group_start_block = sp;
 $0 = HEAP32[5104>>2]|0;
 $sb = $0;
 $1 = HEAP32[((4880 + 16|0))>>2]|0;
 $2 = HEAP32[((5104 + 36|0))>>2]|0;
 $3 = Math_imul($1, $2)|0;
 $4 = $sb;
 HEAP32[$4>>2] = $3;
 $5 = ((5104 + 24|0));
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $sb;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $7;
 $13 = $sb;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $sb;
 $16 = (($15) + 12|0);
 HEAP32[$16>>2] = 0;
 $17 = $sb;
 $18 = (($17) + 16|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[((5104 + 20|0))>>2]|0;
 $20 = $sb;
 $21 = (($20) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = HEAP32[((4880 + 8|0))>>2]|0;
 $23 = (($22>>>0) / 1024)&-1;
 $24 = (_log_2($23)|0);
 $25 = $sb;
 $26 = (($25) + 24|0);
 HEAP32[$26>>2] = $24;
 $27 = HEAP32[((4880 + 8|0))>>2]|0;
 $28 = (($27>>>0) / 1024)&-1;
 $29 = (_log_2($28)|0);
 $30 = $sb;
 $31 = (($30) + 28|0);
 HEAP32[$31>>2] = $29;
 $32 = HEAP32[((4880 + 12|0))>>2]|0;
 $33 = $sb;
 $34 = (($33) + 32|0);
 HEAP32[$34>>2] = $32;
 $35 = HEAP32[((4880 + 12|0))>>2]|0;
 $36 = $sb;
 $37 = (($36) + 36|0);
 HEAP32[$37>>2] = $35;
 $38 = HEAP32[((4880 + 16|0))>>2]|0;
 $39 = $sb;
 $40 = (($39) + 40|0);
 HEAP32[$40>>2] = $38;
 $41 = $sb;
 $42 = (($41) + 44|0);
 HEAP32[$42>>2] = 0;
 $43 = $sb;
 $44 = (($43) + 48|0);
 HEAP32[$44>>2] = 0;
 $45 = $sb;
 $46 = (($45) + 52|0);
 HEAP16[$46>>1] = 0;
 $47 = $sb;
 $48 = (($47) + 54|0);
 HEAP16[$48>>1] = -1;
 $49 = $sb;
 $50 = (($49) + 56|0);
 HEAP16[$50>>1] = -4269;
 $51 = $sb;
 $52 = (($51) + 58|0);
 HEAP16[$52>>1] = 1;
 $53 = $sb;
 $54 = (($53) + 60|0);
 HEAP16[$54>>1] = 2;
 $55 = $sb;
 $56 = (($55) + 62|0);
 HEAP16[$56>>1] = 0;
 $57 = $sb;
 $58 = (($57) + 64|0);
 HEAP32[$58>>2] = 0;
 $59 = $sb;
 $60 = (($59) + 68|0);
 HEAP32[$60>>2] = 0;
 $61 = $sb;
 $62 = (($61) + 72|0);
 HEAP32[$62>>2] = 0;
 $63 = $sb;
 $64 = (($63) + 76|0);
 HEAP32[$64>>2] = 1;
 $65 = $sb;
 $66 = (($65) + 80|0);
 HEAP16[$66>>1] = 0;
 $67 = $sb;
 $68 = (($67) + 82|0);
 HEAP16[$68>>1] = 0;
 $69 = $sb;
 $70 = (($69) + 84|0);
 HEAP32[$70>>2] = 11;
 $71 = HEAP32[((4880 + 20|0))>>2]|0;
 $72 = $71&65535;
 $73 = $sb;
 $74 = (($73) + 88|0);
 HEAP16[$74>>1] = $72;
 $75 = $sb;
 $76 = (($75) + 90|0);
 HEAP16[$76>>1] = 0;
 $77 = HEAP16[((4880 + 34|0))>>1]|0;
 $78 = $77&65535;
 $79 = $sb;
 $80 = (($79) + 92|0);
 HEAP32[$80>>2] = $78;
 $81 = HEAP16[((4880 + 36|0))>>1]|0;
 $82 = $81&65535;
 $83 = $sb;
 $84 = (($83) + 96|0);
 HEAP32[$84>>2] = $82;
 $85 = HEAP16[((4880 + 32|0))>>1]|0;
 $86 = $85&65535;
 $87 = $sb;
 $88 = (($87) + 100|0);
 HEAP32[$88>>2] = $86;
 $89 = HEAP32[((4880 + 44|0))>>2]|0;
 $90 = $sb;
 $91 = (($90) + 104|0);
 _generate_uuid(5192,$89,$91);
 $92 = $sb;
 $93 = (($92) + 120|0);
 dest=$93+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $94 = $sb;
 $95 = (($94) + 120|0);
 $96 = HEAP32[((4880 + 44|0))>>2]|0;
 (_strncpy(($95|0),($96|0),16)|0);
 $97 = $sb;
 $98 = (($97) + 136|0);
 dest=$98+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $99 = $sb;
 $100 = (($99) + 200|0);
 HEAP32[$100>>2] = 0;
 $101 = HEAP32[((4880 + 40|0))>>2]|0;
 $102 = $101&65535;
 $103 = $sb;
 $104 = (($103) + 206|0);
 HEAP16[$104>>1] = $102;
 $105 = $sb;
 $106 = (($105) + 204|0);
 HEAP8[$106>>0] = 0;
 $107 = $sb;
 $108 = (($107) + 205|0);
 HEAP8[$108>>0] = 0;
 $109 = HEAP16[((4880 + 34|0))>>1]|0;
 $110 = $109&65535;
 $111 = $110 & 4;
 $112 = ($111|0)!=(0);
 if ($112) {
  $113 = $sb;
  $114 = (($113) + 224|0);
  HEAP32[$114>>2] = 8;
 }
 $115 = $sb;
 $116 = (($115) + 228|0);
 HEAP32[$116>>2] = 0;
 $117 = $sb;
 $118 = (($117) + 232|0);
 HEAP32[$118>>2] = 0;
 $119 = $sb;
 $120 = (($119) + 236|0);
 HEAP32[$120>>2] = 0;
 $121 = $sb;
 $122 = (($121) + 252|0);
 HEAP8[$122>>0] = 2;
 $123 = $sb;
 $124 = (($123) + 253|0);
 HEAP8[$124>>0] = 1;
 $125 = $sb;
 $126 = (($125) + 254|0);
 HEAP16[$126>>1] = 32;
 $127 = $sb;
 $128 = (($127) + 256|0);
 HEAP32[$128>>2] = 0;
 $129 = $sb;
 $130 = (($129) + 260|0);
 HEAP32[$130>>2] = 0;
 $131 = $sb;
 $132 = (($131) + 264|0);
 HEAP32[$132>>2] = 0;
 $133 = ((5104 + 24|0));
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = (($133) + 4)|0;
 $137 = $136;
 $138 = HEAP32[$137>>2]|0;
 $139 = $sb;
 $140 = (($139) + 336|0);
 HEAP32[$140>>2] = $138;
 $141 = $sb;
 $142 = (($141) + 340|0);
 HEAP32[$142>>2] = 0;
 $143 = $sb;
 $144 = (($143) + 344|0);
 HEAP32[$144>>2] = 0;
 $145 = $sb;
 $146 = (($145) + 348|0);
 HEAP16[$146>>1] = 28;
 $147 = $sb;
 $148 = (($147) + 350|0);
 HEAP16[$148>>1] = 28;
 $149 = $sb;
 $150 = (($149) + 352|0);
 HEAP32[$150>>2] = 2;
 $151 = $sb;
 $152 = (($151) + 356|0);
 HEAP16[$152>>1] = 0;
 $153 = $sb;
 $154 = (($153) + 358|0);
 HEAP16[$154>>1] = 0;
 $155 = $sb;
 $156 = (($155) + 360|0);
 $157 = $156;
 $158 = $157;
 HEAP32[$158>>2] = 0;
 $159 = (($157) + 4)|0;
 $160 = $159;
 HEAP32[$160>>2] = 0;
 $161 = $sb;
 $162 = (($161) + 368|0);
 HEAP32[$162>>2] = 0;
 $163 = $sb;
 $164 = (($163) + 372|0);
 HEAP8[$164>>0] = 0;
 $165 = $sb;
 $166 = (($165) + 376|0);
 $167 = $166;
 $168 = $167;
 HEAP32[$168>>2] = 0;
 $169 = (($167) + 4)|0;
 $170 = $169;
 HEAP32[$170>>2] = 0;
 $i = 0;
 while(1) {
  $171 = $i;
  $172 = HEAP32[((5104 + 36|0))>>2]|0;
  $173 = ($171>>>0)<($172>>>0);
  if (!($173)) {
   break;
  }
  $174 = HEAP32[((5104 + 20|0))>>2]|0;
  $175 = $i;
  $176 = HEAP32[((4880 + 12|0))>>2]|0;
  $177 = Math_imul($175, $176)|0;
  $178 = (($174) + ($177))|0;
  $179 = $group_start_block;
  $180 = $179;
  HEAP32[$180>>2] = $178;
  $181 = (($179) + 4)|0;
  $182 = $181;
  HEAP32[$182>>2] = 0;
  $header_size = 0;
  $183 = $i;
  $184 = (_ext4_bg_has_super_block($183)|0);
  $185 = ($184|0)!=(0);
  if ($185) {
   $186 = $i;
   $187 = ($186|0)!=(0);
   if ($187) {
    $188 = HEAP32[((4880 + 8|0))>>2]|0;
    $189 = (_calloc($188,1)|0);
    $190 = $i;
    $191 = HEAP32[((5104 + 4|0))>>2]|0;
    $192 = (($191) + ($190<<2)|0);
    HEAP32[$192>>2] = $189;
    $193 = $i;
    $194 = HEAP32[((5104 + 4|0))>>2]|0;
    $195 = (($194) + ($193<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = $sb;
    $198 = HEAP32[((4880 + 8|0))>>2]|0;
    _memcpy(($196|0),($197|0),($198|0))|0;
    $199 = $i;
    $200 = $199&65535;
    $201 = $i;
    $202 = HEAP32[((5104 + 4|0))>>2]|0;
    $203 = (($202) + ($201<<2)|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = (($204) + 90|0);
    HEAP16[$205>>1] = $200;
    $206 = HEAP32[5096>>2]|0;
    $207 = $i;
    $208 = HEAP32[((5104 + 4|0))>>2]|0;
    $209 = (($208) + ($207<<2)|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = HEAP32[((4880 + 8|0))>>2]|0;
    $212 = $group_start_block;
    $213 = $212;
    $214 = HEAP32[$213>>2]|0;
    $215 = (($212) + 4)|0;
    $216 = $215;
    $217 = HEAP32[$216>>2]|0;
    (_sparse_file_add_data($206,$210,$211,$214)|0);
   }
   $218 = HEAP32[5096>>2]|0;
   $219 = HEAP32[((5104 + 8|0))>>2]|0;
   $220 = HEAP32[((5104 + 40|0))>>2]|0;
   $221 = HEAP32[((4880 + 8|0))>>2]|0;
   $222 = Math_imul($220, $221)|0;
   $223 = $group_start_block;
   $224 = $223;
   $225 = HEAP32[$224>>2]|0;
   $226 = (($223) + 4)|0;
   $227 = $226;
   $228 = HEAP32[$227>>2]|0;
   $229 = (_i64Add(($225|0),($228|0),1,0)|0);
   $230 = tempRet0;
   (_sparse_file_add_data($218,$219,$222,$229)|0);
   $231 = HEAP32[((5104 + 40|0))>>2]|0;
   $232 = (1 + ($231))|0;
   $233 = HEAP32[((4880 + 40|0))>>2]|0;
   $234 = (($232) + ($233))|0;
   $header_size = $234;
  }
  $235 = $group_start_block;
  $236 = $235;
  $237 = HEAP32[$236>>2]|0;
  $238 = (($235) + 4)|0;
  $239 = $238;
  $240 = HEAP32[$239>>2]|0;
  $241 = $header_size;
  $242 = (_i64Add(($237|0),($240|0),($241|0),0)|0);
  $243 = tempRet0;
  $244 = $i;
  $245 = HEAP32[((5104 + 8|0))>>2]|0;
  $246 = (($245) + ($244<<5)|0);
  HEAP32[$246>>2] = $242;
  $247 = $group_start_block;
  $248 = $247;
  $249 = HEAP32[$248>>2]|0;
  $250 = (($247) + 4)|0;
  $251 = $250;
  $252 = HEAP32[$251>>2]|0;
  $253 = $header_size;
  $254 = (_i64Add(($249|0),($252|0),($253|0),0)|0);
  $255 = tempRet0;
  $256 = (_i64Add(($254|0),($255|0),1,0)|0);
  $257 = tempRet0;
  $258 = $i;
  $259 = HEAP32[((5104 + 8|0))>>2]|0;
  $260 = (($259) + ($258<<5)|0);
  $261 = (($260) + 4|0);
  HEAP32[$261>>2] = $256;
  $262 = $group_start_block;
  $263 = $262;
  $264 = HEAP32[$263>>2]|0;
  $265 = (($262) + 4)|0;
  $266 = $265;
  $267 = HEAP32[$266>>2]|0;
  $268 = $header_size;
  $269 = (_i64Add(($264|0),($267|0),($268|0),0)|0);
  $270 = tempRet0;
  $271 = (_i64Add(($269|0),($270|0),2,0)|0);
  $272 = tempRet0;
  $273 = $i;
  $274 = HEAP32[((5104 + 8|0))>>2]|0;
  $275 = (($274) + ($273<<5)|0);
  $276 = (($275) + 8|0);
  HEAP32[$276>>2] = $271;
  $277 = $sb;
  $278 = (($277) + 32|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = $279&65535;
  $281 = $i;
  $282 = HEAP32[((5104 + 8|0))>>2]|0;
  $283 = (($282) + ($281<<5)|0);
  $284 = (($283) + 12|0);
  HEAP16[$284>>1] = $280;
  $285 = $sb;
  $286 = (($285) + 40|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = $287&65535;
  $289 = $i;
  $290 = HEAP32[((5104 + 8|0))>>2]|0;
  $291 = (($290) + ($289<<5)|0);
  $292 = (($291) + 14|0);
  HEAP16[$292>>1] = $288;
  $293 = $i;
  $294 = HEAP32[((5104 + 8|0))>>2]|0;
  $295 = (($294) + ($293<<5)|0);
  $296 = (($295) + 16|0);
  HEAP16[$296>>1] = 0;
  $297 = $i;
  $298 = (($297) + 1)|0;
  $i = $298;
 }
 STACKTOP = sp;return;
}
function _ext4_queue_sb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((4880 + 8|0))>>2]|0;
 $1 = ($0>>>0)>(1024);
 if ($1) {
  $2 = HEAP32[((4880 + 8|0))>>2]|0;
  $3 = (_calloc($2,1)|0);
  $buf = $3;
  $4 = $buf;
  $5 = (($4) + 1024|0);
  $6 = HEAP32[5104>>2]|0;
  _memcpy(($5|0),($6|0),1024)|0;
  $7 = HEAP32[5096>>2]|0;
  $8 = $buf;
  $9 = HEAP32[((4880 + 8|0))>>2]|0;
  (_sparse_file_add_data($7,$8,$9,0)|0);
  STACKTOP = sp;return;
 } else {
  $10 = HEAP32[5096>>2]|0;
  $11 = HEAP32[5104>>2]|0;
  (_sparse_file_add_data($10,$11,1024,1)|0);
  STACKTOP = sp;return;
 }
}
function _ext4_create_resize_inode() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $group_start_block = 0, $i = 0, $inode = 0, $reserve_inode_alloc = 0, $reserve_inode_len = 0, $reserved_block_len = 0, $reserved_block_start = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $group_start_block = sp;
 $0 = (_create_allocation()|0);
 $reserve_inode_alloc = $0;
 $reserve_inode_len = 0;
 $1 = (_get_inode(7)|0);
 $inode = $1;
 $2 = $inode;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 5256;
  (_fprintf(($4|0),(5216|0),($vararg_buffer|0))|0);
  $5 = HEAP32[4872>>2]|0;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = HEAP32[((5104 + 36|0))>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = (_ext4_bg_has_super_block($10)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = HEAP32[((5104 + 20|0))>>2]|0;
   $14 = $i;
   $15 = HEAP32[((4880 + 12|0))>>2]|0;
   $16 = Math_imul($14, $15)|0;
   $17 = (($13) + ($16))|0;
   $18 = $group_start_block;
   $19 = $18;
   HEAP32[$19>>2] = $17;
   $20 = (($18) + 4)|0;
   $21 = $20;
   HEAP32[$21>>2] = 0;
   $22 = $group_start_block;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 4)|0;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (_i64Add(($24|0),($27|0),1,0)|0);
   $29 = tempRet0;
   $30 = HEAP32[((5104 + 40|0))>>2]|0;
   $31 = (_i64Add(($28|0),($29|0),($30|0),0)|0);
   $32 = tempRet0;
   $reserved_block_start = $31;
   $33 = HEAP32[((4880 + 40|0))>>2]|0;
   $reserved_block_len = $33;
   $34 = $reserve_inode_alloc;
   $35 = $reserved_block_start;
   $36 = $reserved_block_len;
   $37 = $i;
   _append_region($34,$35,$36,$37);
   $38 = $reserved_block_len;
   $39 = $reserve_inode_len;
   $40 = (($39) + ($38))|0;
   $reserve_inode_len = $40;
  }
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 $43 = $inode;
 $44 = $reserve_inode_alloc;
 _inode_attach_resize($43,$44);
 $45 = $inode;
 HEAP16[$45>>1] = -32384;
 $46 = $inode;
 $47 = (($46) + 26|0);
 HEAP16[$47>>1] = 1;
 $48 = $reserve_inode_alloc;
 _free_alloc($48);
 STACKTOP = sp;return;
}
function _ext4_create_journal_inode() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $inode = 0, $journal_data = 0, $jsb = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_get_inode(8)|0);
 $inode = $0;
 $1 = $inode;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 5328;
  (_fprintf(($3|0),(5288|0),($vararg_buffer|0))|0);
  $4 = HEAP32[4872>>2]|0;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  STACKTOP = sp;return;
 }
 $6 = $inode;
 $7 = HEAP32[((4880 + 28|0))>>2]|0;
 $8 = HEAP32[((4880 + 8|0))>>2]|0;
 $9 = Math_imul($7, $8)|0;
 $10 = HEAP32[((4880 + 28|0))>>2]|0;
 $11 = HEAP32[((4880 + 8|0))>>2]|0;
 $12 = Math_imul($10, $11)|0;
 $13 = (_inode_allocate_data_extents($6,$9,0,$12,0)|0);
 $journal_data = $13;
 $14 = $journal_data;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $19 = $inode;
  HEAP16[$19>>1] = -32384;
  $20 = $inode;
  $21 = (($20) + 26|0);
  HEAP16[$21>>1] = 1;
  $22 = $journal_data;
  $jsb = $22;
  $23 = (_htonl(-1069860456)|0);
  $24 = $jsb;
  HEAP32[$24>>2] = $23;
  $25 = (_htonl(4)|0);
  $26 = $jsb;
  $27 = (($26) + 4|0);
  HEAP32[$27>>2] = $25;
  $28 = HEAP32[((4880 + 8|0))>>2]|0;
  $29 = (_htonl(($28|0))|0);
  $30 = $jsb;
  $31 = (($30) + 12|0);
  HEAP32[$31>>2] = $29;
  $32 = HEAP32[((4880 + 28|0))>>2]|0;
  $33 = (_htonl(($32|0))|0);
  $34 = $jsb;
  $35 = (($34) + 16|0);
  HEAP32[$35>>2] = $33;
  $36 = (_htonl(1)|0);
  $37 = $jsb;
  $38 = (($37) + 64|0);
  HEAP32[$38>>2] = $36;
  $39 = (_htonl(1)|0);
  $40 = $jsb;
  $41 = (($40) + 20|0);
  HEAP32[$41>>2] = $39;
  $42 = (_htonl(1)|0);
  $43 = $jsb;
  $44 = (($43) + 24|0);
  HEAP32[$44>>2] = $42;
  $45 = HEAP32[5104>>2]|0;
  $46 = (($45) + 268|0);
  $47 = $inode;
  $48 = (($47) + 40|0);
  dest=$46+0|0; src=$48+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $16 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer1>>2] = 5328;
 (_fprintf(($16|0),(5360|0),($vararg_buffer1|0))|0);
 $17 = HEAP32[4872>>2]|0;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 STACKTOP = sp;return;
}
function _ext4_update_free() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $bg_free_blocks = 0, $bg_free_inodes = 0, $crc = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 8|0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $0 = HEAP32[$i>>2]|0;
  $1 = HEAP32[((5104 + 36|0))>>2]|0;
  $2 = ($0>>>0)<($1>>>0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$i>>2]|0;
  $4 = (_get_free_blocks($3)|0);
  $bg_free_blocks = $4;
  $5 = HEAP32[$i>>2]|0;
  $6 = (_get_free_inodes($5)|0);
  $bg_free_inodes = $6;
  $7 = $bg_free_blocks;
  $8 = $7&65535;
  $9 = HEAP32[$i>>2]|0;
  $10 = HEAP32[((5104 + 8|0))>>2]|0;
  $11 = (($10) + ($9<<5)|0);
  $12 = (($11) + 12|0);
  HEAP16[$12>>1] = $8;
  $13 = $bg_free_blocks;
  $14 = HEAP32[5104>>2]|0;
  $15 = (($14) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($13))|0;
  HEAP32[$15>>2] = $17;
  $18 = $bg_free_inodes;
  $19 = $18&65535;
  $20 = HEAP32[$i>>2]|0;
  $21 = HEAP32[((5104 + 8|0))>>2]|0;
  $22 = (($21) + ($20<<5)|0);
  $23 = (($22) + 14|0);
  HEAP16[$23>>1] = $19;
  $24 = $bg_free_inodes;
  $25 = HEAP32[5104>>2]|0;
  $26 = (($25) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($24))|0;
  HEAP32[$26>>2] = $28;
  $29 = HEAP32[$i>>2]|0;
  $30 = (_get_directories($29)|0);
  $31 = $30&65535;
  $32 = HEAP32[$i>>2]|0;
  $33 = HEAP32[((5104 + 8|0))>>2]|0;
  $34 = (($33) + ($32<<5)|0);
  $35 = (($34) + 16|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = (($37) + ($31))|0;
  $39 = $38&65535;
  HEAP16[$35>>1] = $39;
  $40 = HEAP32[$i>>2]|0;
  $41 = (_get_bg_flags($40)|0);
  $42 = HEAP32[$i>>2]|0;
  $43 = HEAP32[((5104 + 8|0))>>2]|0;
  $44 = (($43) + ($42<<5)|0);
  $45 = (($44) + 18|0);
  HEAP16[$45>>1] = $41;
  $46 = HEAP32[5104>>2]|0;
  $47 = (($46) + 104|0);
  $48 = (_ext4_crc16(-1,$47,16)|0);
  $crc = $48;
  $49 = $crc;
  $50 = (_ext4_crc16($49,$i,4)|0);
  $crc = $50;
  $51 = $crc;
  $52 = HEAP32[$i>>2]|0;
  $53 = HEAP32[((5104 + 8|0))>>2]|0;
  $54 = (($53) + ($52<<5)|0);
  $55 = (_ext4_crc16($51,$54,30)|0);
  $crc = $55;
  $56 = $crc;
  $57 = HEAP32[$i>>2]|0;
  $58 = HEAP32[((5104 + 8|0))>>2]|0;
  $59 = (($58) + ($57<<5)|0);
  $60 = (($59) + 30|0);
  HEAP16[$60>>1] = $56;
  $61 = HEAP32[$i>>2]|0;
  $62 = (($61) + 1)|0;
  HEAP32[$i>>2] = $62;
 }
 STACKTOP = sp;return;
}
function _get_block_device_size($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $0 = $fd;
 $1 = $size;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $0;
 (_close(($5|0))|0);
 tempRet0 = 0;
 STACKTOP = sp;return 0;
}
function _get_file_size($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $computed_size = 0, $reserve_len = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 24|0;
 $0 = sp + 16|0;
 $buf = sp + 32|0;
 $reserve_len = sp + 8|0;
 $computed_size = sp;
 $1 = $fd;
 $2 = $reserve_len;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = (_fstat(($6|0),($buf|0))|0);
 $ret = $7;
 $8 = $ret;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $0;
  $11 = $10;
  HEAP32[$11>>2] = 0;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = 0;
  $98 = $0;
  $99 = $98;
  $100 = HEAP32[$99>>2]|0;
  $101 = (($98) + 4)|0;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  tempRet0 = $103;
  STACKTOP = sp;return ($100|0);
 }
 $14 = 4880;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<(0);
 if ($20) {
  $21 = 4880;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (_i64Subtract(0,0,($23|0),($26|0))|0);
  $28 = tempRet0;
  $29 = $reserve_len;
  $30 = $29;
  HEAP32[$30>>2] = $27;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = $28;
 }
 $33 = (($buf) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & 61440;
 $36 = ($35|0)==(32768);
 if ($36) {
  $37 = (($buf) + 36|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)<(0);
  $40 = $39 << 31 >> 31;
  $41 = $reserve_len;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (_i64Subtract(($38|0),($40|0),($43|0),($46|0))|0);
  $48 = tempRet0;
  $49 = $computed_size;
  $50 = $49;
  HEAP32[$50>>2] = $47;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = $48;
 } else {
  $53 = (($buf) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 & 61440;
  $56 = ($55|0)==(24576);
  if ($56) {
   $57 = $1;
   $58 = (_get_block_device_size($57)|0);
   $59 = tempRet0;
   $60 = $reserve_len;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = (($60) + 4)|0;
   $64 = $63;
   $65 = HEAP32[$64>>2]|0;
   $66 = (_i64Subtract(($58|0),($59|0),($62|0),($65|0))|0);
   $67 = tempRet0;
   $68 = $computed_size;
   $69 = $68;
   HEAP32[$69>>2] = $66;
   $70 = (($68) + 4)|0;
   $71 = $70;
   HEAP32[$71>>2] = $67;
  } else {
   $72 = $computed_size;
   $73 = $72;
   HEAP32[$73>>2] = 0;
   $74 = (($72) + 4)|0;
   $75 = $74;
   HEAP32[$75>>2] = 0;
  }
 }
 $76 = $computed_size;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($76) + 4)|0;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)<(0);
 if ($82) {
  $83 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 5472;
  (_fprintf(($83|0),(5416|0),($vararg_buffer|0))|0);
  $84 = $computed_size;
  $85 = $84;
  HEAP32[$85>>2] = 0;
  $86 = (($84) + 4)|0;
  $87 = $86;
  HEAP32[$87>>2] = 0;
 }
 $88 = $computed_size;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (($88) + 4)|0;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = $0;
 $95 = $94;
 HEAP32[$95>>2] = $90;
 $96 = (($94) + 4)|0;
 $97 = $96;
 HEAP32[$97>>2] = $93;
 $98 = $0;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = (($98) + 4)|0;
 $102 = $101;
 $103 = HEAP32[$102>>2]|0;
 tempRet0 = $103;
 STACKTOP = sp;return ($100|0);
}
function _parse_num($arg) {
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $endptr = 0, $num = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $endptr = sp + 8|0;
 $num = sp;
 $0 = $arg;
 $1 = $0;
 $2 = (_strtoull($1,$endptr,10)|0);
 $3 = tempRet0;
 $4 = $num;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $8 = HEAP32[$endptr>>2]|0;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)==(107);
 if (!($11)) {
  $12 = HEAP32[$endptr>>2]|0;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(75);
  if (!($15)) {
   $28 = HEAP32[$endptr>>2]|0;
   $29 = HEAP8[$28>>0]|0;
   $30 = $29 << 24 >> 24;
   $31 = ($30|0)==(109);
   if ($31) {
    label = 6;
   } else {
    $32 = HEAP32[$endptr>>2]|0;
    $33 = HEAP8[$32>>0]|0;
    $34 = $33 << 24 >> 24;
    $35 = ($34|0)==(77);
    if ($35) {
     label = 6;
    } else {
     $48 = HEAP32[$endptr>>2]|0;
     $49 = HEAP8[$48>>0]|0;
     $50 = $49 << 24 >> 24;
     $51 = ($50|0)==(103);
     if ($51) {
      label = 9;
     } else {
      $52 = HEAP32[$endptr>>2]|0;
      $53 = HEAP8[$52>>0]|0;
      $54 = $53 << 24 >> 24;
      $55 = ($54|0)==(71);
      if ($55) {
       label = 9;
      }
     }
     if ((label|0) == 9) {
      $56 = $num;
      $57 = $56;
      $58 = HEAP32[$57>>2]|0;
      $59 = (($56) + 4)|0;
      $60 = $59;
      $61 = HEAP32[$60>>2]|0;
      $62 = (___muldi3(($58|0),($61|0),1073741824,0)|0);
      $63 = tempRet0;
      $64 = $num;
      $65 = $64;
      HEAP32[$65>>2] = $62;
      $66 = (($64) + 4)|0;
      $67 = $66;
      HEAP32[$67>>2] = $63;
     }
    }
   }
   if ((label|0) == 6) {
    $36 = $num;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = (($36) + 4)|0;
    $40 = $39;
    $41 = HEAP32[$40>>2]|0;
    $42 = (___muldi3(($38|0),($41|0),1048576,0)|0);
    $43 = tempRet0;
    $44 = $num;
    $45 = $44;
    HEAP32[$45>>2] = $42;
    $46 = (($44) + 4)|0;
    $47 = $46;
    HEAP32[$47>>2] = $43;
   }
   $68 = $num;
   $69 = $68;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68) + 4)|0;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   tempRet0 = $73;
   STACKTOP = sp;return ($70|0);
  }
 }
 $16 = $num;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (___muldi3(($18|0),($21|0),1024,0)|0);
 $23 = tempRet0;
 $24 = $num;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $68 = $num;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 tempRet0 = $73;
 STACKTOP = sp;return ($70|0);
}
function _is_power_of($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 while(1) {
  $3 = $1;
  $4 = $2;
  $5 = ($3|0)>($4|0);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $1;
  $7 = $2;
  $8 = (($6|0) % ($7|0))&-1;
  $9 = ($8|0)!=(0);
  if ($9) {
   label = 4;
   break;
  }
  $10 = $2;
  $11 = $1;
  $12 = (($11|0) / ($10|0))&-1;
  $1 = $12;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  $13 = $1;
  $14 = $2;
  $15 = ($13|0)==($14|0);
  $16 = $15 ? 1 : 0;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _log_2($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $i = 0;
 while(1) {
  $1 = $0;
  $2 = ($1|0)>(0);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $3 >> 1;
  $0 = $4;
  $5 = $i;
  $6 = (($5) + 1)|0;
  $i = $6;
 }
 $7 = $i;
 $8 = (($7) - 1)|0;
 STACKTOP = sp;return ($8|0);
}
function _get_saved_allocation_chain() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5488>>2]|0;
 return ($0|0);
}
function _make_directory($dir_inode_num,$entries,$dentries,$dirs) {
 $dir_inode_num = $dir_inode_num|0;
 $entries = $entries|0;
 $dentries = $dentries|0;
 $dirs = $dirs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blocks = 0, $data = 0, $dentry = 0, $i = 0, $info$byval_copy = 0, $inode = 0, $inode_num = 0, $len = 0, $offset = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0;
 var $vararg_buffer15 = 0, $vararg_buffer21 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info$byval_copy = sp + 64|0;
 $vararg_buffer21 = sp + 56|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $offset = sp + 136|0;
 $1 = $dir_inode_num;
 $2 = $entries;
 $3 = $dentries;
 $4 = $dirs;
 HEAP32[$offset>>2] = 0;
 $5 = $2;
 $6 = $3;
 $7 = (_dentry_size($5,$6)|0);
 $8 = HEAP32[((4880 + 8|0))>>2]|0;
 $9 = (($7) + ($8))|0;
 $10 = (($9) - 1)|0;
 $11 = HEAP32[((4880 + 8|0))>>2]|0;
 $12 = (($10>>>0) / ($11>>>0))&-1;
 $blocks = $12;
 $13 = $blocks;
 $14 = HEAP32[((4880 + 8|0))>>2]|0;
 $15 = Math_imul($13, $14)|0;
 $len = $15;
 $16 = $1;
 $17 = ($16|0)!=(0);
 if ($17) {
  dest=$info$byval_copy+0|0; src=4880+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $18 = (_allocate_inode()|0);
  $inode_num = $18;
 } else {
  $1 = 2;
  $inode_num = 2;
 }
 $19 = $inode_num;
 $20 = ($19|0)==(-1);
 if ($20) {
  $21 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 5536;
  (_fprintf(($21|0),(5496|0),($vararg_buffer|0))|0);
  $22 = HEAP32[4872>>2]|0;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $24 = $inode_num;
 _add_directory($24);
 $25 = $inode_num;
 $26 = (_get_inode($25)|0);
 $inode = $26;
 $27 = $inode;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $29 = HEAP32[_stderr>>2]|0;
  $30 = $inode_num;
  HEAP32[$vararg_buffer1>>2] = 5536;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $30;
  (_fprintf(($29|0),(5552|0),($vararg_buffer1|0))|0);
  $31 = HEAP32[4872>>2]|0;
  $32 = ($31|0)!=(0);
  if (!($32)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $33 = $inode;
 $34 = $len;
 $35 = $len;
 $36 = (_inode_allocate_data_extents($33,$34,0,$35,0)|0);
 $data = $36;
 $37 = $data;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = HEAP32[_stderr>>2]|0;
  $40 = $len;
  HEAP32[$vararg_buffer5>>2] = 5536;
  $vararg_ptr8 = (($vararg_buffer5) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $40;
  (_fprintf(($39|0),(5592|0),($vararg_buffer5|0))|0);
  $41 = HEAP32[4872>>2]|0;
  $42 = ($41|0)!=(0);
  if (!($42)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $43 = $inode;
 HEAP16[$43>>1] = 16384;
 $44 = $4;
 $45 = (($44) + 2)|0;
 $46 = $45&65535;
 $47 = $inode;
 $48 = (($47) + 26|0);
 HEAP16[$48>>1] = $46;
 $49 = HEAP32[((5104 + 44|0))>>2]|0;
 $50 = $inode;
 $51 = (($50) + 32|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $52 | $49;
 HEAP32[$51>>2] = $53;
 $dentry = 0;
 $54 = $data;
 $55 = $inode_num;
 $56 = (_add_dentry($54,$offset,0,$55,24128,2)|0);
 $dentry = $56;
 $57 = $dentry;
 $58 = ($57|0)!=(0|0);
 if (!($58)) {
  $59 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer9>>2] = 5536;
  (_fprintf(($59|0),(5640|0),($vararg_buffer9|0))|0);
  $60 = HEAP32[4872>>2]|0;
  $61 = ($60|0)!=(0);
  if (!($61)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $62 = $data;
 $63 = $dentry;
 $64 = $1;
 $65 = (_add_dentry($62,$offset,$63,$64,5680,2)|0);
 $dentry = $65;
 $66 = $dentry;
 $67 = ($66|0)!=(0|0);
 if (!($67)) {
  $68 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer12>>2] = 5536;
  (_fprintf(($68|0),(5688|0),($vararg_buffer12|0))|0);
  $69 = HEAP32[4872>>2]|0;
  $70 = ($69|0)!=(0);
  if (!($70)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $i = 0;
 while(1) {
  $71 = $i;
  $72 = $2;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   label = 49;
   break;
  }
  $74 = $data;
  $75 = $dentry;
  $76 = $i;
  $77 = $3;
  $78 = (($77) + (($76*48)|0)|0);
  $79 = (($78) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $i;
  $82 = $3;
  $83 = (($82) + (($81*48)|0)|0);
  $84 = (($83) + 20|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = (_add_dentry($74,$offset,$75,0,$80,$85)|0);
  $dentry = $86;
  $87 = HEAP32[$offset>>2]|0;
  $88 = $len;
  $89 = ($87>>>0)>($88>>>0);
  if ($89) {
   label = 39;
   break;
  }
  $90 = HEAP32[$offset>>2]|0;
  $91 = $len;
  $92 = ($90|0)==($91|0);
  if ($92) {
   $93 = $i;
   $94 = $2;
   $95 = (($94) - 1)|0;
   $96 = ($93|0)!=($95|0);
   if ($96) {
    label = 39;
    break;
   }
  }
  $105 = $dentry;
  $106 = $i;
  $107 = $3;
  $108 = (($107) + (($106*48)|0)|0);
  $109 = (($108) + 28|0);
  HEAP32[$109>>2] = $105;
  $110 = $dentry;
  $111 = ($110|0)!=(0|0);
  if (!($111)) {
   label = 42;
   break;
  }
  $115 = $i;
  $116 = (($115) + 1)|0;
  $i = $116;
 }
 if ((label|0) == 39) {
  $97 = HEAP32[_stderr>>2]|0;
  $98 = $i;
  $99 = $3;
  $100 = (($99) + (($98*48)|0)|0);
  $101 = (($100) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = HEAP32[$offset>>2]|0;
  $104 = $len;
  HEAP32[$vararg_buffer15>>2] = 5536;
  $vararg_ptr18 = (($vararg_buffer15) + 4|0);
  HEAP32[$vararg_ptr18>>2] = $102;
  $vararg_ptr19 = (($vararg_buffer15) + 8|0);
  HEAP32[$vararg_ptr19>>2] = $103;
  $vararg_ptr20 = (($vararg_buffer15) + 12|0);
  HEAP32[$vararg_ptr20>>2] = $104;
  (_fprintf(($97|0),(5728|0),($vararg_buffer15|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 else if ((label|0) == 42) {
  $112 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer21>>2] = 5536;
  (_fprintf(($112|0),(5800|0),($vararg_buffer21|0))|0);
  $113 = HEAP32[4872>>2]|0;
  $114 = ($113|0)!=(0);
  if (!($114)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 else if ((label|0) == 49) {
  $117 = $len;
  $118 = HEAP32[$offset>>2]|0;
  $119 = (($117) - ($118))|0;
  $120 = $dentry;
  $121 = (($120) + 4|0);
  $122 = HEAP16[$121>>1]|0;
  $123 = $122&65535;
  $124 = (($123) + ($119))|0;
  $125 = $124&65535;
  HEAP16[$121>>1] = $125;
  $126 = $inode_num;
  $0 = $126;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 return (0)|0;
}
function _make_file($filename,$0,$1) {
 $filename = $filename|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $alloc = 0, $info$byval_copy = 0, $inode = 0, $inode_num = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info$byval_copy = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $4 = sp;
 $3 = $filename;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 dest=$info$byval_copy+0|0; src=4880+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $9 = (_allocate_inode()|0);
 $inode_num = $9;
 $10 = $inode_num;
 $11 = ($10|0)==(-1);
 if ($11) {
  $12 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 5840;
  (_fprintf(($12|0),(5496|0),($vararg_buffer|0))|0);
  $13 = HEAP32[4872>>2]|0;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $2 = -1;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 }
 $15 = $inode_num;
 $16 = (_get_inode($15)|0);
 $inode = $16;
 $17 = $inode;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = HEAP32[_stderr>>2]|0;
  $20 = $inode_num;
  HEAP32[$vararg_buffer1>>2] = 5840;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $20;
  (_fprintf(($19|0),(5552|0),($vararg_buffer1|0))|0);
  $21 = HEAP32[4872>>2]|0;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $2 = -1;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 } else {
  $23 = $4;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28>>>0)>(0);
  $30 = ($25>>>0)>(0);
  $31 = ($28|0)==(0);
  $32 = $31 & $30;
  $33 = $29 | $32;
  if ($33) {
   $34 = $inode;
   $35 = $4;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = (($35) + 4)|0;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = $3;
   $42 = (_inode_allocate_file_extents($34,$37,$40,$41)|0);
   $alloc = $42;
   $43 = $alloc;
   $44 = ($43|0)!=(0|0);
   if ($44) {
    $45 = $3;
    $46 = (___strdup($45)|0);
    $47 = $alloc;
    $48 = (($47) + 32|0);
    HEAP32[$48>>2] = $46;
    $49 = HEAP32[5488>>2]|0;
    $50 = $alloc;
    $51 = (($50) + 36|0);
    HEAP32[$51>>2] = $49;
    $52 = $alloc;
    HEAP32[5488>>2] = $52;
   }
  }
  $53 = $inode;
  HEAP16[$53>>1] = -32768;
  $54 = $inode;
  $55 = (($54) + 26|0);
  HEAP16[$55>>1] = 1;
  $56 = HEAP32[((5104 + 44|0))>>2]|0;
  $57 = $inode;
  $58 = (($57) + 32|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $59 | $56;
  HEAP32[$58>>2] = $60;
  $61 = $inode_num;
  $2 = $61;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _make_link($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $info$byval_copy = 0, $inode = 0, $inode_num = 0, $len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info$byval_copy = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $link;
 $2 = $1;
 $3 = (_strlen(($2|0))|0);
 $len = $3;
 dest=$info$byval_copy+0|0; src=4880+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = (_allocate_inode()|0);
 $inode_num = $4;
 $5 = $inode_num;
 $6 = ($5|0)==(-1);
 if ($6) {
  $7 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 5856;
  (_fprintf(($7|0),(5496|0),($vararg_buffer|0))|0);
  $8 = HEAP32[4872>>2]|0;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $10 = $inode_num;
 $11 = (_get_inode($10)|0);
 $inode = $11;
 $12 = $inode;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $18 = $inode;
  HEAP16[$18>>1] = -24576;
  $19 = $inode;
  $20 = (($19) + 26|0);
  HEAP16[$20>>1] = 1;
  $21 = HEAP32[((5104 + 44|0))>>2]|0;
  $22 = $inode;
  $23 = (($22) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 | $21;
  HEAP32[$23>>2] = $25;
  $26 = $len;
  $27 = $inode;
  $28 = (($27) + 4|0);
  HEAP32[$28>>2] = $26;
  $29 = $len;
  $30 = (($29) + 1)|0;
  $31 = ($30>>>0)<=(60);
  if ($31) {
   $32 = $inode;
   $33 = (($32) + 40|0);
   $34 = $1;
   $35 = $len;
   _memcpy(($33|0),($34|0),($35|0))|0;
  } else {
   $36 = $inode;
   $37 = HEAP32[((4880 + 8|0))>>2]|0;
   $38 = HEAP32[((4880 + 8|0))>>2]|0;
   $39 = (_inode_allocate_data_indirect($36,$37,$38)|0);
   $data = $39;
   $40 = $data;
   $41 = $1;
   $42 = $len;
   _memcpy(($40|0),($41|0),($42|0))|0;
   $43 = HEAP32[((4880 + 8|0))>>2]|0;
   $44 = (($43>>>0) / 512)&-1;
   $45 = $inode;
   $46 = (($45) + 28|0);
   HEAP32[$46>>2] = $44;
  }
  $47 = $inode_num;
  $0 = $47;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $14 = HEAP32[_stderr>>2]|0;
 $15 = $inode_num;
 HEAP32[$vararg_buffer1>>2] = 5856;
 $vararg_ptr4 = (($vararg_buffer1) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $15;
 (_fprintf(($14|0),(5552|0),($vararg_buffer1|0))|0);
 $16 = HEAP32[4872>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $0 = -1;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _inode_set_permissions($inode_num,$mode,$uid,$gid,$mtime) {
 $inode_num = $inode_num|0;
 $mode = $mode|0;
 $uid = $uid|0;
 $gid = $gid|0;
 $mtime = $mtime|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $inode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $inode_num;
 $2 = $mode;
 $3 = $uid;
 $4 = $gid;
 $5 = $mtime;
 $6 = $1;
 $7 = (_get_inode($6)|0);
 $inode = $7;
 $8 = $inode;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $2;
  $11 = $10&65535;
  $12 = $inode;
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = $14 | $11;
  $16 = $15&65535;
  HEAP16[$12>>1] = $16;
  $17 = $3;
  $18 = $inode;
  $19 = (($18) + 2|0);
  HEAP16[$19>>1] = $17;
  $20 = $4;
  $21 = $inode;
  $22 = (($21) + 24|0);
  HEAP16[$22>>1] = $20;
  $23 = $5;
  $24 = $inode;
  $25 = (($24) + 16|0);
  HEAP32[$25>>2] = $23;
  $26 = $5;
  $27 = $inode;
  $28 = (($27) + 8|0);
  HEAP32[$28>>2] = $26;
  $29 = $5;
  $30 = $inode;
  $31 = (($30) + 12|0);
  HEAP32[$31>>2] = $29;
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else {
  $0 = -1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _inode_set_selinux($inode_num,$secon) {
 $inode_num = $inode_num|0;
 $secon = $secon|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $inode_num;
 $2 = $secon;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = $2;
  $7 = $2;
  $8 = (_strlen(($7|0))|0);
  $9 = (($8) + 1)|0;
  $10 = (_xattr_add($5,6,5872,$6,$9)|0);
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _inode_set_capabilities($inode_num,$0,$1) {
 $inode_num = $inode_num|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cap_data = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $cap_data = sp + 8|0;
 $3 = $inode_num;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $4;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 if ($17) {
  $2 = 0;
  $40 = $2;
  STACKTOP = sp;return ($40|0);
 } else {
  ;HEAP32[$cap_data+0>>2]=0|0;HEAP32[$cap_data+4>>2]=0|0;HEAP32[$cap_data+8>>2]=0|0;HEAP32[$cap_data+12>>2]=0|0;HEAP32[$cap_data+16>>2]=0|0;
  HEAP32[$cap_data>>2] = 33554433;
  $18 = $4;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($cap_data) + 4|0);
  HEAP32[$24>>2] = $20;
  $25 = (($cap_data) + 4|0);
  $26 = (($25) + 4|0);
  HEAP32[$26>>2] = 0;
  $27 = $4;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($cap_data) + 4|0);
  $34 = (($33) + 8|0);
  HEAP32[$34>>2] = $32;
  $35 = (($cap_data) + 4|0);
  $36 = (($35) + 8|0);
  $37 = (($36) + 4|0);
  HEAP32[$37>>2] = 0;
  $38 = $3;
  $39 = (_xattr_add($38,6,5880,$cap_data,20)|0);
  $2 = $39;
  $40 = $2;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _dentry_size($entries,$dentries) {
 $entries = $entries|0;
 $dentries = $dentries|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dentry_len = 0, $i = 0, $len = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $entries;
 $1 = $dentries;
 $len = 24;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $0;
  $4 = ($2>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $1;
  $7 = (($6) + (($5*48)|0)|0);
  $8 = (($7) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_strlen(($9|0))|0);
  $11 = (($10) + 4)|0;
  $12 = (($11) - 1)|0;
  $13 = (($12>>>0) / 4)&-1;
  $14 = $13<<2;
  $15 = (8 + ($14))|0;
  $dentry_len = $15;
  $16 = $len;
  $17 = HEAP32[((4880 + 8|0))>>2]|0;
  $18 = (($16>>>0) % ($17>>>0))&-1;
  $19 = $dentry_len;
  $20 = (($18) + ($19))|0;
  $21 = HEAP32[((4880 + 8|0))>>2]|0;
  $22 = ($20>>>0)>($21>>>0);
  if ($22) {
   $23 = HEAP32[((4880 + 8|0))>>2]|0;
   $24 = $len;
   $25 = HEAP32[((4880 + 8|0))>>2]|0;
   $26 = (($24>>>0) % ($25>>>0))&-1;
   $27 = (($23) - ($26))|0;
   $28 = $len;
   $29 = (($28) + ($27))|0;
   $len = $29;
  }
  $30 = $dentry_len;
  $31 = $len;
  $32 = (($31) + ($30))|0;
  $len = $32;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = $len;
 STACKTOP = sp;return ($35|0);
}
function _add_dentry($data,$offset,$prev,$inode,$name,$file_type) {
 $data = $data|0;
 $offset = $offset|0;
 $prev = $prev|0;
 $inode = $inode|0;
 $name = $name|0;
 $file_type = $file_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $dentry = 0, $end_block = 0, $name_len = 0;
 var $rec_len = 0, $start_block = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $data;
 $1 = $offset;
 $2 = $prev;
 $3 = $inode;
 $4 = $name;
 $5 = $file_type;
 $6 = $4;
 $7 = (_strlen(($6|0))|0);
 $8 = $7&255;
 $name_len = $8;
 $9 = $name_len;
 $10 = $9&255;
 $11 = (($10) + 4)|0;
 $12 = (($11) - 1)|0;
 $13 = (($12|0) / 4)&-1;
 $14 = $13<<2;
 $15 = (8 + ($14))|0;
 $16 = $15&65535;
 $rec_len = $16;
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[((4880 + 8|0))>>2]|0;
 $20 = (($18>>>0) / ($19>>>0))&-1;
 $start_block = $20;
 $21 = $1;
 $22 = HEAP32[$21>>2]|0;
 $23 = $rec_len;
 $24 = $23&65535;
 $25 = (($22) + ($24))|0;
 $26 = (($25) - 1)|0;
 $27 = HEAP32[((4880 + 8|0))>>2]|0;
 $28 = (($26>>>0) / ($27>>>0))&-1;
 $end_block = $28;
 $29 = $start_block;
 $30 = $end_block;
 $31 = ($29|0)!=($30|0);
 do {
  if ($31) {
   $32 = $2;
   $33 = ($32|0)!=(0|0);
   if ($33) {
    $35 = $end_block;
    $36 = HEAP32[((4880 + 8|0))>>2]|0;
    $37 = Math_imul($35, $36)|0;
    $38 = $1;
    $39 = HEAP32[$38>>2]|0;
    $40 = (($37) - ($39))|0;
    $41 = $2;
    $42 = (($41) + 4|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = $43&65535;
    $45 = (($44) + ($40))|0;
    $46 = $45&65535;
    HEAP16[$42>>1] = $46;
    $47 = $end_block;
    $48 = HEAP32[((4880 + 8|0))>>2]|0;
    $49 = Math_imul($47, $48)|0;
    $50 = $1;
    HEAP32[$50>>2] = $49;
    break;
   }
   $34 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer>>2] = 6152;
   (_fprintf(($34|0),(6120|0),($vararg_buffer|0))|0);
   _longjmp((4936|0),1);
   // unreachable;
  }
 } while(0);
 $51 = $0;
 $52 = $1;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + ($53)|0);
 $dentry = $54;
 $55 = $3;
 $56 = $dentry;
 HEAP32[$56>>2] = $55;
 $57 = $rec_len;
 $58 = $dentry;
 $59 = (($58) + 4|0);
 HEAP16[$59>>1] = $57;
 $60 = $name_len;
 $61 = $dentry;
 $62 = (($61) + 6|0);
 HEAP8[$62>>0] = $60;
 $63 = $5;
 $64 = $dentry;
 $65 = (($64) + 7|0);
 HEAP8[$65>>0] = $63;
 $66 = $dentry;
 $67 = (($66) + 8|0);
 $68 = $4;
 $69 = $name_len;
 $70 = $69&255;
 _memcpy(($67|0),($68|0),($70|0))|0;
 $71 = $rec_len;
 $72 = $71&65535;
 $73 = $1;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($72))|0;
 HEAP32[$73>>2] = $75;
 $76 = $dentry;
 STACKTOP = sp;return ($76|0);
}
function _xattr_add($inode_num,$name_index,$name,$value,$value_len) {
 $inode_num = $inode_num|0;
 $name_index = $name_index|0;
 $name = $name|0;
 $value = $value|0;
 $value_len = $value_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $inode = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $inode_num;
 $2 = $name_index;
 $3 = $name;
 $4 = $value;
 $5 = $value_len;
 $6 = $4;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $8 = $1;
 $9 = (_get_inode($8)|0);
 $inode = $9;
 $10 = $inode;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $0 = -1;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $12 = $inode;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = (_xattr_addto_inode($12,$13,$14,$15,$16)|0);
 $result = $17;
 $18 = $result;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $inode;
  $21 = $2;
  $22 = $3;
  $23 = $4;
  $24 = $5;
  $25 = (_xattr_addto_block($20,$21,$22,$23,$24)|0);
  $result = $25;
 }
 $26 = $result;
 $0 = $26;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _xattr_addto_inode($inode,$name_index,$name,$value,$value_len) {
 $inode = $inode|0;
 $name_index = $name_index|0;
 $name = $name|0;
 $value = $value|0;
 $value_len = $value_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block_end = 0, $first = 0, $hdr = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $inode;
 $2 = $name_index;
 $3 = $name;
 $4 = $value;
 $5 = $value_len;
 $6 = $1;
 $7 = (($6) + 156|0);
 $hdr = $7;
 $8 = $hdr;
 $9 = (($8) + 4|0);
 $first = $9;
 $10 = $1;
 $11 = HEAP32[((4880 + 20|0))>>2]|0;
 $12 = (($10) + ($11)|0);
 $block_end = $12;
 $13 = $first;
 $14 = $block_end;
 $15 = $first;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = (_xattr_addto_range($13,$14,$15,$16,$17,$18,$19)|0);
 $result = $20;
 $21 = $result;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $0 = -1;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $23 = $hdr;
  HEAP32[$23>>2] = -368967680;
  $24 = $1;
  $25 = (($24) + 128|0);
  HEAP16[$25>>1] = 28;
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _xattr_addto_block($inode,$name_index,$name,$value,$value_len) {
 $inode = $inode|0;
 $name_index = $name_index|0;
 $name = $name|0;
 $value = $value|0;
 $value_len = $value_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block_end = 0, $first = 0, $header = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $inode;
 $2 = $name_index;
 $3 = $name;
 $4 = $value;
 $5 = $value_len;
 $6 = $1;
 $7 = (_get_xattr_block_for_inode($6)|0);
 $header = $7;
 $8 = $header;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $0 = -1;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $10 = $header;
 $11 = (($10) + 32|0);
 $first = $11;
 $12 = $header;
 $13 = HEAP32[((4880 + 8|0))>>2]|0;
 $14 = (($12) + ($13)|0);
 $block_end = $14;
 $15 = $header;
 $16 = $block_end;
 $17 = $first;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 $21 = $5;
 $22 = (_xattr_addto_range($15,$16,$17,$18,$19,$20,$21)|0);
 $result = $22;
 $23 = $result;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $0 = -1;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 } else {
  $25 = $header;
  $26 = $result;
  _ext4_xattr_hash_entry($25,$26);
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _xattr_addto_range($block_start,$block_end,$first,$name_index,$name,$value,$value_len) {
 $block_start = $block_start|0;
 $block_end = $block_end|0;
 $first = $first|0;
 $name_index = $name_index|0;
 $name = $name|0;
 $value = $value|0;
 $value_len = $value_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $available_size = 0, $e_value_offs = 0, $name_len = 0, $needed_size = 0;
 var $new_entry = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $block_start;
 $2 = $block_end;
 $3 = $first;
 $4 = $name_index;
 $5 = $name;
 $6 = $value;
 $7 = $value_len;
 $8 = $5;
 $9 = (_strlen(($8|0))|0);
 $name_len = $9;
 $10 = $name_len;
 $11 = ($10>>>0)>(255);
 if ($11) {
  $0 = 0;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $12 = $3;
 $13 = $2;
 $14 = (_xattr_free_space($12,$13)|0);
 $available_size = $14;
 $15 = $name_len;
 $16 = (($15) + 3)|0;
 $17 = (($16) + 16)|0;
 $18 = $17 & -4;
 $19 = $7;
 $20 = (($19) + 3)|0;
 $21 = $20 & -4;
 $22 = (($18) + ($21))|0;
 $needed_size = $22;
 $23 = $needed_size;
 $24 = $available_size;
 $25 = ($23>>>0)>($24>>>0);
 if ($25) {
  $0 = 0;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 } else {
  $26 = $3;
  $27 = (_xattr_get_last($26)|0);
  $new_entry = $27;
  $28 = $new_entry;
  $29 = $name_len;
  $30 = (($29) + 3)|0;
  $31 = (($30) + 16)|0;
  $32 = $31 & -4;
  _memset(($28|0),0,($32|0))|0;
  $33 = $name_len;
  $34 = $33&255;
  $35 = $new_entry;
  HEAP8[$35>>0] = $34;
  $36 = $4;
  $37 = $36&255;
  $38 = $new_entry;
  $39 = (($38) + 1|0);
  HEAP8[$39>>0] = $37;
  $40 = $new_entry;
  $41 = (($40) + 16|0);
  $42 = $5;
  $43 = $name_len;
  _memcpy(($41|0),($42|0),($43|0))|0;
  $44 = $new_entry;
  $45 = (($44) + 4|0);
  HEAP32[$45>>2] = 0;
  $46 = $7;
  $47 = $new_entry;
  $48 = (($47) + 8|0);
  HEAP32[$48>>2] = $46;
  $49 = $new_entry;
  $50 = $available_size;
  $51 = (($49) + ($50)|0);
  $52 = $7;
  $53 = (($52) + 3)|0;
  $54 = $53 & -4;
  $55 = (0 - ($54))|0;
  $56 = (($51) + ($55)|0);
  $val = $56;
  $57 = $val;
  $58 = $1;
  $59 = $57;
  $60 = $58;
  $61 = (($59) - ($60))|0;
  $e_value_offs = $61;
  $62 = $e_value_offs;
  $63 = $62&65535;
  $64 = $new_entry;
  $65 = (($64) + 2|0);
  HEAP16[$65>>1] = $63;
  $66 = $val;
  $67 = $7;
  $68 = (($67) + 3)|0;
  $69 = $68 & -4;
  _memset(($66|0),0,($69|0))|0;
  $70 = $val;
  $71 = $6;
  $72 = $7;
  _memcpy(($70|0),($71|0),($72|0))|0;
  $73 = $3;
  _xattr_assert_sane($73);
  $74 = $new_entry;
  $0 = $74;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _ext4_xattr_hash_entry($header,$entry) {
 $header = $header|0;
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash = 0, $n = 0, $name = 0, $value = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $header;
 $1 = $entry;
 $hash = 0;
 $2 = $1;
 $3 = (($2) + 16|0);
 $name = $3;
 $n = 0;
 while(1) {
  $4 = $n;
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ($4|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $hash;
  $10 = $9 << 5;
  $11 = $hash;
  $12 = $11 >>> 27;
  $13 = $10 ^ $12;
  $14 = $name;
  $15 = (($14) + 1|0);
  $name = $15;
  $16 = HEAP8[$14>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = $13 ^ $17;
  $hash = $18;
  $19 = $n;
  $20 = (($19) + 1)|0;
  $n = $20;
 }
 $21 = $1;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $53 = $hash;
  $54 = $1;
  $55 = (($54) + 12|0);
  HEAP32[$55>>2] = $53;
  STACKTOP = sp;return;
 }
 $25 = $1;
 $26 = (($25) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $53 = $hash;
  $54 = $1;
  $55 = (($54) + 12|0);
  HEAP32[$55>>2] = $53;
  STACKTOP = sp;return;
 }
 $29 = $0;
 $30 = $1;
 $31 = (($30) + 2|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (($29) + ($33)|0);
 $value = $34;
 $35 = $1;
 $36 = (($35) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 3)|0;
 $39 = $38 >>> 2;
 $n = $39;
 while(1) {
  $40 = $n;
  $41 = ($40|0)!=(0);
  if (!($41)) {
   break;
  }
  $42 = $hash;
  $43 = $42 << 16;
  $44 = $hash;
  $45 = $44 >>> 16;
  $46 = $43 ^ $45;
  $47 = $value;
  $48 = (($47) + 4|0);
  $value = $48;
  $49 = HEAP32[$47>>2]|0;
  $50 = $46 ^ $49;
  $hash = $50;
  $51 = $n;
  $52 = (($51) + -1)|0;
  $n = $52;
 }
 $53 = $hash;
 $54 = $1;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 STACKTOP = sp;return;
}
function _xattr_free_space($entry,$end) {
 $entry = $entry|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $entry;
 $2 = $end;
 $3 = $2;
 $4 = (($3) + -4|0);
 $2 = $4;
 while(1) {
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   $39 = 0;
  } else {
   $8 = $1;
   $9 = $2;
   $10 = ($8>>>0)<($9>>>0);
   $39 = $10;
  }
  if (!($39)) {
   break;
  }
  $11 = $1;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 3)|0;
  $15 = $14 & -4;
  $16 = $2;
  $17 = (0 - ($15))|0;
  $18 = (($16) + ($17)|0);
  $2 = $18;
  $19 = $1;
  $20 = $1;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = (($22) + 3)|0;
  $24 = (($23) + 16)|0;
  $25 = $24 & -4;
  $26 = (($19) + ($25)|0);
  $1 = $26;
 }
 $27 = $1;
 $28 = $2;
 $29 = ($27>>>0)>($28>>>0);
 if (!($29)) {
  $33 = $2;
  $34 = $1;
  $35 = $33;
  $36 = $34;
  $37 = (($35) - ($36))|0;
  $0 = $37;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $30 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer>>2] = 6096;
 (_fprintf(($30|0),(6040|0),($vararg_buffer|0))|0);
 $31 = HEAP32[4872>>2]|0;
 $32 = ($31|0)!=(0);
 if (!($32)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function _xattr_get_last($entry) {
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $entry;
 while(1) {
  $1 = $0;
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  $4 = $3 ^ 1;
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = (($8) + 3)|0;
  $10 = (($9) + 16)|0;
  $11 = $10 & -4;
  $12 = (($5) + ($11)|0);
  $0 = $12;
 }
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _xattr_assert_sane($entry) {
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cmp = 0, $next = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $entry;
 while(1) {
  $1 = $0;
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  $4 = $3 ^ 1;
  if (!($4)) {
   label = 23;
   break;
  }
  $5 = $0;
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = (($8) + 3)|0;
  $10 = (($9) + 16)|0;
  $11 = $10 & -4;
  $12 = (($5) + ($11)|0);
  $next = $12;
  $13 = $next;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0);
  if ($15) {
   label = 4;
   break;
  }
  $16 = $next;
  $17 = (($16) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $0;
  $21 = (($20) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = (($19) - ($23))|0;
  $cmp = $24;
  $25 = $cmp;
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = $next;
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $0;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = (($29) - ($32))|0;
   $cmp = $33;
  }
  $34 = $cmp;
  $35 = ($34|0)==(0);
  if ($35) {
   $36 = $next;
   $37 = (($36) + 16|0);
   $38 = $0;
   $39 = (($38) + 16|0);
   $40 = $next;
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = (_memcmp($37,$39,$42)|0);
   $cmp = $43;
  }
  $44 = $cmp;
  $45 = ($44|0)<(0);
  if ($45) {
   label = 10;
   break;
  }
  $49 = $cmp;
  $50 = ($49|0)==(0);
  if ($50) {
   label = 16;
   break;
  }
  $54 = $0;
  $55 = $0;
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = (($57) + 3)|0;
  $59 = (($58) + 16)|0;
  $60 = $59 & -4;
  $61 = (($54) + ($60)|0);
  $0 = $61;
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  $46 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 5952;
  (_fprintf(($46|0),(5896|0),($vararg_buffer|0))|0);
  $47 = HEAP32[4872>>2]|0;
  $48 = ($47|0)!=(0);
  if (!($48)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  $51 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer1>>2] = 5952;
  (_fprintf(($51|0),(5976|0),($vararg_buffer1|0))|0);
  $52 = HEAP32[4872>>2]|0;
  $53 = ($52|0)!=(0);
  if (!($53)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
}
function _wipe_block_device($fd,$0,$1) {
 $fd = $fd|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $fd;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 STACKTOP = sp;return 1;
}
function _sparse_file_new($block_size,$0,$1) {
 $block_size = $block_size|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $3 = $block_size;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (_calloc(32,1)|0);
 $s = $9;
 $10 = $s;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $2 = 0;
  $36 = $2;
  STACKTOP = sp;return ($36|0);
 }
 $12 = $3;
 $13 = (_backed_block_list_new($12)|0);
 $14 = $s;
 $15 = (($14) + 20|0);
 HEAP32[$15>>2] = $13;
 $16 = $s;
 $17 = (($16) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $21 = $3;
  $22 = $s;
  HEAP32[$22>>2] = $21;
  $23 = $4;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = $s;
  $30 = (($29) + 8|0);
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $25;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $28;
  $35 = $s;
  $2 = $35;
  $36 = $2;
  STACKTOP = sp;return ($36|0);
 } else {
  $20 = $s;
  _free($20);
  $2 = 0;
  $36 = $2;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _sparse_file_destroy($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 _backed_block_list_destroy($3);
 $4 = $0;
 _free($4);
 STACKTOP = sp;return;
}
function _sparse_file_add_data($s,$data,$len,$block) {
 $s = $s|0;
 $data = $data|0;
 $len = $len|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $data;
 $2 = $len;
 $3 = $block;
 $4 = $0;
 $5 = (($4) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = (_backed_block_add_data($6,$7,$8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _sparse_file_add_file($s,$filename,$0,$1,$len,$block) {
 $s = $s|0;
 $filename = $filename|0;
 $0 = $0|0;
 $1 = $1|0;
 $len = $len|0;
 $block = $block|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $2 = $s;
 $3 = $filename;
 $7 = $4;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $5 = $len;
 $6 = $block;
 $11 = $2;
 $12 = (($11) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = $4;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = $6;
 $23 = (_backed_block_add_file($13,$14,$17,$20,$21,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function _sparse_count_chunks($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bb = 0, $chunks = 0, $last_block = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $last_block = 0;
 $chunks = 0;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_backed_block_iter_new($3)|0);
 $bb = $4;
 while(1) {
  $5 = $bb;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $bb;
  $8 = (_backed_block_block($7)|0);
  $9 = $last_block;
  $10 = ($8>>>0)>($9>>>0);
  if ($10) {
   $11 = $chunks;
   $12 = (($11) + 1)|0;
   $chunks = $12;
  }
  $13 = $chunks;
  $14 = (($13) + 1)|0;
  $chunks = $14;
  $15 = $bb;
  $16 = (_backed_block_block($15)|0);
  $17 = $bb;
  $18 = (_backed_block_len($17)|0);
  $19 = $0;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + ($20))|0;
  $22 = (($21) - 1)|0;
  $23 = $0;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22>>>0) / ($24>>>0))&-1;
  $26 = (($16) + ($25))|0;
  $last_block = $26;
  $27 = $bb;
  $28 = (_backed_block_iter_next($27)|0);
  $bb = $28;
 }
 $29 = $last_block;
 $30 = $0;
 $31 = (($30) + 8|0);
 $32 = $31;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = $0;
 $39 = HEAP32[$38>>2]|0;
 $40 = (_i64Add(($34|0),($37|0),($39|0),0)|0);
 $41 = tempRet0;
 $42 = (_i64Subtract(($40|0),($41|0),1,0)|0);
 $43 = tempRet0;
 $44 = $0;
 $45 = HEAP32[$44>>2]|0;
 $46 = (___divdi3(($42|0),($43|0),($45|0),0)|0);
 $47 = tempRet0;
 $48 = (0)<($47|0);
 $49 = ($29>>>0)<($46>>>0);
 $50 = (0)==($47|0);
 $51 = $50 & $49;
 $52 = $48 | $51;
 if (!($52)) {
  $55 = $chunks;
  STACKTOP = sp;return ($55|0);
 }
 $53 = $chunks;
 $54 = (($53) + 1)|0;
 $chunks = $54;
 $55 = $chunks;
 STACKTOP = sp;return ($55|0);
}
function _sparse_file_write($s,$fd,$gz,$sparse,$crc) {
 $s = $s|0;
 $fd = $fd|0;
 $gz = $gz|0;
 $sparse = $sparse|0;
 $crc = $crc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $chunks = 0, $out = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $fd;
 $6 = $gz&1;
 $3 = $6;
 $7 = $sparse&1;
 $4 = $7;
 $8 = $crc&1;
 $5 = $8;
 $9 = $1;
 $10 = (_sparse_count_chunks($9)|0);
 $chunks = $10;
 $11 = $2;
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = (($14) + 8|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $3;
 $23 = $22&1;
 $24 = $23&1;
 $25 = $4;
 $26 = $25&1;
 $27 = $26&1;
 $28 = $chunks;
 $29 = $5;
 $30 = $29&1;
 $31 = $30&1;
 $32 = (_output_file_open_fd($11,$13,$18,$21,$24,$27,$28,$31)|0);
 $out = $32;
 $33 = $out;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $1;
  $36 = $out;
  $37 = (_write_all_blocks($35,$36)|0);
  $ret = $37;
  $38 = $out;
  _output_file_close($38);
  $39 = $ret;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $0 = -12;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _write_all_blocks($s,$out) {
 $s = $s|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $bb = 0, $blocks = 0, $last_block = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $s;
 $1 = $out;
 $last_block = 0;
 $2 = $0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_backed_block_iter_new($4)|0);
 $bb = $5;
 while(1) {
  $6 = $bb;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $bb;
  $9 = (_backed_block_block($8)|0);
  $10 = $last_block;
  $11 = ($9>>>0)>($10>>>0);
  if ($11) {
   $12 = $bb;
   $13 = (_backed_block_block($12)|0);
   $14 = $last_block;
   $15 = (($13) - ($14))|0;
   $blocks = $15;
   $16 = $1;
   $17 = $blocks;
   $18 = $0;
   $19 = HEAP32[$18>>2]|0;
   $20 = (___muldi3(($17|0),0,($19|0),0)|0);
   $21 = tempRet0;
   (_write_skip_chunk($16,$20,$21)|0);
  }
  $22 = $1;
  $23 = $bb;
  _sparse_file_write_block($22,$23);
  $24 = $bb;
  $25 = (_backed_block_block($24)|0);
  $26 = $bb;
  $27 = (_backed_block_len($26)|0);
  $28 = $0;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + ($29))|0;
  $31 = (($30) - 1)|0;
  $32 = $0;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31>>>0) / ($33>>>0))&-1;
  $35 = (($25) + ($34))|0;
  $last_block = $35;
  $36 = $bb;
  $37 = (_backed_block_iter_next($36)|0);
  $bb = $37;
 }
 $38 = $0;
 $39 = (($38) + 8|0);
 $40 = $39;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = $last_block;
 $47 = $0;
 $48 = HEAP32[$47>>2]|0;
 $49 = (___muldi3(($46|0),0,($48|0),0)|0);
 $50 = tempRet0;
 $51 = (_i64Subtract(($42|0),($45|0),($49|0),($50|0))|0);
 $52 = tempRet0;
 $53 = $pad;
 $54 = $53;
 HEAP32[$54>>2] = $51;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = $52;
 $57 = $pad;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($57) + 4)|0;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)>(0);
 $64 = ($59>>>0)>=(0);
 $65 = ($62|0)==(0);
 $66 = $65 & $64;
 $67 = $63 | $66;
 if (!($67)) {
  ___assert_fail((6168|0),(6184|0),143,(6208|0));
  // unreachable;
 }
 $68 = $pad;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)>(0);
 $75 = ($70>>>0)>(0);
 $76 = ($73|0)==(0);
 $77 = $76 & $75;
 $78 = $74 | $77;
 if (!($78)) {
  STACKTOP = sp;return 0;
 }
 $79 = $1;
 $80 = $pad;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($80) + 4)|0;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 (_write_skip_chunk($79,$82,$85)|0);
 STACKTOP = sp;return 0;
}
function _sparse_file_write_block($out,$bb) {
 $out = $out|0;
 $bb = $bb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $bb;
 $2 = $1;
 $3 = (_backed_block_type($2)|0);
 if ((($3|0) == 2)) {
  $17 = $0;
  $18 = $1;
  $19 = (_backed_block_len($18)|0);
  $20 = $1;
  $21 = (_backed_block_fd($20)|0);
  $22 = $1;
  $23 = (_backed_block_file_offset($22)|0);
  $24 = tempRet0;
  (_write_fd_chunk($17,$19,$21,$23,$24)|0);
  STACKTOP = sp;return;
 } else if ((($3|0) == 1)) {
  $9 = $0;
  $10 = $1;
  $11 = (_backed_block_len($10)|0);
  $12 = $1;
  $13 = (_backed_block_filename($12)|0);
  $14 = $1;
  $15 = (_backed_block_file_offset($14)|0);
  $16 = tempRet0;
  (_write_file_chunk($9,$11,$13,$15,$16)|0);
  STACKTOP = sp;return;
 } else if ((($3|0) == 3)) {
  $25 = $0;
  $26 = $1;
  $27 = (_backed_block_len($26)|0);
  $28 = $1;
  $29 = (_backed_block_fill_val($28)|0);
  (_write_fill_chunk($25,$27,$29)|0);
  STACKTOP = sp;return;
 } else if ((($3|0) == 0)) {
  $4 = $0;
  $5 = $1;
  $6 = (_backed_block_len($5)|0);
  $7 = $1;
  $8 = (_backed_block_data($7)|0);
  (_write_data_chunk($4,$6,$8)|0);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _backed_block_iter_new($bbl) {
 $bbl = $bbl|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bbl;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _backed_block_iter_next($bb) {
 $bb = $bb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bb;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _backed_block_len($bb) {
 $bb = $bb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bb;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _backed_block_block($bb) {
 $bb = $bb|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bb;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _backed_block_data($bb) {
 $bb = $bb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bb;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((6232|0),(6264|0),77,(6296|0));
  // unreachable;
 }
 return (0)|0;
}
function _backed_block_filename($bb) {
 $bb = $bb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bb;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((6320|0),(6264|0),83,(6352|0));
  // unreachable;
 }
 return (0)|0;
}
function _backed_block_fd($bb) {
 $bb = $bb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bb;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((6376|0),(6264|0),89,(6408|0));
  // unreachable;
 }
 return (0)|0;
}
function _backed_block_file_offset($bb) {
 $bb = $bb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = $bb;
 $2 = $1;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if (!($5)) {
  $6 = $1;
  $7 = (($6) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(2);
  if (!($9)) {
   ___assert_fail((6424|0),(6264|0),95,(6488|0));
   // unreachable;
  }
 }
 $10 = $1;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if ($13) {
  $14 = $1;
  $15 = (($14) + 16|0);
  $16 = (($15) + 8|0);
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = $0;
  $24 = $23;
  HEAP32[$24>>2] = $19;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $22;
  $40 = $0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  tempRet0 = $45;
  STACKTOP = sp;return ($42|0);
 } else {
  $27 = $1;
  $28 = (($27) + 16|0);
  $29 = (($28) + 8|0);
  $30 = $29;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = $0;
  $37 = $36;
  HEAP32[$37>>2] = $32;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $35;
  $40 = $0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  tempRet0 = $45;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _backed_block_fill_val($bb) {
 $bb = $bb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bb;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(3);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((6520|0),(6264|0),105,(6552|0));
  // unreachable;
 }
 return (0)|0;
}
function _backed_block_type($bb) {
 $bb = $bb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bb;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _backed_block_destroy($bb) {
 $bb = $bb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bb;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  _free($7);
 }
 $8 = $0;
 _free($8);
 STACKTOP = sp;return;
}
function _backed_block_list_new($block_size) {
 $block_size = $block_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $block_size;
 $1 = (_calloc(12,1)|0);
 $b = $1;
 $2 = $0;
 $3 = $b;
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = $b;
 STACKTOP = sp;return ($5|0);
}
function _backed_block_list_destroy($bbl) {
 $bbl = $bbl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bb = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bbl;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $13 = $0;
  _free($13);
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $bb = $5;
 while(1) {
  $6 = $bb;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $bb;
  $9 = (($8) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $bb;
  _backed_block_destroy($11);
  $12 = $next;
  $bb = $12;
 }
 $13 = $0;
 _free($13);
 STACKTOP = sp;return;
}
function _backed_block_add_data($bbl,$data,$len,$block) {
 $bbl = $bbl|0;
 $data = $data|0;
 $len = $len|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $bbl;
 $2 = $data;
 $3 = $len;
 $4 = $block;
 $5 = (_calloc(1,40)|0);
 $bb = $5;
 $6 = $bb;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = -12;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $8 = $4;
  $9 = $bb;
  HEAP32[$9>>2] = $8;
  $10 = $3;
  $11 = $bb;
  $12 = (($11) + 4|0);
  HEAP32[$12>>2] = $10;
  $13 = $bb;
  $14 = (($13) + 8|0);
  HEAP32[$14>>2] = 0;
  $15 = $2;
  $16 = $bb;
  $17 = (($16) + 16|0);
  HEAP32[$17>>2] = $15;
  $18 = $bb;
  $19 = (($18) + 32|0);
  HEAP32[$19>>2] = 0;
  $20 = $1;
  $21 = $bb;
  $22 = (_queue_bb($20,$21)|0);
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _backed_block_add_file($bbl,$filename,$0,$1,$len,$block) {
 $bbl = $bbl|0;
 $filename = $filename|0;
 $0 = $0|0;
 $1 = $1|0;
 $len = $len|0;
 $block = $block|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $bb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $3 = $bbl;
 $4 = $filename;
 $8 = $5;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $6 = $len;
 $7 = $block;
 $12 = (_calloc(1,40)|0);
 $bb = $12;
 $13 = $bb;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $2 = -12;
  $44 = $2;
  STACKTOP = sp;return ($44|0);
 } else {
  $15 = $7;
  $16 = $bb;
  HEAP32[$16>>2] = $15;
  $17 = $6;
  $18 = $bb;
  $19 = (($18) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = $bb;
  $21 = (($20) + 8|0);
  HEAP32[$21>>2] = 1;
  $22 = $4;
  $23 = (___strdup($22)|0);
  $24 = $bb;
  $25 = (($24) + 16|0);
  HEAP32[$25>>2] = $23;
  $26 = $5;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = $bb;
  $33 = (($32) + 16|0);
  $34 = (($33) + 8|0);
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $28;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $31;
  $39 = $bb;
  $40 = (($39) + 32|0);
  HEAP32[$40>>2] = 0;
  $41 = $3;
  $42 = $bb;
  $43 = (_queue_bb($41,$42)|0);
  $2 = $43;
  $44 = $2;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _queue_bb($bbl,$new_bb) {
 $bbl = $bbl|0;
 $new_bb = $new_bb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $bb = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $bbl;
 $2 = $new_bb;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = $2;
  $7 = $1;
  HEAP32[$7>>2] = $6;
  $0 = 0;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = (($16) + 32|0);
  HEAP32[$17>>2] = $15;
  $18 = $2;
  $19 = $1;
  HEAP32[$19>>2] = $18;
  $0 = 0;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $20 = $1;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $2;
  $25 = HEAP32[$24>>2]|0;
  $26 = $1;
  $27 = (($26) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($25>>>0)>($29>>>0);
  if ($30) {
   $31 = $1;
   $32 = (($31) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $bb = $33;
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $34 = $1;
  $35 = HEAP32[$34>>2]|0;
  $bb = $35;
 }
 $36 = $2;
 $37 = $1;
 $38 = (($37) + 4|0);
 HEAP32[$38>>2] = $36;
 while(1) {
  $39 = $bb;
  $40 = (($39) + 32|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0|0);
  if ($42) {
   $43 = $bb;
   $44 = (($43) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = HEAP32[$45>>2]|0;
   $47 = $2;
   $48 = HEAP32[$47>>2]|0;
   $49 = ($46>>>0)<($48>>>0);
   $77 = $49;
  } else {
   $77 = 0;
  }
  if (!($77)) {
   break;
  }
  $50 = $bb;
  $51 = (($50) + 32|0);
  $52 = HEAP32[$51>>2]|0;
  $bb = $52;
 }
 $53 = $bb;
 $54 = (($53) + 32|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0|0);
 if ($56) {
  $57 = $2;
  $58 = $bb;
  $59 = (($58) + 32|0);
  HEAP32[$59>>2] = $57;
 } else {
  $60 = $bb;
  $61 = (($60) + 32|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $2;
  $64 = (($63) + 32|0);
  HEAP32[$64>>2] = $62;
  $65 = $2;
  $66 = $bb;
  $67 = (($66) + 32|0);
  HEAP32[$67>>2] = $65;
 }
 $68 = $1;
 $69 = $2;
 $70 = $2;
 $71 = (($70) + 32|0);
 $72 = HEAP32[$71>>2]|0;
 (_merge_bb($68,$69,$72)|0);
 $73 = $1;
 $74 = $bb;
 $75 = $2;
 (_merge_bb($73,$74,$75)|0);
 $0 = 0;
 $76 = $0;
 STACKTOP = sp;return ($76|0);
}
function _merge_bb($bbl,$a,$b) {
 $bbl = $bbl|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $bbl;
 $2 = $a;
 $3 = $b;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $3;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $2;
   $9 = HEAP32[$8>>2]|0;
   $10 = $3;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if (!($12)) {
    ___assert_fail((6576|0),(6264|0),201,(6600|0));
    // unreachable;
   }
   $13 = $2;
   $14 = (($13) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $3;
   $17 = (($16) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($15|0)!=($18|0);
   if ($19) {
    $0 = -22;
    $123 = $0;
    STACKTOP = sp;return ($123|0);
   }
   $20 = $2;
   $21 = (($20) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $1;
   $24 = (($23) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($22>>>0) / ($25>>>0))&-1;
   $block_len = $26;
   $27 = $2;
   $28 = HEAP32[$27>>2]|0;
   $29 = $block_len;
   $30 = (($28) + ($29))|0;
   $31 = $3;
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)!=($32|0);
   if ($33) {
    $0 = -22;
    $123 = $0;
    STACKTOP = sp;return ($123|0);
   }
   $34 = $2;
   $35 = (($34) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   do {
    if ((($36|0) == 3)) {
     $37 = $2;
     $38 = (($37) + 16|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $3;
     $41 = (($40) + 16|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($39|0)!=($42|0);
     if (!($43)) {
      break;
     }
     $0 = -22;
     $123 = $0;
     STACKTOP = sp;return ($123|0);
    } else if ((($36|0) == 1)) {
     $44 = $2;
     $45 = (($44) + 16|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $3;
     $48 = (($47) + 16|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($46|0)!=($49|0);
     if (!($50)) {
      $51 = $2;
      $52 = (($51) + 16|0);
      $53 = (($52) + 8|0);
      $54 = $53;
      $55 = $54;
      $56 = HEAP32[$55>>2]|0;
      $57 = (($54) + 4)|0;
      $58 = $57;
      $59 = HEAP32[$58>>2]|0;
      $60 = $2;
      $61 = (($60) + 4|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = (_i64Add(($56|0),($59|0),($62|0),0)|0);
      $64 = tempRet0;
      $65 = $3;
      $66 = (($65) + 16|0);
      $67 = (($66) + 8|0);
      $68 = $67;
      $69 = $68;
      $70 = HEAP32[$69>>2]|0;
      $71 = (($68) + 4)|0;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = ($63|0)!=($70|0);
      $75 = ($64|0)!=($73|0);
      $76 = $74 | $75;
      if (!($76)) {
       break;
      }
     }
     $0 = -22;
     $123 = $0;
     STACKTOP = sp;return ($123|0);
    } else if ((($36|0) == 0)) {
     $0 = -22;
     $123 = $0;
     STACKTOP = sp;return ($123|0);
    } else if ((($36|0) == 2)) {
     $77 = $2;
     $78 = (($77) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $3;
     $81 = (($80) + 16|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($79|0)!=($82|0);
     if (!($83)) {
      $84 = $2;
      $85 = (($84) + 16|0);
      $86 = (($85) + 8|0);
      $87 = $86;
      $88 = $87;
      $89 = HEAP32[$88>>2]|0;
      $90 = (($87) + 4)|0;
      $91 = $90;
      $92 = HEAP32[$91>>2]|0;
      $93 = $2;
      $94 = (($93) + 4|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (_i64Add(($89|0),($92|0),($95|0),0)|0);
      $97 = tempRet0;
      $98 = $3;
      $99 = (($98) + 16|0);
      $100 = (($99) + 8|0);
      $101 = $100;
      $102 = $101;
      $103 = HEAP32[$102>>2]|0;
      $104 = (($101) + 4)|0;
      $105 = $104;
      $106 = HEAP32[$105>>2]|0;
      $107 = ($96|0)!=($103|0);
      $108 = ($97|0)!=($106|0);
      $109 = $107 | $108;
      if (!($109)) {
       break;
      }
     }
     $0 = -22;
     $123 = $0;
     STACKTOP = sp;return ($123|0);
    }
   } while(0);
   $110 = $3;
   $111 = (($110) + 4|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $2;
   $114 = (($113) + 4|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (($115) + ($112))|0;
   HEAP32[$114>>2] = $116;
   $117 = $3;
   $118 = (($117) + 32|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $2;
   $121 = (($120) + 32|0);
   HEAP32[$121>>2] = $119;
   $122 = $3;
   _backed_block_destroy($122);
   $0 = 0;
   $123 = $0;
   STACKTOP = sp;return ($123|0);
  }
 }
 $0 = -22;
 $123 = $0;
 STACKTOP = sp;return ($123|0);
}
function _write_sparse_end_chunk($out) {
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk_header = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $chunk_header = sp + 4|0;
 $1 = $out;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   HEAP16[$chunk_header>>1] = -13628;
   $6 = (($chunk_header) + 2|0);
   HEAP16[$6>>1] = 0;
   $7 = (($chunk_header) + 4|0);
   HEAP32[$7>>2] = 0;
   $8 = (($chunk_header) + 8|0);
   HEAP32[$8>>2] = 16;
   $9 = $1;
   $10 = (($9) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $1;
   $15 = (FUNCTION_TABLE_iiii[$13 & 63]($14,$chunk_header,12)|0);
   $ret = $15;
   $16 = $ret;
   $17 = ($16|0)<(0);
   if ($17) {
    $18 = $ret;
    $0 = $18;
    $34 = $0;
    STACKTOP = sp;return ($34|0);
   }
   $19 = $1;
   $20 = (($19) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $1;
   $25 = $1;
   $26 = (($25) + 12|0);
   (FUNCTION_TABLE_iiii[$23 & 63]($24,$26,4)|0);
   $27 = $ret;
   $28 = ($27|0)<(0);
   if (!($28)) {
    $30 = $1;
    $31 = (($30) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + 1)|0;
    HEAP32[$31>>2] = $33;
    break;
   }
   $29 = $ret;
   $0 = $29;
   $34 = $0;
   STACKTOP = sp;return ($34|0);
  }
 } while(0);
 $0 = 0;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _write_normal_end_chunk($out) {
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $0;
 $8 = (($7) + 32|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_iiii[$5 & 63]($6,$11,$14)|0);
 STACKTOP = sp;return ($15|0);
}
function _output_file_close($out) {
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 (FUNCTION_TABLE_ii[$5 & 63]($6)|0);
 $7 = $0;
 $8 = (($7) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 FUNCTION_TABLE_vi[$11 & 63]($12);
 STACKTOP = sp;return;
}
function _output_file_open_fd($fd,$block_size,$0,$1,$gz,$sparse,$chunks,$crc) {
 $fd = $fd|0;
 $block_size = $block_size|0;
 $0 = $0|0;
 $1 = $1|0;
 $gz = $gz|0;
 $sparse = $sparse|0;
 $chunks = $chunks|0;
 $crc = $crc|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $out = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $3 = $fd;
 $4 = $block_size;
 $10 = $5;
 $11 = $10;
 HEAP32[$11>>2] = $0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $6 = $gz;
 $7 = $sparse;
 $8 = $chunks;
 $9 = $crc;
 $14 = $6;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = (_output_file_new_gz()|0);
  $out = $16;
 } else {
  $17 = (_output_file_new_normal()|0);
  $out = $17;
 }
 $18 = $out;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $2 = 0;
  $44 = $2;
  STACKTOP = sp;return ($44|0);
 }
 $20 = $out;
 $21 = (($20) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = $out;
 $25 = $3;
 (FUNCTION_TABLE_iii[$23 & 63]($24,$25)|0);
 $26 = $out;
 $27 = $4;
 $28 = $5;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = ($34|0)!=(0);
 $36 = $8;
 $37 = $9;
 $38 = ($37|0)!=(0);
 $39 = (_output_file_init($26,$27,$30,$33,$35,$36,$38)|0);
 $ret = $39;
 $40 = $ret;
 $41 = ($40|0)<(0);
 if ($41) {
  $42 = $out;
  _free($42);
  $2 = 0;
  $44 = $2;
  STACKTOP = sp;return ($44|0);
 } else {
  $43 = $out;
  $2 = $43;
  $44 = $2;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _write_data_chunk($out,$len,$data) {
 $out = $out|0;
 $len = $len|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $len;
 $2 = $data;
 $3 = $0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = (FUNCTION_TABLE_iiii[$6 & 63]($7,$8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _write_fill_chunk($out,$len,$fill_val) {
 $out = $out|0;
 $len = $len|0;
 $fill_val = $fill_val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $len;
 $2 = $fill_val;
 $3 = $0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = (FUNCTION_TABLE_iiii[$7 & 63]($8,$9,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function _write_fd_chunk($out,$len,$fd,$0,$1) {
 $out = $out|0;
 $len = $len|0;
 $fd = $fd|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $aligned_diff = 0, $aligned_offset = 0, $buffer_size = 0, $data = 0, $ptr = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 8|0;
 $aligned_offset = sp;
 $3 = $out;
 $4 = $len;
 $5 = $fd;
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = $6;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $13 & -4096;
 $18 = $aligned_offset;
 $19 = $18;
 HEAP32[$19>>2] = $17;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $16;
 $22 = $6;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = $aligned_offset;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (_i64Subtract(($24|0),($27|0),($30|0),($33|0))|0);
 $35 = tempRet0;
 $aligned_diff = $34;
 $36 = $4;
 $37 = $aligned_diff;
 $38 = (($36) + ($37))|0;
 $buffer_size = $38;
 $39 = $buffer_size;
 $40 = $5;
 $41 = $aligned_offset;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (_mmap((0|0),($39|0),1,1,($40|0),($43|0))|0);
 $data = $47;
 $48 = $data;
 $49 = ($48|0)==((-1)|0);
 if ($49) {
  $50 = (___errno_location()|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (0 - ($51))|0;
  $2 = $52;
  $67 = $2;
  STACKTOP = sp;return ($67|0);
 } else {
  $53 = $data;
  $54 = $aligned_diff;
  $55 = (($53) + ($54)|0);
  $ptr = $55;
  $56 = $3;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP32[$58>>2]|0;
  $60 = $3;
  $61 = $4;
  $62 = $ptr;
  $63 = (FUNCTION_TABLE_iiii[$59 & 63]($60,$61,$62)|0);
  $ret = $63;
  $64 = $data;
  $65 = $buffer_size;
  (_munmap(($64|0),($65|0))|0);
  $66 = $ret;
  $2 = $66;
  $67 = $2;
  STACKTOP = sp;return ($67|0);
 }
 return (0)|0;
}
function _write_file_chunk($out,$len,$file,$0,$1) {
 $out = $out|0;
 $len = $len|0;
 $file = $file|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $file_fd = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $3 = $out;
 $4 = $len;
 $5 = $file;
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = $5;
 $12 = (_open(($11|0),0,($vararg_buffer|0))|0);
 $file_fd = $12;
 $13 = $file_fd;
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = (___errno_location()|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (0 - ($16))|0;
  $2 = $17;
  $30 = $2;
  STACKTOP = sp;return ($30|0);
 } else {
  $18 = $3;
  $19 = $4;
  $20 = $file_fd;
  $21 = $6;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (_write_fd_chunk($18,$19,$20,$23,$26)|0);
  $ret = $27;
  $28 = $file_fd;
  (_close(($28|0))|0);
  $29 = $ret;
  $2 = $29;
  $30 = $2;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _write_skip_chunk($out,$0,$1) {
 $out = $out|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $out;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = (($8) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = $3;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_iiii[$12 & 63]($13,$16,$19)|0);
 STACKTOP = sp;return ($20|0);
}
function _output_file_init($out,$block_size,$0,$1,$sparse,$chunks,$crc) {
 $out = $out|0;
 $block_size = $block_size|0;
 $0 = $0|0;
 $1 = $1|0;
 $sparse = $sparse|0;
 $chunks = $chunks|0;
 $crc = $crc|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ret = 0, $sparse_header = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $sparse_header = sp + 24|0;
 $3 = $out;
 $4 = $block_size;
 $9 = $5;
 $10 = $9;
 HEAP32[$10>>2] = $0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $13 = $sparse&1;
 $6 = $13;
 $7 = $chunks;
 $14 = $crc&1;
 $8 = $14;
 $15 = $5;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $3;
 $22 = (($21) + 32|0);
 $23 = $22;
 $24 = $23;
 HEAP32[$24>>2] = $17;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $20;
 $27 = $4;
 $28 = $3;
 $29 = (($28) + 28|0);
 HEAP32[$29>>2] = $27;
 $30 = $3;
 $31 = $30;
 $32 = $31;
 HEAP32[$32>>2] = 0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = 0;
 $35 = $3;
 $36 = (($35) + 8|0);
 HEAP32[$36>>2] = 0;
 $37 = $3;
 $38 = (($37) + 12|0);
 HEAP32[$38>>2] = 0;
 $39 = $8;
 $40 = $39&1;
 $41 = $40&1;
 $42 = $3;
 $43 = (($42) + 24|0);
 HEAP32[$43>>2] = $41;
 $44 = $4;
 $45 = (_calloc($44,1)|0);
 $46 = $3;
 $47 = (($46) + 40|0);
 HEAP32[$47>>2] = $45;
 $48 = $3;
 $49 = (($48) + 40|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)!=(0|0);
 if (!($51)) {
  $52 = HEAP32[_stderr>>2]|0;
  $53 = (___errno_location()|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (_strerror(($54|0))|0);
  HEAP32[$vararg_buffer>>2] = 7096;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $55;
  (_fprintf(($52|0),(7064|0),($vararg_buffer|0))|0);
  $2 = -12;
  $124 = $2;
  STACKTOP = sp;return ($124|0);
 }
 $56 = $4;
 $57 = (_calloc($56,1)|0);
 $58 = $3;
 $59 = (($58) + 44|0);
 HEAP32[$59>>2] = $57;
 $60 = $3;
 $61 = (($60) + 44|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0|0);
 L7: do {
  if ($63) {
   $68 = $6;
   $69 = $68&1;
   if ($69) {
    $70 = $3;
    $71 = (($70) + 20|0);
    HEAP32[$71>>2] = 7168;
   } else {
    $72 = $3;
    $73 = (($72) + 20|0);
    HEAP32[$73>>2] = 7152;
   }
   $74 = $6;
   $75 = $74&1;
   do {
    if ($75) {
     HEAP32[$sparse_header>>2] = -316211398;
     $76 = (($sparse_header) + 4|0);
     HEAP16[$76>>1] = 1;
     $77 = (($sparse_header) + 6|0);
     HEAP16[$77>>1] = 0;
     $78 = (($sparse_header) + 8|0);
     HEAP16[$78>>1] = 28;
     $79 = (($sparse_header) + 10|0);
     HEAP16[$79>>1] = 12;
     $80 = (($sparse_header) + 12|0);
     $81 = $3;
     $82 = (($81) + 28|0);
     $83 = HEAP32[$82>>2]|0;
     HEAP32[$80>>2] = $83;
     $84 = (($sparse_header) + 16|0);
     $85 = $3;
     $86 = (($85) + 32|0);
     $87 = $86;
     $88 = $87;
     $89 = HEAP32[$88>>2]|0;
     $90 = (($87) + 4)|0;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $93 = $3;
     $94 = (($93) + 28|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (___divdi3(($89|0),($92|0),($95|0),0)|0);
     $97 = tempRet0;
     HEAP32[$84>>2] = $96;
     $98 = (($sparse_header) + 20|0);
     $99 = $7;
     HEAP32[$98>>2] = $99;
     $100 = (($sparse_header) + 24|0);
     HEAP32[$100>>2] = 0;
     $101 = $3;
     $102 = (($101) + 24|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103|0)!=(0);
     if ($104) {
      $105 = (($sparse_header) + 20|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = (($106) + 1)|0;
      HEAP32[$105>>2] = $107;
     }
     $108 = $3;
     $109 = (($108) + 16|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = (($110) + 12|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $3;
     $114 = (FUNCTION_TABLE_iiii[$112 & 63]($113,$sparse_header,28)|0);
     $ret = $114;
     $115 = $ret;
     $116 = ($115|0)<(0);
     if (!($116)) {
      break;
     }
     $117 = $3;
     $118 = (($117) + 44|0);
     $119 = HEAP32[$118>>2]|0;
     _free($119);
     break L7;
    }
   } while(0);
   $2 = 0;
   $124 = $2;
   STACKTOP = sp;return ($124|0);
  } else {
   $64 = HEAP32[_stderr>>2]|0;
   $65 = (___errno_location()|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (_strerror(($66|0))|0);
   HEAP32[$vararg_buffer2>>2] = 7096;
   $vararg_ptr5 = (($vararg_buffer2) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $67;
   (_fprintf(($64|0),(7120|0),($vararg_buffer2|0))|0);
   $ret = -12;
  }
 } while(0);
 $120 = $3;
 $121 = (($120) + 40|0);
 $122 = HEAP32[$121>>2]|0;
 _free($122);
 $123 = $ret;
 $2 = $123;
 $124 = $2;
 STACKTOP = sp;return ($124|0);
}
function _output_file_new_gz() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $outgz = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = (_calloc(1,64)|0);
 $outgz = $1;
 $2 = $outgz;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $8 = $outgz;
  $9 = (($8) + 16|0);
  HEAP32[$9>>2] = 6880;
  $10 = $outgz;
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 $4 = HEAP32[_stderr>>2]|0;
 $5 = (___errno_location()|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_strerror(($6|0))|0);
 HEAP32[$vararg_buffer>>2] = 6856;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 (_fprintf(($4|0),(6816|0),($vararg_buffer|0))|0);
 $0 = 0;
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _output_file_new_normal() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $outn = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = (_calloc(1,64)|0);
 $outn = $1;
 $2 = $outn;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $8 = $outn;
  $9 = (($8) + 16|0);
  HEAP32[$9>>2] = 6680;
  $10 = $outn;
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 $4 = HEAP32[_stderr>>2]|0;
 $5 = (___errno_location()|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_strerror(($6|0))|0);
 HEAP32[$vararg_buffer>>2] = 6656;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 (_fprintf(($4|0),(6616|0),($vararg_buffer|0))|0);
 $0 = 0;
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _file_open($out,$fd) {
 $out = $out|0;
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $outn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $fd;
 $2 = $0;
 $outn = $2;
 $3 = $1;
 $4 = $outn;
 $5 = (($4) + 56|0);
 HEAP32[$5>>2] = $3;
 STACKTOP = sp;return 0;
}
function _file_skip($out,$0,$1) {
 $out = $out|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $outn = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $4 = sp;
 $3 = $out;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $3;
 $outn = $9;
 $10 = $outn;
 $11 = (($10) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $4;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_lseek(($12|0),($15|0),1)|0);
 $ret = $19;
 $20 = $ret;
 $21 = ($20|0)<(0);
 if (!($21)) {
  $2 = 0;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 $22 = HEAP32[_stderr>>2]|0;
 $23 = (___errno_location()|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_strerror(($24|0))|0);
 HEAP32[$vararg_buffer>>2] = 6800;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $25;
 (_fprintf(($22|0),(6776|0),($vararg_buffer|0))|0);
 $2 = -1;
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _file_pad($out,$0,$1) {
 $out = $out|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $outn = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $3 = $out;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $3;
 $outn = $9;
 $10 = $outn;
 $11 = (($10) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $4;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_ftruncate(($12|0),($15|0))|0);
 $ret = $19;
 $20 = $ret;
 $21 = ($20|0)<(0);
 if ($21) {
  $22 = (___errno_location()|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (0 - ($23))|0;
  $2 = $24;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 } else {
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _file_write($out,$data,$len) {
 $out = $out|0;
 $data = $data|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $outn = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $out;
 $2 = $data;
 $3 = $len;
 $4 = $1;
 $outn = $4;
 $5 = $outn;
 $6 = (($5) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = $3;
 $10 = (_write(($7|0),($8|0),($9|0))|0);
 $ret = $10;
 $11 = $ret;
 $12 = ($11|0)<(0);
 if ($12) {
  $13 = HEAP32[_stderr>>2]|0;
  $14 = (___errno_location()|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_strerror(($15|0))|0);
  HEAP32[$vararg_buffer>>2] = 6728;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  (_fprintf(($13|0),(6704|0),($vararg_buffer|0))|0);
  $0 = -1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $17 = $ret;
 $18 = $3;
 $19 = ($17|0)<($18|0);
 if (!($19)) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $20 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer2>>2] = 6728;
 (_fprintf(($20|0),(6744|0),($vararg_buffer2|0))|0);
 $0 = -1;
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _file_close($out) {
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $outn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $0;
 $outn = $1;
 $2 = $outn;
 _free($2);
 STACKTOP = sp;return;
}
function _gz_file_open($out,$fd) {
 $out = $out|0;
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $outgz = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $out;
 $2 = $fd;
 $3 = $1;
 $outgz = $3;
 $4 = $2;
 $5 = (_gzdopen($4,7016)|0);
 $6 = $outgz;
 $7 = (($6) + 56|0);
 HEAP32[$7>>2] = $5;
 $8 = $outgz;
 $9 = (($8) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $12 = HEAP32[_stderr>>2]|0;
 $13 = (___errno_location()|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_strerror(($14|0))|0);
 HEAP32[$vararg_buffer>>2] = 7048;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 (_fprintf(($12|0),(7024|0),($vararg_buffer|0))|0);
 $16 = (___errno_location()|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (0 - ($17))|0;
 $0 = $18;
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _gz_file_skip($out,$0,$1) {
 $out = $out|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $outgz = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $4 = sp;
 $3 = $out;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $3;
 $outgz = $9;
 $10 = $outgz;
 $11 = (($10) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $4;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_gzseek($12,$15,1)|0);
 $ret = $19;
 $20 = $ret;
 $21 = ($20|0)<(0);
 if (!($21)) {
  $2 = 0;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 $22 = HEAP32[_stderr>>2]|0;
 $23 = (___errno_location()|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_strerror(($24|0))|0);
 HEAP32[$vararg_buffer>>2] = 7000;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $25;
 (_fprintf(($22|0),(6976|0),($vararg_buffer|0))|0);
 $2 = -1;
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _gz_file_pad($out,$0,$1) {
 $out = $out|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $outgz = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $3 = $out;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $3;
 $outgz = $9;
 $10 = $outgz;
 $11 = (($10) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_gztell($12)|0);
 $ret = $13;
 $14 = $ret;
 $15 = ($14|0)<(0);
 if ($15) {
  $2 = -1;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 $16 = $ret;
 $17 = ($16|0)<(0);
 $18 = $17 << 31 >> 31;
 $19 = $4;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($18|0)>($24|0);
 $26 = ($16>>>0)>=($21>>>0);
 $27 = ($18|0)==($24|0);
 $28 = $27 & $26;
 $29 = $25 | $28;
 if ($29) {
  $2 = 0;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 $30 = $outgz;
 $31 = (($30) + 56|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $4;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (_i64Subtract(($35|0),($38|0),1,0)|0);
 $40 = tempRet0;
 $41 = (_gzseek($32,$39,0)|0);
 $ret = $41;
 $42 = $ret;
 $43 = ($42|0)<(0);
 if ($43) {
  $2 = -1;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 } else {
  $44 = $outgz;
  $45 = (($44) + 56|0);
  $46 = HEAP32[$45>>2]|0;
  (_gzwrite($46,22304,1)|0);
  $2 = 0;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _gz_file_write($out,$data,$len) {
 $out = $out|0;
 $data = $data|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $outgz = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $out;
 $2 = $data;
 $3 = $len;
 $4 = $1;
 $outgz = $4;
 $5 = $outgz;
 $6 = (($5) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = $3;
 $10 = (_gzwrite($7,$8,$9)|0);
 $ret = $10;
 $11 = $ret;
 $12 = ($11|0)<(0);
 if ($12) {
  $13 = HEAP32[_stderr>>2]|0;
  $14 = (___errno_location()|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_strerror(($15|0))|0);
  HEAP32[$vararg_buffer>>2] = 6928;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  (_fprintf(($13|0),(6904|0),($vararg_buffer|0))|0);
  $0 = -1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $17 = $ret;
 $18 = $3;
 $19 = ($17|0)<($18|0);
 if (!($19)) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $20 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer2>>2] = 6928;
 (_fprintf(($20|0),(6944|0),($vararg_buffer2|0))|0);
 $0 = -1;
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _gz_file_close($out) {
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $outgz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $0;
 $outgz = $1;
 $2 = $outgz;
 $3 = (($2) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 (_gzclose($4)|0);
 $5 = $outgz;
 _free($5);
 STACKTOP = sp;return;
}
function _write_normal_data_chunk($out,$len,$data) {
 $out = $out|0;
 $len = $len|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, $rnd_up_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $out;
 $2 = $len;
 $3 = $data;
 $4 = $1;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = $1;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10))|0;
 $12 = (($11) - 1)|0;
 $13 = $1;
 $14 = (($13) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12>>>0) / ($15>>>0))&-1;
 $17 = Math_imul($6, $16)|0;
 $rnd_up_len = $17;
 $18 = $1;
 $19 = (($18) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $1;
 $24 = $3;
 $25 = $2;
 $26 = (FUNCTION_TABLE_iiii[$22 & 63]($23,$24,$25)|0);
 $ret = $26;
 $27 = $ret;
 $28 = ($27|0)<(0);
 if ($28) {
  $29 = $ret;
  $0 = $29;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $30 = $rnd_up_len;
 $31 = $2;
 $32 = ($30>>>0)>($31>>>0);
 if ($32) {
  $33 = $1;
  $34 = (($33) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $1;
  $39 = $rnd_up_len;
  $40 = $2;
  $41 = (($39) - ($40))|0;
  $42 = (FUNCTION_TABLE_iiii[$37 & 63]($38,$41,0)|0);
  $ret = $42;
 }
 $43 = $ret;
 $0 = $43;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _write_normal_fill_chunk($out,$len,$fill_val) {
 $out = $out|0;
 $len = $len|0;
 $fill_val = $fill_val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_a = 0, $_b = 0, $i = 0, $ret = 0, $write_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $out;
 $2 = $len;
 $3 = $fill_val;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = (($6) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8>>>0) / 4)&-1;
  $10 = ($5>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $3;
  $12 = $i;
  $13 = $1;
  $14 = (($13) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12<<2)|0);
  HEAP32[$16>>2] = $11;
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 while(1) {
  $19 = $2;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   label = 13;
   break;
  }
  $21 = $2;
  $_a = $21;
  $22 = $1;
  $23 = (($22) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $_b = $24;
  $25 = $_a;
  $26 = $_b;
  $27 = ($25>>>0)<($26>>>0);
  if ($27) {
   $28 = $_a;
   $30 = $28;
  } else {
   $29 = $_b;
   $30 = $29;
  }
  $4 = $30;
  $31 = $4;
  $write_len = $31;
  $32 = $1;
  $33 = (($32) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $1;
  $38 = $1;
  $39 = (($38) + 44|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $write_len;
  $42 = (FUNCTION_TABLE_iiii[$36 & 63]($37,$40,$41)|0);
  $ret = $42;
  $43 = $ret;
  $44 = ($43|0)<(0);
  if ($44) {
   label = 11;
   break;
  }
  $46 = $write_len;
  $47 = $2;
  $48 = (($47) - ($46))|0;
  $2 = $48;
 }
 if ((label|0) == 11) {
  $45 = $ret;
  $0 = $45;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _write_normal_skip_chunk($out,$0,$1) {
 $out = $out|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $out;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = (($8) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = $3;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_iiii[$12 & 63]($13,$16,$19)|0);
 STACKTOP = sp;return ($20|0);
}
function _write_sparse_data_chunk($out,$len,$data) {
 $out = $out|0;
 $len = $len|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chunk_header = 0, $ret = 0, $rnd_up_len = 0, $zero_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $chunk_header = sp + 12|0;
 $1 = $out;
 $2 = $len;
 $3 = $data;
 $4 = $1;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = $1;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10))|0;
 $12 = (($11) - 1)|0;
 $13 = $1;
 $14 = (($13) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12>>>0) / ($15>>>0))&-1;
 $17 = Math_imul($6, $16)|0;
 $rnd_up_len = $17;
 $18 = $rnd_up_len;
 $19 = $2;
 $20 = (($18) - ($19))|0;
 $zero_len = $20;
 HEAP16[$chunk_header>>1] = -13631;
 $21 = (($chunk_header) + 2|0);
 HEAP16[$21>>1] = 0;
 $22 = $rnd_up_len;
 $23 = $1;
 $24 = (($23) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($22>>>0) / ($25>>>0))&-1;
 $27 = (($chunk_header) + 4|0);
 HEAP32[$27>>2] = $26;
 $28 = $rnd_up_len;
 $29 = (12 + ($28))|0;
 $30 = (($chunk_header) + 8|0);
 HEAP32[$30>>2] = $29;
 $31 = $1;
 $32 = (($31) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $1;
 $37 = (FUNCTION_TABLE_iiii[$35 & 63]($36,$chunk_header,12)|0);
 $ret = $37;
 $38 = $ret;
 $39 = ($38|0)<(0);
 if ($39) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $40 = $1;
 $41 = (($40) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $1;
 $46 = $3;
 $47 = $2;
 $48 = (FUNCTION_TABLE_iiii[$44 & 63]($45,$46,$47)|0);
 $ret = $48;
 $49 = $ret;
 $50 = ($49|0)<(0);
 if ($50) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $51 = $zero_len;
 $52 = ($51|0)!=(0);
 do {
  if ($52) {
   $53 = $1;
   $54 = (($53) + 16|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $1;
   $59 = $1;
   $60 = (($59) + 40|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $zero_len;
   $63 = (FUNCTION_TABLE_iiii[$57 & 63]($58,$61,$62)|0);
   $ret = $63;
   $64 = $ret;
   $65 = ($64|0)<(0);
   if (!($65)) {
    break;
   }
   $0 = -1;
   $110 = $0;
   STACKTOP = sp;return ($110|0);
  }
 } while(0);
 $66 = $1;
 $67 = (($66) + 24|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $1;
  $71 = (($70) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $3;
  $74 = $2;
  $75 = (_sparse_crc32($72,$73,$74)|0);
  $76 = $1;
  $77 = (($76) + 12|0);
  HEAP32[$77>>2] = $75;
  $78 = $zero_len;
  $79 = ($78|0)!=(0);
  if ($79) {
   $80 = $1;
   $81 = (($80) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $1;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $zero_len;
   $87 = (_sparse_crc32($82,$85,$86)|0);
   $88 = $1;
   $89 = (($88) + 12|0);
   HEAP32[$89>>2] = $87;
  }
 }
 $90 = $rnd_up_len;
 $91 = ($90|0)<(0);
 $92 = $91 << 31 >> 31;
 $93 = $1;
 $94 = $93;
 $95 = $94;
 $96 = HEAP32[$95>>2]|0;
 $97 = (($94) + 4)|0;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = (_i64Add(($96|0),($99|0),($90|0),($92|0))|0);
 $101 = tempRet0;
 $102 = $93;
 $103 = $102;
 HEAP32[$103>>2] = $100;
 $104 = (($102) + 4)|0;
 $105 = $104;
 HEAP32[$105>>2] = $101;
 $106 = $1;
 $107 = (($106) + 8|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + 1)|0;
 HEAP32[$107>>2] = $109;
 $0 = 0;
 $110 = $0;
 STACKTOP = sp;return ($110|0);
}
function _write_sparse_fill_chunk($out,$len,$fill_val) {
 $out = $out|0;
 $len = $len|0;
 $fill_val = $fill_val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $chunk_header = 0, $count = 0, $ret = 0, $rnd_up_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 24|0;
 $chunk_header = sp + 12|0;
 $1 = $out;
 $2 = $len;
 HEAP32[$3>>2] = $fill_val;
 $4 = $1;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = $1;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10))|0;
 $12 = (($11) - 1)|0;
 $13 = $1;
 $14 = (($13) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12>>>0) / ($15>>>0))&-1;
 $17 = Math_imul($6, $16)|0;
 $rnd_up_len = $17;
 HEAP16[$chunk_header>>1] = -13630;
 $18 = (($chunk_header) + 2|0);
 HEAP16[$18>>1] = 0;
 $19 = $rnd_up_len;
 $20 = $1;
 $21 = (($20) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($19>>>0) / ($22>>>0))&-1;
 $24 = (($chunk_header) + 4|0);
 HEAP32[$24>>2] = $23;
 $25 = (($chunk_header) + 8|0);
 HEAP32[$25>>2] = 16;
 $26 = $1;
 $27 = (($26) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $1;
 $32 = (FUNCTION_TABLE_iiii[$30 & 63]($31,$chunk_header,12)|0);
 $ret = $32;
 $33 = $ret;
 $34 = ($33|0)<(0);
 if ($34) {
  $0 = -1;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 $35 = $1;
 $36 = (($35) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $1;
 $41 = (FUNCTION_TABLE_iiii[$39 & 63]($40,$3,4)|0);
 $ret = $41;
 $42 = $ret;
 $43 = ($42|0)<(0);
 if ($43) {
  $0 = -1;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 $44 = $1;
 $45 = (($44) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $1;
  $49 = (($48) + 28|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50>>>0) / 4)&-1;
  $count = $51;
  while(1) {
   $52 = $count;
   $53 = (($52) + -1)|0;
   $count = $53;
   $54 = ($52|0)!=(0);
   if (!($54)) {
    break;
   }
   $55 = $1;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (_sparse_crc32($57,$3,4)|0);
   $59 = $1;
   $60 = (($59) + 12|0);
   HEAP32[$60>>2] = $58;
  }
 }
 $61 = $rnd_up_len;
 $62 = ($61|0)<(0);
 $63 = $62 << 31 >> 31;
 $64 = $1;
 $65 = $64;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (_i64Add(($67|0),($70|0),($61|0),($63|0))|0);
 $72 = tempRet0;
 $73 = $64;
 $74 = $73;
 HEAP32[$74>>2] = $71;
 $75 = (($73) + 4)|0;
 $76 = $75;
 HEAP32[$76>>2] = $72;
 $77 = $1;
 $78 = (($77) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + 1)|0;
 HEAP32[$78>>2] = $80;
 $0 = 0;
 $81 = $0;
 STACKTOP = sp;return ($81|0);
}
function _write_sparse_skip_chunk($out,$0,$1) {
 $out = $out|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $9 = 0, $chunk_header = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $4 = sp;
 $chunk_header = sp + 36|0;
 $3 = $out;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $4;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (___remdi3(($11|0),($14|0),($17|0),0)|0);
 $19 = tempRet0;
 $20 = ($18|0)!=(0);
 $21 = ($19|0)!=(0);
 $22 = $20 | $21;
 if ($22) {
  $23 = HEAP32[_stderr>>2]|0;
  $24 = $4;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = $3;
  $31 = (($30) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$vararg_buffer>>2] = 7256;
  $vararg_ptr1 = (($vararg_buffer) + 8|0);
  $33 = $vararg_ptr1;
  $34 = $33;
  HEAP32[$34>>2] = $26;
  $35 = (($33) + 4)|0;
  $36 = $35;
  HEAP32[$36>>2] = $29;
  $vararg_ptr2 = (($vararg_buffer) + 16|0);
  HEAP32[$vararg_ptr2>>2] = $32;
  (_fprintf(($23|0),(7184|0),($vararg_buffer|0))|0);
  $2 = -1;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 HEAP16[$chunk_header>>1] = -13629;
 $37 = (($chunk_header) + 2|0);
 HEAP16[$37>>1] = 0;
 $38 = $4;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $3;
 $45 = (($44) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (___divdi3(($40|0),($43|0),($46|0),0)|0);
 $48 = tempRet0;
 $49 = (($chunk_header) + 4|0);
 HEAP32[$49>>2] = $47;
 $50 = (($chunk_header) + 8|0);
 HEAP32[$50>>2] = 12;
 $51 = $3;
 $52 = (($51) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + 12|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $3;
 $57 = (FUNCTION_TABLE_iiii[$55 & 63]($56,$chunk_header,12)|0);
 $ret = $57;
 $58 = $ret;
 $59 = ($58|0)<(0);
 if ($59) {
  $2 = -1;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 } else {
  $60 = $4;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($60) + 4)|0;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = $3;
  $67 = $66;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = (($67) + 4)|0;
  $71 = $70;
  $72 = HEAP32[$71>>2]|0;
  $73 = (_i64Add(($69|0),($72|0),($62|0),($65|0))|0);
  $74 = tempRet0;
  $75 = $66;
  $76 = $75;
  HEAP32[$76>>2] = $73;
  $77 = (($75) + 4)|0;
  $78 = $77;
  HEAP32[$78>>2] = $74;
  $79 = $3;
  $80 = (($79) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + 1)|0;
  HEAP32[$80>>2] = $82;
  $2 = 0;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 return (0)|0;
}
function _sparse_crc32($crc_in,$buf,$size) {
 $crc_in = $crc_in|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $crc = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $crc_in;
 $1 = $buf;
 $2 = $size;
 $3 = $1;
 $p = $3;
 $4 = $0;
 $5 = $4 ^ -1;
 $crc = $5;
 while(1) {
  $6 = $2;
  $7 = (($6) + -1)|0;
  $2 = $7;
  $8 = ($6|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $crc;
  $10 = $p;
  $11 = (($10) + 1|0);
  $p = $11;
  $12 = HEAP8[$10>>0]|0;
  $13 = $12&255;
  $14 = $9 ^ $13;
  $15 = $14 & 255;
  $16 = (7280 + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $crc;
  $19 = $18 >>> 8;
  $20 = $17 ^ $19;
  $crc = $20;
 }
 $21 = $crc;
 $22 = $21 ^ -1;
 STACKTOP = sp;return ($22|0);
}
function _create_allocation() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alloc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_malloc(40)|0);
 $alloc = $0;
 $1 = $alloc;
 HEAP32[$1>>2] = 0;
 $2 = $alloc;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = $alloc;
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = $alloc;
 $7 = (($6) + 16|0);
 $8 = (($7) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = $alloc;
 $10 = (($9) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = $alloc;
 $12 = (($11) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = $alloc;
 $14 = (($13) + 16|0);
 $15 = (($14) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = $alloc;
 $17 = (($16) + 16|0);
 $18 = (($17) + 12|0);
 HEAP32[$18>>2] = 0;
 $19 = $alloc;
 $20 = (($19) + 32|0);
 HEAP32[$20>>2] = 0;
 $21 = $alloc;
 $22 = (($21) + 36|0);
 HEAP32[$22>>2] = 0;
 $23 = $alloc;
 STACKTOP = sp;return ($23|0);
}
function _print_blocks($f,$alloc) {
 $f = $f|0;
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $f;
 $1 = $alloc;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $reg = $3;
 while(1) {
  $4 = $reg;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $reg;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if ($9) {
   $10 = $0;
   $11 = $reg;
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$vararg_buffer>>2] = $12;
   (_fprintf(($10|0),(8304|0),($vararg_buffer|0))|0);
  } else {
   $13 = $0;
   $14 = $reg;
   $15 = HEAP32[$14>>2]|0;
   $16 = $reg;
   $17 = HEAP32[$16>>2]|0;
   $18 = $reg;
   $19 = (($18) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($17) + ($20))|0;
   $22 = (($21) - 1)|0;
   HEAP32[$vararg_buffer1>>2] = $15;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $22;
   (_fprintf(($13|0),(8312|0),($vararg_buffer1|0))|0);
  }
  $23 = $reg;
  $24 = (($23) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $reg = $25;
 }
 $26 = $0;
 (_fputc(10,($26|0))|0);
 STACKTOP = sp;return;
}
function _append_region($alloc,$block,$len,$bg_num) {
 $alloc = $alloc|0;
 $block = $block|0;
 $len = $len|0;
 $bg_num = $bg_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alloc;
 $1 = $block;
 $2 = $len;
 $3 = $bg_num;
 $4 = (_malloc(20)|0);
 $reg = $4;
 $5 = $1;
 $6 = $reg;
 HEAP32[$6>>2] = $5;
 $7 = $2;
 $8 = $reg;
 $9 = (($8) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $3;
 $11 = $reg;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = $10;
 $13 = $reg;
 $14 = (($13) + 12|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = $reg;
 _region_list_append($15,$16);
 STACKTOP = sp;return;
}
function _reduce_allocation($alloc,$len) {
 $alloc = $alloc|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $last_reg = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alloc;
 $1 = $len;
 while(1) {
  $2 = $1;
  $3 = ($2|0)!=(0);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = (($4) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $last_reg = $6;
  $7 = $last_reg;
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = ($9>>>0)>($10>>>0);
  if ($11) {
   $12 = $last_reg;
   $13 = (($12) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[((5104 + 12|0))>>2]|0;
   $16 = (($15) + (($14*52)|0)|0);
   $17 = $1;
   _free_blocks($16,$17);
   $18 = $1;
   $19 = $last_reg;
   $20 = (($19) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) - ($18))|0;
   HEAP32[$20>>2] = $22;
   $1 = 0;
  } else {
   $23 = $0;
   $24 = (($23) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $reg = $27;
   $28 = $last_reg;
   $29 = (($28) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[((5104 + 12|0))>>2]|0;
   $32 = (($31) + (($30*52)|0)|0);
   $33 = $last_reg;
   $34 = (($33) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   _free_blocks($32,$35);
   $36 = $last_reg;
   $37 = (($36) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $1;
   $40 = (($39) - ($38))|0;
   $1 = $40;
   $41 = $reg;
   $42 = ($41|0)!=(0|0);
   if ($42) {
    $43 = $reg;
    $44 = (($43) + 12|0);
    HEAP32[$44>>2] = 0;
   } else {
    $45 = $0;
    HEAP32[$45>>2] = 0;
    $46 = $0;
    $47 = (($46) + 4|0);
    HEAP32[$47>>2] = 0;
    $48 = $0;
    $49 = (($48) + 8|0);
    HEAP32[$49>>2] = 0;
    $50 = $0;
    $51 = (($50) + 12|0);
    HEAP32[$51>>2] = 0;
   }
   $52 = $last_reg;
   _free($52);
  }
 }
 STACKTOP = sp;return;
}
function _block_allocator_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[((5104 + 36|0))>>2]|0;
 $1 = (_calloc(52,$0)|0);
 HEAP32[((5104 + 12|0))>>2] = $1;
 $2 = HEAP32[((5104 + 12|0))>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[_stderr>>2]|0;
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_strerror(($6|0))|0);
  HEAP32[$vararg_buffer>>2] = 8320;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  (_fprintf(($4|0),(10216|0),($vararg_buffer|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = HEAP32[((5104 + 36|0))>>2]|0;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = HEAP32[((5104 + 12|0))>>2]|0;
  $13 = (($12) + (($11*52)|0)|0);
  $14 = $i;
  _init_bg($13,$14);
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 STACKTOP = sp;return;
}
function _allocate_block() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = HEAP32[((5104 + 36|0))>>2]|0;
  $3 = ($1>>>0)<($2>>>0);
  if (!($3)) {
   label = 7;
   break;
  }
  $4 = $i;
  $5 = (_ext4_allocate_blocks_from_block_group(1,$4)|0);
  $block = $5;
  $6 = $block;
  $7 = ($6|0)!=(-1);
  if ($7) {
   label = 4;
   break;
  }
  $9 = $i;
  $10 = (($9) + 1)|0;
  $i = $10;
 }
 if ((label|0) == 4) {
  $8 = $block;
  $0 = $8;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _allocate_blocks($len) {
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $alloc = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $len;
 $2 = $1;
 $3 = (_ext4_allocate_best_fit($2)|0);
 $reg = $3;
 $4 = $reg;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $6 = (_create_allocation()|0);
  $alloc = $6;
  $7 = $reg;
  $8 = $alloc;
  HEAP32[$8>>2] = $7;
  $9 = $reg;
  $10 = $alloc;
  $11 = (($10) + 4|0);
  HEAP32[$11>>2] = $9;
  $12 = $alloc;
  $13 = HEAP32[$12>>2]|0;
  $14 = $alloc;
  $15 = (($14) + 8|0);
  HEAP32[$15>>2] = $13;
  $16 = $alloc;
  $17 = (($16) + 12|0);
  HEAP32[$17>>2] = 0;
  $18 = $alloc;
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _block_allocation_num_regions($alloc) {
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alloc;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $reg = $2;
 $i = 0;
 while(1) {
  $3 = $reg;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = (($5) + 1)|0;
  $i = $6;
  $7 = $reg;
  $8 = (($7) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $reg = $9;
 }
 $10 = $i;
 STACKTOP = sp;return ($10|0);
}
function _block_allocation_len($alloc) {
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alloc;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $reg = $2;
 $i = 0;
 while(1) {
  $3 = $reg;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $reg;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $i;
  $9 = (($8) + ($7))|0;
  $i = $9;
  $10 = $reg;
  $11 = (($10) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $reg = $12;
 }
 $13 = $i;
 STACKTOP = sp;return ($13|0);
}
function _get_block($alloc,$block) {
 $alloc = $alloc|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $alloc;
 $2 = $block;
 $3 = $1;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $reg = $5;
 $6 = $1;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = (($9) + ($8))|0;
 $2 = $10;
 while(1) {
  $11 = $reg;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   label = 7;
   break;
  }
  $13 = $2;
  $14 = $reg;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13>>>0)<($16>>>0);
  if ($17) {
   label = 4;
   break;
  }
  $22 = $reg;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = (($25) - ($24))|0;
  $2 = $26;
  $27 = $reg;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $reg = $29;
 }
 if ((label|0) == 4) {
  $18 = $reg;
  $19 = HEAP32[$18>>2]|0;
  $20 = $2;
  $21 = (($19) + ($20))|0;
  $0 = $21;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _get_oob_block($alloc,$block) {
 $alloc = $alloc|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $alloc;
 $2 = $block;
 $3 = $1;
 $4 = (($3) + 16|0);
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $reg = $6;
 $7 = $1;
 $8 = (($7) + 16|0);
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = (($11) + ($10))|0;
 $2 = $12;
 while(1) {
  $13 = $reg;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 7;
   break;
  }
  $15 = $2;
  $16 = $reg;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15>>>0)<($18>>>0);
  if ($19) {
   label = 4;
   break;
  }
  $24 = $reg;
  $25 = (($24) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $2;
  $28 = (($27) - ($26))|0;
  $2 = $28;
  $29 = $reg;
  $30 = (($29) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $reg = $31;
 }
 if ((label|0) == 4) {
  $20 = $reg;
  $21 = HEAP32[$20>>2]|0;
  $22 = $2;
  $23 = (($21) + ($22))|0;
  $0 = $23;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _get_region($alloc,$block,$len) {
 $alloc = $alloc|0;
 $block = $block|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alloc;
 $1 = $block;
 $2 = $len;
 $3 = $0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = $0;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12) - ($15))|0;
 $17 = $2;
 HEAP32[$17>>2] = $16;
 STACKTOP = sp;return;
}
function _get_next_region($alloc) {
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alloc;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = (($6) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = $0;
 $9 = (($8) + 12|0);
 HEAP32[$9>>2] = 0;
 STACKTOP = sp;return;
}
function _get_free_blocks($bg) {
 $bg = $bg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bg;
 $1 = $0;
 $2 = HEAP32[((5104 + 12|0))>>2]|0;
 $3 = (($2) + (($1*52)|0)|0);
 $4 = (($3) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _last_region($alloc) {
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alloc;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _rewind_alloc($alloc) {
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alloc;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $0;
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = (($5) + 12|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _reserve_oob_blocks($alloc,$blocks) {
 $alloc = $alloc|0;
 $blocks = $blocks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $next = 0, $oob = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $alloc;
 $2 = $blocks;
 $3 = $1;
 $4 = $2;
 $5 = (_split_allocation($3,$4)|0);
 $oob = $5;
 $6 = $oob;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = -1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 while(1) {
  $8 = $oob;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $oob;
   $11 = $1;
   $12 = (($11) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($10|0)!=($13|0);
   $25 = $14;
  } else {
   $25 = 0;
  }
  if (!($25)) {
   break;
  }
  $15 = $oob;
  $16 = (($15) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $next = $17;
  $18 = $1;
  $19 = $oob;
  _region_list_remove($18,$19);
  $20 = $1;
  $21 = (($20) + 16|0);
  $22 = $oob;
  _region_list_append($21,$22);
  $23 = $next;
  $oob = $23;
 }
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _advance_blocks($alloc,$blocks) {
 $alloc = $alloc|0;
 $blocks = $blocks|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alloc;
 $1 = $blocks;
 $2 = $0;
 $3 = $1;
 $4 = (_advance_list_ptr($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _advance_oob_blocks($alloc,$blocks) {
 $alloc = $alloc|0;
 $blocks = $blocks|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alloc;
 $1 = $blocks;
 $2 = $0;
 $3 = (($2) + 16|0);
 $4 = $1;
 $5 = (_advance_list_ptr($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _append_oob_allocation($alloc,$len) {
 $alloc = $alloc|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $reg = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $alloc;
 $2 = $len;
 $3 = $2;
 $4 = (_ext4_allocate_best_fit($3)|0);
 $reg = $4;
 $5 = $reg;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[_stderr>>2]|0;
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = 8392;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  (_fprintf(($7|0),(8344|0),($vararg_buffer|0))|0);
  $9 = HEAP32[4872>>2]|0;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  while(1) {
   $11 = $reg;
   $12 = ($11|0)!=(0|0);
   if (!($12)) {
    break;
   }
   $13 = $1;
   $14 = (($13) + 16|0);
   $15 = $reg;
   _region_list_append($14,$15);
   $16 = $reg;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $reg = $18;
  }
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _get_inode($inode) {
 $inode = $inode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $bg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $inode;
 $1 = $0;
 $2 = (($1) - 1)|0;
 $0 = $2;
 $3 = $0;
 $4 = HEAP32[((4880 + 16|0))>>2]|0;
 $5 = (($3>>>0) / ($4>>>0))&-1;
 $bg = $5;
 $6 = HEAP32[((4880 + 16|0))>>2]|0;
 $7 = $0;
 $8 = (($7>>>0) % ($6>>>0))&-1;
 $0 = $8;
 $9 = $bg;
 $10 = HEAP32[((5104 + 12|0))>>2]|0;
 $11 = (($10) + (($9*52)|0)|0);
 _allocate_bg_inode_table($11);
 $12 = $bg;
 $13 = HEAP32[((5104 + 12|0))>>2]|0;
 $14 = (($13) + (($12*52)|0)|0);
 $15 = (($14) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = HEAP32[((4880 + 20|0))>>2]|0;
 $19 = Math_imul($17, $18)|0;
 $20 = (($16) + ($19)|0);
 STACKTOP = sp;return ($20|0);
}
function _get_xattr_block_for_inode($inode) {
 $inode = $inode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $block_num = 0, $result = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $inode;
 $2 = $1;
 $3 = (_xattr_list_find($2)|0);
 $block = $3;
 $4 = $block;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $block;
  $0 = $6;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $7 = (_allocate_block()|0);
 $block_num = $7;
 $8 = HEAP32[((4880 + 8|0))>>2]|0;
 $9 = (_calloc($8,1)|0);
 $block = $9;
 $10 = $block;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = HEAP32[_stderr>>2]|0;
  $13 = HEAP32[((4880 + 8|0))>>2]|0;
  HEAP32[$vararg_buffer>>2] = 8464;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  (_fprintf(($12|0),(8416|0),($vararg_buffer|0))|0);
  $14 = HEAP32[4872>>2]|0;
  $15 = ($14|0)!=(0);
  if (!($15)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $16 = $block;
 HEAP32[$16>>2] = -368967680;
 $17 = $block;
 $18 = (($17) + 4|0);
 HEAP32[$18>>2] = 1;
 $19 = $block;
 $20 = (($19) + 8|0);
 HEAP32[$20>>2] = 1;
 $21 = $1;
 $22 = (($21) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[((4880 + 8|0))>>2]|0;
 $25 = (($24>>>0) / 512)&-1;
 $26 = (($23) + ($25))|0;
 $27 = $1;
 $28 = (($27) + 28|0);
 HEAP32[$28>>2] = $26;
 $29 = $block_num;
 $30 = $1;
 $31 = (($30) + 104|0);
 HEAP32[$31>>2] = $29;
 $32 = HEAP32[5096>>2]|0;
 $33 = $block;
 $34 = HEAP32[((4880 + 8|0))>>2]|0;
 $35 = $block_num;
 $36 = (_sparse_file_add_data($32,$33,$34,$35)|0);
 $result = $36;
 $37 = $result;
 $38 = ($37|0)!=(0);
 if (!($38)) {
  $44 = $1;
  $45 = $block;
  _xattr_list_insert($44,$45);
  $46 = $block;
  $0 = $46;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $39 = HEAP32[_stderr>>2]|0;
 $40 = $result;
 HEAP32[$vararg_buffer2>>2] = 8464;
 $vararg_ptr5 = (($vararg_buffer2) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $40;
 (_fprintf(($39|0),(8496|0),($vararg_buffer2|0))|0);
 $41 = HEAP32[4872>>2]|0;
 $42 = ($41|0)!=(0);
 if (!($42)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $43 = $block;
 _free($43);
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _reserve_inodes($bg,$num) {
 $bg = $bg|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $inode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $bg;
 $2 = $num;
 $3 = $1;
 $4 = (_get_free_inodes($3)|0);
 $5 = $2;
 $6 = ($4>>>0)<($5>>>0);
 if ($6) {
  $0 = -1;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $2;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = HEAP32[((5104 + 12|0))>>2]|0;
  $12 = (($11) + (($10*52)|0)|0);
  $13 = (($12) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $i;
  $16 = (($14) + ($15))|0;
  $17 = (($16) - 1)|0;
  $inode = $17;
  $18 = $inode;
  $19 = (($18>>>0) % 8)&-1;
  $20 = 1 << $19;
  $21 = $inode;
  $22 = (($21>>>0) / 8)&-1;
  $23 = $1;
  $24 = HEAP32[((5104 + 12|0))>>2]|0;
  $25 = (($24) + (($23*52)|0)|0);
  $26 = (($25) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($22)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 | $20;
  $32 = $31&255;
  HEAP8[$28>>0] = $32;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = $1;
 $36 = HEAP32[((5104 + 12|0))>>2]|0;
 $37 = (($36) + (($35*52)|0)|0);
 $38 = (($37) + 44|0);
 $39 = HEAP32[$38>>2]|0;
 $inode = $39;
 $40 = $2;
 $41 = $1;
 $42 = HEAP32[((5104 + 12|0))>>2]|0;
 $43 = (($42) + (($41*52)|0)|0);
 $44 = (($43) + 44|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($40))|0;
 HEAP32[$44>>2] = $46;
 $47 = $2;
 $48 = $1;
 $49 = HEAP32[((5104 + 12|0))>>2]|0;
 $50 = (($49) + (($48*52)|0)|0);
 $51 = (($50) + 40|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) - ($47))|0;
 HEAP32[$51>>2] = $53;
 $54 = $inode;
 $0 = $54;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _get_free_inodes($bg) {
 $bg = $bg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bg;
 $1 = $0;
 $2 = HEAP32[((5104 + 12|0))>>2]|0;
 $3 = (($2) + (($1*52)|0)|0);
 $4 = (($3) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _allocate_inode() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bg = 0, $inode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bg = 0;
 while(1) {
  $1 = $bg;
  $2 = HEAP32[((5104 + 36|0))>>2]|0;
  $3 = ($1>>>0)<($2>>>0);
  if (!($3)) {
   label = 7;
   break;
  }
  $4 = $bg;
  $5 = (_reserve_inodes($4,1)|0);
  $inode = $5;
  $6 = $inode;
  $7 = ($6|0)!=(-1);
  if ($7) {
   label = 4;
   break;
  }
  $13 = $bg;
  $14 = (($13) + 1)|0;
  $bg = $14;
 }
 if ((label|0) == 4) {
  $8 = $bg;
  $9 = HEAP32[((4880 + 16|0))>>2]|0;
  $10 = Math_imul($8, $9)|0;
  $11 = $inode;
  $12 = (($10) + ($11))|0;
  $0 = $12;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _add_directory($inode) {
 $inode = $inode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $inode;
 $1 = $0;
 $2 = (($1) - 1)|0;
 $3 = HEAP32[((4880 + 16|0))>>2]|0;
 $4 = (($2>>>0) / ($3>>>0))&-1;
 $bg = $4;
 $5 = $bg;
 $6 = HEAP32[((5104 + 12|0))>>2]|0;
 $7 = (($6) + (($5*52)|0)|0);
 $8 = (($7) + 50|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (($10) + 1)|0;
 $12 = $11&65535;
 HEAP16[$8>>1] = $12;
 STACKTOP = sp;return;
}
function _get_directories($bg) {
 $bg = $bg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bg;
 $1 = $0;
 $2 = HEAP32[((5104 + 12|0))>>2]|0;
 $3 = (($2) + (($1*52)|0)|0);
 $4 = (($3) + 50|0);
 $5 = HEAP16[$4>>1]|0;
 STACKTOP = sp;return ($5|0);
}
function _get_bg_flags($bg) {
 $bg = $bg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bg;
 $1 = $0;
 $2 = HEAP32[((5104 + 12|0))>>2]|0;
 $3 = (($2) + (($1*52)|0)|0);
 $4 = (($3) + 48|0);
 $5 = HEAP16[$4>>1]|0;
 STACKTOP = sp;return ($5|0);
}
function _free_alloc($alloc) {
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $next = 0, $next1 = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alloc;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $reg = $2;
 while(1) {
  $3 = $reg;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $reg;
  $6 = (($5) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $next = $7;
  $8 = $reg;
  _free($8);
  $9 = $next;
  $reg = $9;
 }
 $10 = $0;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $reg = $12;
 while(1) {
  $13 = $reg;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   break;
  }
  $15 = $reg;
  $16 = (($15) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $next1 = $17;
  $18 = $reg;
  _free($18);
  $19 = $next1;
  $reg = $19;
 }
 $20 = $0;
 _free($20);
 STACKTOP = sp;return;
}
function _region_list_append($list,$reg) {
 $list = $list|0;
 $reg = $reg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $reg;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = $1;
  $6 = $0;
  HEAP32[$6>>2] = $5;
  $7 = $1;
  $8 = $0;
  $9 = (($8) + 4|0);
  HEAP32[$9>>2] = $7;
  $10 = $1;
  $11 = $0;
  $12 = (($11) + 8|0);
  HEAP32[$12>>2] = $10;
  $13 = $0;
  $14 = (($13) + 12|0);
  HEAP32[$14>>2] = 0;
  $15 = $1;
  $16 = (($15) + 16|0);
  HEAP32[$16>>2] = 0;
  $30 = $1;
  $31 = (($30) + 12|0);
  HEAP32[$31>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $17 = $1;
  $18 = $0;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 12|0);
  HEAP32[$21>>2] = $17;
  $22 = $0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  $26 = (($25) + 16|0);
  HEAP32[$26>>2] = $24;
  $27 = $1;
  $28 = $0;
  $29 = (($28) + 4|0);
  HEAP32[$29>>2] = $27;
  $30 = $1;
  $31 = (($30) + 12|0);
  HEAP32[$31>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _free_blocks($bg,$num_blocks) {
 $bg = $bg|0;
 $num_blocks = $num_blocks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bg;
 $1 = $num_blocks;
 $2 = $0;
 $3 = (($2) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - 1)|0;
 $block = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $1;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $block;
  $10 = (($9>>>0) % 8)&-1;
  $11 = 1 << $10;
  $12 = $11 ^ -1;
  $13 = $block;
  $14 = (($13>>>0) / 8)&-1;
  $15 = $0;
  $16 = (($15) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 & $12;
  $22 = $21&255;
  HEAP8[$18>>0] = $22;
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
  $25 = $block;
  $26 = (($25) + -1)|0;
  $block = $26;
 }
 $27 = $1;
 $28 = $0;
 $29 = (($28) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($27))|0;
 HEAP32[$29>>2] = $31;
 $32 = $1;
 $33 = $0;
 $34 = (($33) + 36|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) - ($32))|0;
 HEAP32[$34>>2] = $36;
 STACKTOP = sp;return;
}
function _init_bg($bg,$i) {
 $bg = $bg|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0, $header_blocks = 0, $overrun = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $bg;
 $1 = $i;
 $2 = HEAP32[((5104 + 32|0))>>2]|0;
 $3 = (2 + ($2))|0;
 $header_blocks = $3;
 $4 = $1;
 $5 = (_ext4_bg_has_super_block($4)|0);
 $6 = $0;
 $7 = (($6) + 12|0);
 HEAP32[$7>>2] = $5;
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP32[((5104 + 40|0))>>2]|0;
  $13 = (1 + ($12))|0;
  $14 = HEAP32[((4880 + 40|0))>>2]|0;
  $15 = (($13) + ($14))|0;
  $16 = $header_blocks;
  $17 = (($16) + ($15))|0;
  $header_blocks = $17;
 }
 $18 = HEAP32[((4880 + 8|0))>>2]|0;
 $19 = (_calloc($18,2)|0);
 $20 = $0;
 $21 = (($20) + 16|0);
 HEAP32[$21>>2] = $19;
 $22 = $0;
 $23 = (($22) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $0;
 $26 = (($25) + 20|0);
 HEAP32[$26>>2] = $24;
 $27 = $0;
 $28 = (($27) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[((4880 + 8|0))>>2]|0;
 $31 = (($29) + ($30)|0);
 $32 = $0;
 $33 = (($32) + 24|0);
 HEAP32[$33>>2] = $31;
 $34 = $header_blocks;
 $35 = $0;
 $36 = (($35) + 4|0);
 HEAP32[$36>>2] = $34;
 $37 = HEAP32[((5104 + 20|0))>>2]|0;
 $38 = $1;
 $39 = HEAP32[((4880 + 12|0))>>2]|0;
 $40 = Math_imul($38, $39)|0;
 $41 = (($37) + ($40))|0;
 $42 = $0;
 HEAP32[$42>>2] = $41;
 $43 = $0;
 $44 = HEAP32[$43>>2]|0;
 $block = $44;
 $45 = $0;
 $46 = (($45) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = HEAP32[((5104 + 40|0))>>2]|0;
  $50 = (1 + ($49))|0;
  $51 = HEAP32[((4880 + 40|0))>>2]|0;
  $52 = (($50) + ($51))|0;
  $53 = $block;
  $54 = (($53) + ($52))|0;
  $block = $54;
 }
 $55 = HEAP32[5096>>2]|0;
 $56 = $0;
 $57 = (($56) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[((4880 + 8|0))>>2]|0;
 $60 = $59<<1;
 $61 = $block;
 (_sparse_file_add_data($55,$58,$60,$61)|0);
 $62 = $0;
 $63 = (($62) + 8|0);
 HEAP32[$63>>2] = 0;
 $64 = HEAP32[((4880 + 12|0))>>2]|0;
 $65 = $0;
 $66 = (($65) + 32|0);
 HEAP32[$66>>2] = $64;
 $67 = $0;
 $68 = (($67) + 36|0);
 HEAP32[$68>>2] = 0;
 $69 = HEAP32[((4880 + 16|0))>>2]|0;
 $70 = $0;
 $71 = (($70) + 40|0);
 HEAP32[$71>>2] = $69;
 $72 = $0;
 $73 = (($72) + 44|0);
 HEAP32[$73>>2] = 1;
 $74 = $0;
 $75 = (($74) + 48|0);
 HEAP16[$75>>1] = 1;
 $76 = $0;
 $77 = $0;
 $78 = (($77) + 36|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $0;
 $81 = (($80) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (_reserve_blocks($76,$79,$82)|0);
 $84 = ($83|0)<(0);
 if ($84) {
  $85 = HEAP32[_stderr>>2]|0;
  $86 = $0;
  $87 = (($86) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $1;
  HEAP32[$vararg_buffer>>2] = 8904;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $88;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $89;
  (_fprintf(($85|0),(8728|0),($vararg_buffer|0))|0);
  $90 = HEAP32[4872>>2]|0;
  $91 = ($90|0)!=(0);
  if (!($91)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
 }
 $92 = $0;
 $93 = HEAP32[$92>>2]|0;
 $94 = HEAP32[((4880 + 12|0))>>2]|0;
 $95 = (($93) + ($94))|0;
 $96 = ((5104 + 24|0));
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = (0)>($101>>>0);
 $103 = ($95>>>0)>($98>>>0);
 $104 = (0)==($101|0);
 $105 = $104 & $103;
 $106 = $102 | $105;
 if (!($106)) {
  STACKTOP = sp;return;
 }
 $107 = $0;
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[((4880 + 12|0))>>2]|0;
 $110 = (($108) + ($109))|0;
 $111 = ((5104 + 24|0));
 $112 = $111;
 $113 = HEAP32[$112>>2]|0;
 $114 = (($111) + 4)|0;
 $115 = $114;
 $116 = HEAP32[$115>>2]|0;
 $117 = (_i64Subtract(($110|0),0,($113|0),($116|0))|0);
 $118 = tempRet0;
 $overrun = $117;
 $119 = $0;
 $120 = HEAP32[((4880 + 12|0))>>2]|0;
 $121 = $overrun;
 $122 = (($120) - ($121))|0;
 $123 = $overrun;
 (_reserve_blocks($119,$122,$123)|0);
 STACKTOP = sp;return;
}
function _ext4_allocate_blocks_from_block_group($len,$bg_num) {
 $len = $len|0;
 $bg_num = $bg_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bg = 0;
 var $block = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $len;
 $2 = $bg_num;
 $3 = $2;
 $4 = (_get_free_blocks($3)|0);
 $5 = $1;
 $6 = ($4>>>0)<($5>>>0);
 if ($6) {
  $0 = -1;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $7 = $2;
 $8 = HEAP32[((5104 + 12|0))>>2]|0;
 $9 = (($8) + (($7*52)|0)|0);
 $10 = (($9) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $block = $11;
 $12 = $2;
 $13 = HEAP32[((5104 + 12|0))>>2]|0;
 $14 = (($13) + (($12*52)|0)|0);
 $bg = $14;
 $15 = $bg;
 $16 = $bg;
 $17 = (($16) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = (_reserve_blocks($15,$18,$19)|0);
 $21 = ($20|0)<(0);
 if (!($21)) {
  $27 = $1;
  $28 = $2;
  $29 = HEAP32[((5104 + 12|0))>>2]|0;
  $30 = (($29) + (($28*52)|0)|0);
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($27))|0;
  HEAP32[$31>>2] = $33;
  $34 = $bg;
  $35 = HEAP32[$34>>2]|0;
  $36 = $block;
  $37 = (($35) + ($36))|0;
  $0 = $37;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $22 = HEAP32[_stderr>>2]|0;
 $23 = $1;
 $24 = $2;
 HEAP32[$vararg_buffer>>2] = 8792;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $23;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $24;
 (_fprintf(($22|0),(8728|0),($vararg_buffer|0))|0);
 $25 = HEAP32[4872>>2]|0;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $0 = -1;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function _ext4_allocate_best_fit($len) {
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $first_reg = 0, $prev_reg = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $len;
 $first_reg = 0;
 $prev_reg = 0;
 while(1) {
  $2 = $1;
  $3 = ($2>>>0)>(0);
  if (!($3)) {
   label = 10;
   break;
  }
  $4 = $1;
  $5 = (_ext4_allocate_best_fit_partial($4)|0);
  $reg = $5;
  $6 = $reg;
  $7 = ($6|0)==(0|0);
  if ($7) {
   label = 4;
   break;
  }
  $8 = $first_reg;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $10 = $reg;
   $first_reg = $10;
  }
  $11 = $prev_reg;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $reg;
   $14 = $prev_reg;
   $15 = (($14) + 12|0);
   HEAP32[$15>>2] = $13;
   $16 = $prev_reg;
   $17 = $reg;
   $18 = (($17) + 16|0);
   HEAP32[$18>>2] = $16;
  }
  $19 = $reg;
  $prev_reg = $19;
  $20 = $reg;
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $1;
  $24 = (($23) - ($22))|0;
  $1 = $24;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 10) {
  $25 = $first_reg;
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _split_allocation($alloc,$len) {
 $alloc = $alloc|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $middle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alloc;
 $1 = $len;
 $2 = $0;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 (_do_split_allocation($2,$5)|0);
 $6 = $0;
 $7 = $1;
 $8 = (_do_split_allocation($6,$7)|0);
 $middle = $8;
 $9 = $0;
 $10 = (($9) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = $middle;
 STACKTOP = sp;return ($11|0);
}
function _region_list_remove($list,$reg) {
 $list = $list|0;
 $reg = $reg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $reg;
 $2 = $1;
 $3 = (($2) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = (($9) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 12|0);
  HEAP32[$12>>2] = $8;
 }
 $13 = $1;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $1;
  $18 = (($17) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 16|0);
  HEAP32[$23>>2] = $19;
 }
 $24 = $0;
 $25 = HEAP32[$24>>2]|0;
 $26 = $1;
 $27 = ($25|0)==($26|0);
 if ($27) {
  $28 = $1;
  $29 = (($28) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $0;
  HEAP32[$31>>2] = $30;
 }
 $32 = $0;
 $33 = (($32) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $1;
 $36 = ($34|0)==($35|0);
 if (!($36)) {
  $42 = $1;
  $43 = (($42) + 12|0);
  HEAP32[$43>>2] = 0;
  $44 = $1;
  $45 = (($44) + 16|0);
  HEAP32[$45>>2] = 0;
  STACKTOP = sp;return;
 }
 $37 = $1;
 $38 = (($37) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $0;
 $41 = (($40) + 4|0);
 HEAP32[$41>>2] = $39;
 $42 = $1;
 $43 = (($42) + 12|0);
 HEAP32[$43>>2] = 0;
 $44 = $1;
 $45 = (($44) + 16|0);
 HEAP32[$45>>2] = 0;
 STACKTOP = sp;return;
}
function _advance_list_ptr($list,$blocks) {
 $list = $list|0;
 $blocks = $blocks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $list;
 $2 = $blocks;
 $3 = $1;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $reg = $5;
 while(1) {
  $6 = $reg;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $2;
   $9 = ($8|0)>(0);
   $41 = $9;
  } else {
   $41 = 0;
  }
  if (!($41)) {
   break;
  }
  $10 = $reg;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = (($15) + ($16))|0;
  $18 = ($12>>>0)>($17>>>0);
  if ($18) {
   label = 6;
   break;
  }
  $24 = $reg;
  $25 = (($24) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($26) - ($29))|0;
  $31 = $2;
  $32 = (($31) - ($30))|0;
  $2 = $32;
  $33 = $1;
  $34 = (($33) + 12|0);
  HEAP32[$34>>2] = 0;
  $35 = $reg;
  $36 = (($35) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $reg = $37;
 }
 if ((label|0) == 6) {
  $19 = $2;
  $20 = $1;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19))|0;
  HEAP32[$21>>2] = $23;
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $38 = $2;
 $39 = ($38|0)>(0);
 if ($39) {
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _allocate_bg_inode_table($bg) {
 $bg = $bg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $bg;
 $1 = $0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 2)|0;
 $block = $7;
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP32[((5104 + 40|0))>>2]|0;
  $13 = HEAP32[((4880 + 40|0))>>2]|0;
  $14 = (($12) + ($13))|0;
  $15 = (($14) + 1)|0;
  $16 = $block;
  $17 = (($16) + ($15))|0;
  $block = $17;
 }
 $18 = HEAP32[((5104 + 32|0))>>2]|0;
 $19 = HEAP32[((4880 + 8|0))>>2]|0;
 $20 = (_calloc($18,$19)|0);
 $21 = $0;
 $22 = (($21) + 28|0);
 HEAP32[$22>>2] = $20;
 $23 = $0;
 $24 = (($23) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $27 = HEAP32[_stderr>>2]|0;
  $28 = (___errno_location()|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_strerror(($29|0))|0);
  HEAP32[$vararg_buffer>>2] = 8552;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $30;
  (_fprintf(($27|0),(10216|0),($vararg_buffer|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 } else {
  $31 = HEAP32[5096>>2]|0;
  $32 = $0;
  $33 = (($32) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[((5104 + 32|0))>>2]|0;
  $36 = HEAP32[((4880 + 8|0))>>2]|0;
  $37 = Math_imul($35, $36)|0;
  $38 = $block;
  (_sparse_file_add_data($31,$34,$37,$38)|0);
  $39 = $0;
  $40 = (($39) + 48|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $42 & -2;
  $44 = $43&65535;
  HEAP16[$40>>1] = $44;
  STACKTOP = sp;return;
 }
}
function _xattr_list_find($inode) {
 $inode = $inode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $element = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $inode;
 $2 = HEAP32[((5104 + 16|0))>>2]|0;
 $element = $2;
 while(1) {
  $3 = $element;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   label = 7;
   break;
  }
  $5 = $element;
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = ($6|0)==($7|0);
  if ($8) {
   label = 4;
   break;
  }
  $12 = $element;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $element = $14;
 }
 if ((label|0) == 4) {
  $9 = $element;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $0 = $11;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _xattr_list_insert($inode,$header) {
 $inode = $inode|0;
 $header = $header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $element = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $inode;
 $1 = $header;
 $2 = (_malloc(12)|0);
 $element = $2;
 $3 = $0;
 $4 = $element;
 HEAP32[$4>>2] = $3;
 $5 = $1;
 $6 = $element;
 $7 = (($6) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = HEAP32[((5104 + 16|0))>>2]|0;
 $9 = $element;
 $10 = (($9) + 8|0);
 HEAP32[$10>>2] = $8;
 $11 = $element;
 HEAP32[((5104 + 16|0))>>2] = $11;
 STACKTOP = sp;return;
}
function _reserve_blocks($bg,$start,$num) {
 $bg = $bg|0;
 $start = $start|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $block = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $bg;
 $2 = $start;
 $3 = $num;
 $i = 0;
 $4 = $2;
 $block = $4;
 $5 = $3;
 $6 = $1;
 $7 = (($6) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5>>>0)>($8>>>0);
 if ($9) {
  $0 = -1;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $3;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = $block;
   $14 = (($13>>>0) % 8)&-1;
   $15 = ($14|0)!=(0);
   $79 = $15;
  } else {
   $79 = 0;
  }
  if (!($79)) {
   break;
  }
  $16 = $1;
  $17 = (($16) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $block;
  $20 = (_bitmap_set_bit($18,$19)|0);
  $21 = ($20|0)!=(0);
  if ($21) {
   label = 8;
   break;
  }
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
  $27 = $block;
  $28 = (($27) + 1)|0;
  $block = $28;
 }
 if ((label|0) == 8) {
  $22 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 8888;
  (_fprintf(($22|0),(8832|0),($vararg_buffer|0))|0);
  $23 = HEAP32[4872>>2]|0;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 while(1) {
  $29 = $i;
  $30 = (($29) + 8)|0;
  $31 = $3;
  $32 = $31 & -8;
  $33 = ($30>>>0)<=($32>>>0);
  if (!($33)) {
   break;
  }
  $34 = $1;
  $35 = (($34) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $block;
  $38 = (_bitmap_set_8_bits($36,$37)|0);
  $39 = ($38|0)!=(0);
  if ($39) {
   label = 18;
   break;
  }
  $43 = $i;
  $44 = (($43) + 8)|0;
  $i = $44;
  $45 = $block;
  $46 = (($45) + 8)|0;
  $block = $46;
 }
 if ((label|0) == 18) {
  $40 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer1>>2] = 8888;
  (_fprintf(($40|0),(8832|0),($vararg_buffer1|0))|0);
  $41 = HEAP32[4872>>2]|0;
  $42 = ($41|0)!=(0);
  if (!($42)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 while(1) {
  $47 = $i;
  $48 = $3;
  $49 = ($47>>>0)<($48>>>0);
  if (!($49)) {
   label = 35;
   break;
  }
  $50 = $1;
  $51 = (($50) + 20|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $block;
  $54 = (_bitmap_set_bit($52,$53)|0);
  $55 = ($54|0)!=(0);
  if ($55) {
   break;
  }
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
  $61 = $block;
  $62 = (($61) + 1)|0;
  $block = $62;
 }
 if ((label|0) == 35) {
  $63 = $3;
  $64 = $1;
  $65 = (($64) + 32|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) - ($63))|0;
  HEAP32[$65>>2] = $67;
  $68 = $2;
  $69 = $1;
  $70 = (($69) + 36|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($68|0)==($71|0);
  if ($72) {
   $73 = $2;
   $74 = $3;
   $75 = (($73) + ($74))|0;
   $76 = $1;
   $77 = (($76) + 36|0);
   HEAP32[$77>>2] = $75;
  }
  $0 = 0;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 $56 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer4>>2] = 8888;
 (_fprintf(($56|0),(8832|0),($vararg_buffer4|0))|0);
 $57 = HEAP32[4872>>2]|0;
 $58 = ($57|0)!=(0);
 if (!($58)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $0 = -1;
 $78 = $0;
 STACKTOP = sp;return ($78|0);
}
function _ext4_allocate_best_fit_partial($len) {
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $allocate_len = 0, $bg_len = 0, $block = 0, $found_bg = 0, $found_bg_len = 0, $i = 0, $reg = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $1 = $len;
 $found_bg = 0;
 $found_bg_len = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP32[((5104 + 36|0))>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = HEAP32[((5104 + 12|0))>>2]|0;
  $7 = (($6) + (($5*52)|0)|0);
  $8 = (($7) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $bg_len = $9;
  $10 = $1;
  $11 = $bg_len;
  $12 = ($10>>>0)<=($11>>>0);
  if ($12) {
   $13 = $found_bg_len;
   $14 = ($13|0)==(0);
   if ($14) {
    label = 8;
   } else {
    $15 = $bg_len;
    $16 = $found_bg_len;
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     label = 8;
    } else {
     label = 6;
    }
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $18 = $1;
   $19 = $found_bg_len;
   $20 = ($18>>>0)>($19>>>0);
   if ($20) {
    $21 = $bg_len;
    $22 = $found_bg_len;
    $23 = ($21>>>0)>($22>>>0);
    if ($23) {
     label = 8;
    }
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $24 = $i;
   $found_bg = $24;
   $25 = $bg_len;
   $found_bg_len = $25;
  }
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = $found_bg_len;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $60 = HEAP32[_stderr>>2]|0;
  $61 = $1;
  HEAP32[$vararg_buffer3>>2] = 8640;
  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $61;
  (_fprintf(($60|0),(8672|0),($vararg_buffer3|0))|0);
  $62 = HEAP32[4872>>2]|0;
  $63 = ($62|0)!=(0);
  if (!($63)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $30 = $1;
 $31 = $found_bg_len;
 $32 = ($30>>>0)<($31>>>0);
 if ($32) {
  $33 = $1;
  $35 = $33;
 } else {
  $34 = $found_bg_len;
  $35 = $34;
 }
 $allocate_len = $35;
 $36 = $allocate_len;
 $37 = $found_bg;
 $38 = (_ext4_allocate_blocks_from_block_group($36,$37)|0);
 $block = $38;
 $39 = $block;
 $40 = ($39|0)==(-1);
 if (!($40)) {
  $46 = (_malloc(20)|0);
  $reg = $46;
  $47 = $block;
  $48 = $reg;
  HEAP32[$48>>2] = $47;
  $49 = $allocate_len;
  $50 = $reg;
  $51 = (($50) + 4|0);
  HEAP32[$51>>2] = $49;
  $52 = $reg;
  $53 = (($52) + 12|0);
  HEAP32[$53>>2] = 0;
  $54 = $reg;
  $55 = (($54) + 16|0);
  HEAP32[$55>>2] = 0;
  $56 = $found_bg;
  $57 = $reg;
  $58 = (($57) + 8|0);
  HEAP32[$58>>2] = $56;
  $59 = $reg;
  $0 = $59;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $41 = HEAP32[_stderr>>2]|0;
 $42 = $allocate_len;
 $43 = $found_bg;
 HEAP32[$vararg_buffer>>2] = 8640;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $42;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $43;
 (_fprintf(($41|0),(8576|0),($vararg_buffer|0))|0);
 $44 = HEAP32[4872>>2]|0;
 $45 = ($44|0)!=(0);
 if (!($45)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $0 = 0;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function _do_split_allocation($alloc,$len) {
 $alloc = $alloc|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $new = 0, $reg = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $alloc;
 $2 = $len;
 $3 = $1;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $reg = $5;
 while(1) {
  $6 = $reg;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $2;
   $9 = $reg;
   $10 = (($9) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($8>>>0)>=($11>>>0);
   $68 = $12;
  } else {
   $68 = 0;
  }
  if (!($68)) {
   break;
  }
  $13 = $reg;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = (($16) - ($15))|0;
  $2 = $17;
  $18 = $reg;
  $19 = (($18) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $reg = $20;
 }
 $21 = $reg;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = $2;
  $24 = ($23>>>0)>(0);
  if ($24) {
   $0 = 0;
   $67 = $0;
   STACKTOP = sp;return ($67|0);
  }
 }
 $25 = $2;
 $26 = ($25>>>0)>(0);
 if ($26) {
  $27 = (_malloc(20)|0);
  $new = $27;
  $28 = $reg;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $new;
  $32 = (($31) + 8|0);
  HEAP32[$32>>2] = $30;
  $33 = $reg;
  $34 = HEAP32[$33>>2]|0;
  $35 = $2;
  $36 = (($34) + ($35))|0;
  $37 = $new;
  HEAP32[$37>>2] = $36;
  $38 = $reg;
  $39 = (($38) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $2;
  $42 = (($40) - ($41))|0;
  $43 = $new;
  $44 = (($43) + 4|0);
  HEAP32[$44>>2] = $42;
  $45 = $reg;
  $46 = (($45) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $new;
  $49 = (($48) + 12|0);
  HEAP32[$49>>2] = $47;
  $50 = $reg;
  $51 = $new;
  $52 = (($51) + 16|0);
  HEAP32[$52>>2] = $50;
  $53 = $new;
  $54 = $reg;
  $55 = (($54) + 12|0);
  HEAP32[$55>>2] = $53;
  $56 = $2;
  $57 = $reg;
  $58 = (($57) + 4|0);
  HEAP32[$58>>2] = $56;
  $59 = $1;
  $60 = (($59) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $tmp = $61;
  $62 = $new;
  $63 = $1;
  $64 = (($63) + 8|0);
  HEAP32[$64>>2] = $62;
  $65 = $tmp;
  $0 = $65;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 } else {
  $66 = $reg;
  $0 = $66;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 return (0)|0;
}
function _bitmap_set_bit($bitmap,$bit) {
 $bitmap = $bitmap|0;
 $bit = $bit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $bitmap;
 $2 = $bit;
 $3 = $2;
 $4 = (($3>>>0) / 8)&-1;
 $5 = $1;
 $6 = (($5) + ($4)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $2;
 $10 = (($9>>>0) % 8)&-1;
 $11 = 1 << $10;
 $12 = $8 & $11;
 $13 = ($12|0)!=(0);
 if ($13) {
  $0 = 1;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 } else {
  $14 = $2;
  $15 = (($14>>>0) % 8)&-1;
  $16 = 1 << $15;
  $17 = $2;
  $18 = (($17>>>0) / 8)&-1;
  $19 = $1;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 | $16;
  $24 = $23&255;
  HEAP8[$20>>0] = $24;
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _bitmap_set_8_bits($bitmap,$bit) {
 $bitmap = $bitmap|0;
 $bit = $bit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bitmap;
 $1 = $bit;
 $2 = $1;
 $3 = (($2>>>0) / 8)&-1;
 $4 = $0;
 $5 = (($4) + ($3)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $ret = $7;
 $8 = $1;
 $9 = (($8>>>0) / 8)&-1;
 $10 = $0;
 $11 = (($10) + ($9)|0);
 HEAP8[$11>>0] = -1;
 $12 = $ret;
 STACKTOP = sp;return ($12|0);
}
function _generate_uuid($namespace,$name,$result) {
 $namespace = $namespace|0;
 $name = $name|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sha1 = 0, $uuid = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sha1 = sp + 16|0;
 $0 = $namespace;
 $1 = $name;
 $2 = $result;
 $3 = $2;
 $uuid = $3;
 $4 = $0;
 $5 = $1;
 _sha1_hash($4,$5,$sha1);
 $6 = $uuid;
 dest=$6+0|0; src=$sha1+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $7 = $uuid;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_ntohl(($8|0))|0);
 $10 = $uuid;
 HEAP32[$10>>2] = $9;
 $11 = $uuid;
 $12 = (($11) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = (_ntohs(($13|0))|0);
 $15 = $uuid;
 $16 = (($15) + 4|0);
 HEAP16[$16>>1] = $14;
 $17 = $uuid;
 $18 = (($17) + 6|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = (_ntohs(($19|0))|0);
 $21 = $uuid;
 $22 = (($21) + 6|0);
 HEAP16[$22>>1] = $20;
 $23 = $uuid;
 $24 = (($23) + 6|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = $26 & 4095;
 $28 = $27&65535;
 HEAP16[$24>>1] = $28;
 $29 = $uuid;
 $30 = (($29) + 6|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = $32 | 20480;
 $34 = $33&65535;
 HEAP16[$30>>1] = $34;
 $35 = $uuid;
 $36 = (($35) + 8|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38 & -65;
 $40 = $39&255;
 HEAP8[$36>>0] = $40;
 $41 = $uuid;
 $42 = (($41) + 8|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $44 | 128;
 $46 = $45&255;
 HEAP8[$42>>0] = $46;
 STACKTOP = sp;return;
}
function _sha1_hash($namespace,$name,$sha1) {
 $namespace = $namespace|0;
 $name = $name|0;
 $sha1 = $sha1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ctx = sp;
 $0 = $namespace;
 $1 = $name;
 $2 = $sha1;
 _SHA1Init($ctx);
 $3 = $0;
 $4 = $0;
 $5 = (_strlen(($4|0))|0);
 _SHA1Update($ctx,$3,$5);
 $6 = $1;
 $7 = $1;
 $8 = (_strlen(($7|0))|0);
 _SHA1Update($ctx,$6,$8);
 $9 = $2;
 _SHA1Final($9,$ctx);
 STACKTOP = sp;return;
}
function _inode_attach_resize($inode,$alloc) {
 $inode = $inode|0;
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $block_len = 0, $blocks = 0, $dind_block = 0, $dind_block_data = 0;
 var $i = 0, $ind_block_data = 0, $j = 0, $last_block = 0, $r = 0, $size = 0, $superblocks = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $blocks = sp + 8|0;
 $size = sp;
 $0 = $inode;
 $1 = $alloc;
 $2 = $1;
 $3 = (_block_allocation_len($2)|0);
 $block_len = $3;
 $4 = $block_len;
 $5 = HEAP32[((4880 + 40|0))>>2]|0;
 $6 = (($4>>>0) / ($5>>>0))&-1;
 $superblocks = $6;
 $7 = $block_len;
 $8 = HEAP32[((4880 + 40|0))>>2]|0;
 $9 = (($7>>>0) % ($8>>>0))&-1;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = HEAP32[_stderr>>2]|0;
  $12 = HEAP32[((4880 + 40|0))>>2]|0;
  HEAP32[$vararg_buffer>>2] = 9088;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $12;
  (_fprintf(($11|0),(9024|0),($vararg_buffer|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 $13 = $1;
 (_append_oob_allocation($13,1)|0);
 $14 = $1;
 $15 = (_get_oob_block($14,0)|0);
 $dind_block = $15;
 $16 = HEAP32[((4880 + 8|0))>>2]|0;
 $17 = (_calloc($16,1)|0);
 $dind_block_data = $17;
 $18 = $dind_block_data;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $20 = HEAP32[_stderr>>2]|0;
  $21 = (___errno_location()|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_strerror(($22|0))|0);
  HEAP32[$vararg_buffer2>>2] = 9088;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $23;
  (_fprintf(($20|0),(10216|0),($vararg_buffer2|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 $24 = HEAP32[5096>>2]|0;
 $25 = $dind_block_data;
 $26 = HEAP32[((4880 + 8|0))>>2]|0;
 $27 = $dind_block;
 (_sparse_file_add_data($24,$25,$26,$27)|0);
 $28 = HEAP32[((4880 + 8|0))>>2]|0;
 $29 = HEAP32[((4880 + 40|0))>>2]|0;
 $30 = (_calloc($28,$29)|0);
 $ind_block_data = $30;
 $31 = $ind_block_data;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  $33 = HEAP32[_stderr>>2]|0;
  $34 = (___errno_location()|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (_strerror(($35|0))|0);
  HEAP32[$vararg_buffer6>>2] = 9088;
  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $36;
  (_fprintf(($33|0),(10216|0),($vararg_buffer6|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 $37 = HEAP32[5096>>2]|0;
 $38 = $ind_block_data;
 $39 = HEAP32[((4880 + 8|0))>>2]|0;
 $40 = HEAP32[((4880 + 40|0))>>2]|0;
 $41 = Math_imul($39, $40)|0;
 $42 = $1;
 $43 = (_get_block($42,0)|0);
 (_sparse_file_add_data($37,$38,$41,$43)|0);
 $i = 0;
 while(1) {
  $44 = $i;
  $45 = HEAP32[((4880 + 40|0))>>2]|0;
  $46 = ($44>>>0)<($45>>>0);
  if (!($46)) {
   break;
  }
  $47 = $i;
  $48 = HEAP32[((5104 + 40|0))>>2]|0;
  $49 = (($47) - ($48))|0;
  $50 = HEAP32[((4880 + 40|0))>>2]|0;
  $51 = (($49>>>0) % ($50>>>0))&-1;
  $r = $51;
  $52 = $r;
  $53 = ($52|0)<(0);
  if ($53) {
   $54 = HEAP32[((4880 + 40|0))>>2]|0;
   $55 = $r;
   $56 = (($55) + ($54))|0;
   $r = $56;
  }
  $57 = $1;
  $58 = $r;
  $59 = (_get_block($57,$58)|0);
  $60 = $i;
  $61 = $dind_block_data;
  $62 = (($61) + ($60<<2)|0);
  HEAP32[$62>>2] = $59;
  $j = 1;
  while(1) {
   $63 = $j;
   $64 = $superblocks;
   $65 = ($63>>>0)<($64>>>0);
   if (!($65)) {
    break;
   }
   $66 = $j;
   $67 = HEAP32[((4880 + 40|0))>>2]|0;
   $68 = Math_imul($66, $67)|0;
   $69 = $r;
   $70 = (($68) + ($69))|0;
   $b = $70;
   $71 = $1;
   $72 = $b;
   $73 = (_get_block($71,$72)|0);
   $74 = $r;
   $75 = HEAP32[((5104 + 48|0))>>2]|0;
   $76 = Math_imul($74, $75)|0;
   $77 = $j;
   $78 = (($76) + ($77))|0;
   $79 = (($78) - 1)|0;
   $80 = $ind_block_data;
   $81 = (($80) + ($79<<2)|0);
   HEAP32[$81>>2] = $73;
   $82 = $j;
   $83 = (($82) + 1)|0;
   $j = $83;
  }
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 $86 = HEAP32[((5104 + 48|0))>>2]|0;
 $87 = (12 + ($86))|0;
 $88 = HEAP32[((5104 + 48|0))>>2]|0;
 $89 = HEAP32[((4880 + 40|0))>>2]|0;
 $90 = (($89) - 1)|0;
 $91 = Math_imul($88, $90)|0;
 $92 = (($87) + ($91))|0;
 $93 = $superblocks;
 $94 = (($92) + ($93))|0;
 $95 = (($94) - 2)|0;
 $last_block = $95;
 $96 = $block_len;
 $97 = (_i64Add(($96|0),0,1,0)|0);
 $98 = tempRet0;
 $99 = HEAP32[((4880 + 8|0))>>2]|0;
 $100 = (___muldi3(($97|0),($98|0),($99|0),0)|0);
 $101 = tempRet0;
 $102 = (___udivdi3(($100|0),($101|0),512,0)|0);
 $103 = tempRet0;
 $104 = $blocks;
 $105 = $104;
 HEAP32[$105>>2] = $102;
 $106 = (($104) + 4)|0;
 $107 = $106;
 HEAP32[$107>>2] = $103;
 $108 = $last_block;
 $109 = HEAP32[((4880 + 8|0))>>2]|0;
 $110 = (___muldi3(($108|0),0,($109|0),0)|0);
 $111 = tempRet0;
 $112 = $size;
 $113 = $112;
 HEAP32[$113>>2] = $110;
 $114 = (($112) + 4)|0;
 $115 = $114;
 HEAP32[$115>>2] = $111;
 $116 = $dind_block;
 $117 = $0;
 $118 = (($117) + 40|0);
 $119 = (($118) + 52|0);
 HEAP32[$119>>2] = $116;
 $120 = $0;
 $121 = (($120) + 32|0);
 HEAP32[$121>>2] = 0;
 $122 = $blocks;
 $123 = $122;
 $124 = HEAP32[$123>>2]|0;
 $125 = (($122) + 4)|0;
 $126 = $125;
 $127 = HEAP32[$126>>2]|0;
 $128 = $0;
 $129 = (($128) + 28|0);
 HEAP32[$129>>2] = $124;
 $130 = $blocks;
 $131 = $130;
 $132 = HEAP32[$131>>2]|0;
 $133 = (($130) + 4)|0;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = $135&65535;
 $137 = $0;
 $138 = (($137) + 116|0);
 HEAP16[$138>>1] = $136;
 $139 = $size;
 $140 = $139;
 $141 = HEAP32[$140>>2]|0;
 $142 = (($139) + 4)|0;
 $143 = $142;
 $144 = HEAP32[$143>>2]|0;
 $145 = $0;
 $146 = (($145) + 4|0);
 HEAP32[$146>>2] = $141;
 $147 = $size;
 $148 = $147;
 $149 = HEAP32[$148>>2]|0;
 $150 = (($147) + 4)|0;
 $151 = $150;
 $152 = HEAP32[$151>>2]|0;
 $153 = $0;
 $154 = (($153) + 108|0);
 HEAP32[$154>>2] = $152;
 STACKTOP = sp;return;
}
function _inode_allocate_data_indirect($inode,$len,$backing_len) {
 $inode = $inode|0;
 $len = $len|0;
 $backing_len = $backing_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $alloc = 0, $block_len = 0, $data = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $inode;
 $2 = $len;
 $3 = $backing_len;
 $4 = $2;
 $5 = HEAP32[((4880 + 8|0))>>2]|0;
 $6 = (($4) + ($5))|0;
 $7 = (($6) - 1)|0;
 $8 = HEAP32[((4880 + 8|0))>>2]|0;
 $9 = (($7>>>0) / ($8>>>0))&-1;
 $block_len = $9;
 $data = 0;
 $10 = $block_len;
 $11 = (_do_inode_allocate_indirect($10)|0);
 $alloc = $11;
 $12 = $alloc;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = HEAP32[_stderr>>2]|0;
  $15 = $2;
  HEAP32[$vararg_buffer>>2] = 9112;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  (_fprintf(($14|0),(8912|0),($vararg_buffer|0))|0);
  $16 = HEAP32[4872>>2]|0;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $18 = $3;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $alloc;
  $21 = $3;
  $22 = (_create_backing($20,$21)|0);
  $data = $22;
  $23 = $data;
  $24 = ($23|0)!=(0|0);
  if (!($24)) {
   $25 = HEAP32[_stderr>>2]|0;
   $26 = $3;
   HEAP32[$vararg_buffer2>>2] = 9112;
   $vararg_ptr5 = (($vararg_buffer2) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $26;
   (_fprintf(($25|0),(9144|0),($vararg_buffer2|0))|0);
   $27 = HEAP32[4872>>2]|0;
   $28 = ($27|0)!=(0);
   if (!($28)) {
    _longjmp((4936|0),1);
    // unreachable;
   }
  }
 }
 $29 = $alloc;
 _rewind_alloc($29);
 $30 = $1;
 $31 = $alloc;
 $32 = $block_len;
 $33 = (_do_inode_attach_indirect($30,$31,$32)|0);
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer6>>2] = 9112;
  (_fprintf(($35|0),(8968|0),($vararg_buffer6|0))|0);
  $36 = HEAP32[4872>>2]|0;
  $37 = ($36|0)!=(0);
  if (!($37)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
 }
 $38 = $alloc;
 _free_alloc($38);
 $39 = $data;
 $0 = $39;
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function _indirect_blocks_needed($len) {
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ind = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $len;
 $ind = 0;
 $2 = $1;
 $3 = ($2>>>0)<=(12);
 if ($3) {
  $4 = $ind;
  $0 = $4;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $5 = $1;
 $6 = (($5) - 12)|0;
 $1 = $6;
 $7 = $1;
 $8 = HEAP32[((5104 + 48|0))>>2]|0;
 $9 = (($7) + ($8))|0;
 $10 = (($9) - 1)|0;
 $11 = HEAP32[((5104 + 48|0))>>2]|0;
 $12 = (($10>>>0) / ($11>>>0))&-1;
 $13 = $ind;
 $14 = (($13) + ($12))|0;
 $ind = $14;
 $15 = $1;
 $16 = HEAP32[((5104 + 48|0))>>2]|0;
 $17 = ($15>>>0)<=($16>>>0);
 if ($17) {
  $18 = $ind;
  $0 = $18;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $19 = HEAP32[((5104 + 48|0))>>2]|0;
 $20 = $1;
 $21 = (($20) - ($19))|0;
 $1 = $21;
 $22 = $1;
 $23 = HEAP32[((5104 + 52|0))>>2]|0;
 $24 = (($22) + ($23))|0;
 $25 = (($24) - 1)|0;
 $26 = HEAP32[((5104 + 52|0))>>2]|0;
 $27 = (($25>>>0) / ($26>>>0))&-1;
 $28 = $ind;
 $29 = (($28) + ($27))|0;
 $ind = $29;
 $30 = $1;
 $31 = HEAP32[((5104 + 52|0))>>2]|0;
 $32 = ($30>>>0)<=($31>>>0);
 if ($32) {
  $33 = $ind;
  $0 = $33;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $34 = HEAP32[((5104 + 52|0))>>2]|0;
 $35 = $1;
 $36 = (($35) - ($34))|0;
 $1 = $36;
 $37 = $1;
 $38 = HEAP32[((5104 + 56|0))>>2]|0;
 $39 = (($37) + ($38))|0;
 $40 = (($39) - 1)|0;
 $41 = HEAP32[((5104 + 56|0))>>2]|0;
 $42 = (($40>>>0) / ($41>>>0))&-1;
 $43 = $ind;
 $44 = (($43) + ($42))|0;
 $ind = $44;
 $45 = $1;
 $46 = HEAP32[((5104 + 56|0))>>2]|0;
 $47 = ($45>>>0)<=($46>>>0);
 if ($47) {
  $48 = $ind;
  $0 = $48;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 } else {
  $49 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 10016;
  (_fprintf(($49|0),(9976|0),($vararg_buffer|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 return (0)|0;
}
function _do_inode_allocate_indirect($block_len) {
 $block_len = $block_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alloc = 0, $indirect_len = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $block_len;
 $2 = $1;
 $3 = (_indirect_blocks_needed($2)|0);
 $indirect_len = $3;
 $4 = $1;
 $5 = $indirect_len;
 $6 = (($4) + ($5))|0;
 $7 = (_allocate_blocks($6)|0);
 $alloc = $7;
 $8 = $alloc;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $16 = $alloc;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $10 = HEAP32[_stderr>>2]|0;
 $11 = $1;
 $12 = $indirect_len;
 $13 = (($11) + ($12))|0;
 HEAP32[$vararg_buffer>>2] = 9944;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 (_fprintf(($10|0),(9896|0),($vararg_buffer|0))|0);
 $14 = HEAP32[4872>>2]|0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _do_inode_attach_indirect($inode,$alloc,$block_len) {
 $inode = $inode|0;
 $alloc = $alloc|0;
 $block_len = $block_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $count = sp + 36|0;
 $1 = $inode;
 $2 = $alloc;
 $3 = $block_len;
 $4 = $3;
 HEAP32[$count>>2] = $4;
 $5 = $1;
 $6 = $2;
 $7 = (_inode_attach_direct_blocks($5,$6,$count)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 9336;
  (_fprintf(($9|0),(9280|0),($vararg_buffer|0))|0);
  $10 = HEAP32[4872>>2]|0;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $12 = HEAP32[$count>>2]|0;
 $13 = ($12>>>0)>(0);
 do {
  if ($13) {
   $14 = $1;
   $15 = $2;
   $16 = (_inode_attach_indirect_blocks($14,$15,$count)|0);
   $17 = ($16|0)!=(0);
   if (!($17)) {
    break;
   }
   $18 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer1>>2] = 9336;
   (_fprintf(($18|0),(9368|0),($vararg_buffer1|0))|0);
   $19 = HEAP32[4872>>2]|0;
   $20 = ($19|0)!=(0);
   if (!($20)) {
    _longjmp((4936|0),1);
    // unreachable;
   }
   $0 = -1;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 } while(0);
 $21 = HEAP32[$count>>2]|0;
 $22 = ($21>>>0)>(0);
 do {
  if ($22) {
   $23 = $1;
   $24 = $2;
   $25 = (_inode_attach_dindirect_blocks($23,$24,$count)|0);
   $26 = ($25|0)!=(0);
   if (!($26)) {
    break;
   }
   $27 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer4>>2] = 9336;
   (_fprintf(($27|0),(9424|0),($vararg_buffer4|0))|0);
   $28 = HEAP32[4872>>2]|0;
   $29 = ($28|0)!=(0);
   if (!($29)) {
    _longjmp((4936|0),1);
    // unreachable;
   }
   $0 = -1;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 } while(0);
 $30 = HEAP32[$count>>2]|0;
 $31 = ($30>>>0)>(0);
 do {
  if ($31) {
   $32 = $1;
   $33 = $2;
   $34 = (_inode_attach_tindirect_blocks($32,$33,$count)|0);
   $35 = ($34|0)!=(0);
   if (!($35)) {
    break;
   }
   $36 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer7>>2] = 9336;
   (_fprintf(($36|0),(9480|0),($vararg_buffer7|0))|0);
   $37 = HEAP32[4872>>2]|0;
   $38 = ($37|0)!=(0);
   if (!($38)) {
    _longjmp((4936|0),1);
    // unreachable;
   }
   $0 = -1;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 } while(0);
 $39 = HEAP32[$count>>2]|0;
 $40 = ($39|0)!=(0);
 if (!($40)) {
  $44 = $2;
  _rewind_alloc($44);
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $41 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer10>>2] = 9336;
 (_fprintf(($41|0),(9536|0),($vararg_buffer10|0))|0);
 $42 = HEAP32[4872>>2]|0;
 $43 = ($42|0)!=(0);
 if (!($43)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $0 = -1;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _create_backing($alloc,$backing_len) {
 $alloc = $alloc|0;
 $backing_len = $backing_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $len = 0, $ptr = 0, $region_block = 0, $region_len = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $region_block = sp + 24|0;
 $region_len = sp + 20|0;
 $0 = $alloc;
 $1 = $backing_len;
 $2 = $1;
 $3 = HEAP32[((4880 + 8|0))>>2]|0;
 $4 = (($2) + ($3))|0;
 $5 = (($4) - 1)|0;
 $6 = HEAP32[((4880 + 8|0))>>2]|0;
 $7 = (($5>>>0) / ($6>>>0))&-1;
 $8 = ($7>>>0)>(12);
 if ($8) {
  $9 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 9264;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 12;
  (_fprintf(($9|0),(9200|0),($vararg_buffer|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 $10 = $1;
 $11 = (_calloc($10,1)|0);
 $data = $11;
 $12 = $data;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $14 = HEAP32[_stderr>>2]|0;
  $15 = (___errno_location()|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_strerror(($16|0))|0);
  HEAP32[$vararg_buffer2>>2] = 9264;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $17;
  (_fprintf(($14|0),(10216|0),($vararg_buffer2|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 $18 = $data;
 $ptr = $18;
 while(1) {
  $19 = $0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $1;
   $22 = ($21>>>0)>(0);
   $46 = $22;
  } else {
   $46 = 0;
  }
  if (!($46)) {
   break;
  }
  $23 = $0;
  _get_region($23,$region_block,$region_len);
  $24 = HEAP32[$region_len>>2]|0;
  $25 = HEAP32[((4880 + 8|0))>>2]|0;
  $26 = Math_imul($24, $25)|0;
  $27 = $1;
  $28 = ($26>>>0)<($27>>>0);
  if ($28) {
   $29 = HEAP32[$region_len>>2]|0;
   $30 = HEAP32[((4880 + 8|0))>>2]|0;
   $31 = Math_imul($29, $30)|0;
   $33 = $31;
  } else {
   $32 = $1;
   $33 = $32;
  }
  $len = $33;
  $34 = HEAP32[5096>>2]|0;
  $35 = $ptr;
  $36 = $len;
  $37 = HEAP32[$region_block>>2]|0;
  (_sparse_file_add_data($34,$35,$36,$37)|0);
  $38 = $len;
  $39 = $ptr;
  $40 = (($39) + ($38)|0);
  $ptr = $40;
  $41 = $len;
  $42 = $1;
  $43 = (($42) - ($41))|0;
  $1 = $43;
  $44 = $0;
  _get_next_region($44);
 }
 $45 = $data;
 STACKTOP = sp;return ($45|0);
}
function _inode_attach_direct_blocks($inode,$alloc,$block_len) {
 $inode = $inode|0;
 $alloc = $alloc|0;
 $block_len = $block_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $len = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $inode;
 $2 = $alloc;
 $3 = $block_len;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<(12);
 if ($6) {
  $7 = $3;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8;
 } else {
  $9 = 12;
 }
 $len = $9;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $len;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $i;
  $15 = (_get_block($13,$14)|0);
  $16 = $i;
  $17 = $1;
  $18 = (($17) + 40|0);
  $19 = (($18) + ($16<<2)|0);
  HEAP32[$19>>2] = $15;
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 $22 = $2;
 $23 = $len;
 $24 = (_advance_blocks($22,$23)|0);
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $30 = $len;
  $31 = $3;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) - ($30))|0;
  HEAP32[$31>>2] = $33;
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $26 = HEAP32[_stderr>>2]|0;
 $27 = $len;
 HEAP32[$vararg_buffer>>2] = 9864;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $27;
 (_fprintf(($26|0),(9672|0),($vararg_buffer|0))|0);
 $28 = HEAP32[4872>>2]|0;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $0 = -1;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _inode_attach_indirect_blocks($inode,$alloc,$block_len) {
 $inode = $inode|0;
 $alloc = $alloc|0;
 $block_len = $block_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ind_block = 0, $ind_block_data = 0, $len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $inode;
 $2 = $alloc;
 $3 = $block_len;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[((5104 + 48|0))>>2]|0;
 $7 = ($5>>>0)<($6>>>0);
 if ($7) {
  $8 = $3;
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 } else {
  $10 = HEAP32[((5104 + 48|0))>>2]|0;
  $11 = $10;
 }
 $len = $11;
 $12 = $2;
 $13 = (_get_oob_block($12,0)|0);
 $ind_block = $13;
 $14 = $ind_block;
 $15 = $1;
 $16 = (($15) + 40|0);
 $17 = (($16) + 48|0);
 HEAP32[$17>>2] = $14;
 $18 = $2;
 $19 = (_advance_oob_blocks($18,1)|0);
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 9832;
  (_fprintf(($21|0),(9600|0),($vararg_buffer|0))|0);
  $22 = HEAP32[4872>>2]|0;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $24 = HEAP32[((4880 + 8|0))>>2]|0;
 $25 = (_calloc($24,1)|0);
 $ind_block_data = $25;
 $26 = HEAP32[5096>>2]|0;
 $27 = $ind_block_data;
 $28 = HEAP32[((4880 + 8|0))>>2]|0;
 $29 = $ind_block;
 (_sparse_file_add_data($26,$27,$28,$29)|0);
 $30 = $ind_block_data;
 $31 = $len;
 $32 = $2;
 _fill_indirect_block($30,$31,$32);
 $33 = $2;
 $34 = $len;
 $35 = (_advance_blocks($33,$34)|0);
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $41 = $len;
  $42 = $3;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) - ($41))|0;
  HEAP32[$42>>2] = $44;
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $37 = HEAP32[_stderr>>2]|0;
 $38 = $len;
 HEAP32[$vararg_buffer1>>2] = 9832;
 $vararg_ptr4 = (($vararg_buffer1) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $38;
 (_fprintf(($37|0),(9672|0),($vararg_buffer1|0))|0);
 $39 = HEAP32[4872>>2]|0;
 $40 = ($39|0)!=(0);
 if (!($40)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $0 = -1;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _inode_attach_dindirect_blocks($inode,$alloc,$block_len) {
 $inode = $inode|0;
 $alloc = $alloc|0;
 $block_len = $block_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dind_block = 0, $dind_block_data = 0, $len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $inode;
 $2 = $alloc;
 $3 = $block_len;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[((5104 + 52|0))>>2]|0;
 $7 = ($5>>>0)<($6>>>0);
 if ($7) {
  $8 = $3;
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 } else {
  $10 = HEAP32[((5104 + 52|0))>>2]|0;
  $11 = $10;
 }
 $len = $11;
 $12 = $2;
 $13 = (_get_oob_block($12,0)|0);
 $dind_block = $13;
 $14 = $dind_block;
 $15 = $1;
 $16 = (($15) + 40|0);
 $17 = (($16) + 52|0);
 HEAP32[$17>>2] = $14;
 $18 = $2;
 $19 = (_advance_oob_blocks($18,1)|0);
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 9800;
  (_fprintf(($21|0),(9600|0),($vararg_buffer|0))|0);
  $22 = HEAP32[4872>>2]|0;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $24 = HEAP32[((4880 + 8|0))>>2]|0;
 $25 = (_calloc($24,1)|0);
 $dind_block_data = $25;
 $26 = HEAP32[5096>>2]|0;
 $27 = $dind_block_data;
 $28 = HEAP32[((4880 + 8|0))>>2]|0;
 $29 = $dind_block;
 (_sparse_file_add_data($26,$27,$28,$29)|0);
 $30 = $dind_block_data;
 $31 = $len;
 $32 = $2;
 _fill_dindirect_block($30,$31,$32);
 $33 = $2;
 $34 = $len;
 $35 = (_advance_blocks($33,$34)|0);
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $41 = $len;
  $42 = $3;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) - ($41))|0;
  HEAP32[$42>>2] = $44;
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $37 = HEAP32[_stderr>>2]|0;
 $38 = $len;
 HEAP32[$vararg_buffer1>>2] = 9800;
 $vararg_ptr4 = (($vararg_buffer1) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $38;
 (_fprintf(($37|0),(9672|0),($vararg_buffer1|0))|0);
 $39 = HEAP32[4872>>2]|0;
 $40 = ($39|0)!=(0);
 if (!($40)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $0 = -1;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _inode_attach_tindirect_blocks($inode,$alloc,$block_len) {
 $inode = $inode|0;
 $alloc = $alloc|0;
 $block_len = $block_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $tind_block = 0, $tind_block_data = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $inode;
 $2 = $alloc;
 $3 = $block_len;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[((5104 + 56|0))>>2]|0;
 $7 = ($5>>>0)<($6>>>0);
 if ($7) {
  $8 = $3;
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 } else {
  $10 = HEAP32[((5104 + 56|0))>>2]|0;
  $11 = $10;
 }
 $len = $11;
 $12 = $2;
 $13 = (_get_oob_block($12,0)|0);
 $tind_block = $13;
 $14 = $tind_block;
 $15 = $1;
 $16 = (($15) + 40|0);
 $17 = (($16) + 56|0);
 HEAP32[$17>>2] = $14;
 $18 = $2;
 $19 = (_advance_oob_blocks($18,1)|0);
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 9640;
  (_fprintf(($21|0),(9600|0),($vararg_buffer|0))|0);
  $22 = HEAP32[4872>>2]|0;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $0 = -1;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $24 = HEAP32[((4880 + 8|0))>>2]|0;
 $25 = (_calloc($24,1)|0);
 $tind_block_data = $25;
 $26 = HEAP32[5096>>2]|0;
 $27 = $tind_block_data;
 $28 = HEAP32[((4880 + 8|0))>>2]|0;
 $29 = $tind_block;
 (_sparse_file_add_data($26,$27,$28,$29)|0);
 $30 = $tind_block_data;
 $31 = $len;
 $32 = $2;
 _fill_tindirect_block($30,$31,$32);
 $33 = $2;
 $34 = $len;
 $35 = (_advance_blocks($33,$34)|0);
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $41 = $len;
  $42 = $3;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) - ($41))|0;
  HEAP32[$42>>2] = $44;
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $37 = HEAP32[_stderr>>2]|0;
 $38 = $len;
 HEAP32[$vararg_buffer1>>2] = 9640;
 $vararg_ptr4 = (($vararg_buffer1) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $38;
 (_fprintf(($37|0),(9672|0),($vararg_buffer1|0))|0);
 $39 = HEAP32[4872>>2]|0;
 $40 = ($39|0)!=(0);
 if (!($40)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $0 = -1;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _fill_indirect_block($ind_block,$len,$alloc) {
 $ind_block = $ind_block|0;
 $len = $len|0;
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ind_block;
 $1 = $len;
 $2 = $alloc;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $2;
  $7 = $i;
  $8 = (_get_block($6,$7)|0);
  $9 = $i;
  $10 = $0;
  $11 = (($10) + ($9<<2)|0);
  HEAP32[$11>>2] = $8;
  $12 = $i;
  $13 = (($12) + 1)|0;
  $i = $13;
 }
 STACKTOP = sp;return;
}
function _fill_dindirect_block($dind_block,$len,$alloc) {
 $dind_block = $dind_block|0;
 $len = $len|0;
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $ind_block = 0, $ind_block_data = 0, $ind_block_len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $dind_block;
 $1 = $len;
 $2 = $alloc;
 $i = 0;
 while(1) {
  $3 = $1;
  $4 = ($3|0)>(0);
  if (!($4)) {
   label = 20;
   break;
  }
  $5 = $2;
  $6 = (_get_oob_block($5,0)|0);
  $ind_block = $6;
  $7 = $2;
  $8 = (_advance_oob_blocks($7,1)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   label = 4;
   break;
  }
  $13 = $ind_block;
  $14 = $i;
  $15 = $0;
  $16 = (($15) + ($14<<2)|0);
  HEAP32[$16>>2] = $13;
  $17 = HEAP32[((4880 + 8|0))>>2]|0;
  $18 = (_calloc($17,1)|0);
  $ind_block_data = $18;
  $19 = HEAP32[5096>>2]|0;
  $20 = $ind_block_data;
  $21 = HEAP32[((4880 + 8|0))>>2]|0;
  $22 = $ind_block;
  (_sparse_file_add_data($19,$20,$21,$22)|0);
  $23 = HEAP32[((5104 + 48|0))>>2]|0;
  $24 = $1;
  $25 = ($23|0)<($24|0);
  if ($25) {
   $26 = HEAP32[((5104 + 48|0))>>2]|0;
   $28 = $26;
  } else {
   $27 = $1;
   $28 = $27;
  }
  $ind_block_len = $28;
  $29 = $ind_block_data;
  $30 = $ind_block_len;
  $31 = $2;
  _fill_indirect_block($29,$30,$31);
  $32 = $2;
  $33 = $ind_block_len;
  $34 = (_advance_blocks($32,$33)|0);
  $35 = ($34|0)!=(0);
  if ($35) {
   label = 13;
   break;
  }
  $40 = $ind_block_len;
  $41 = $1;
  $42 = (($41) - ($40))|0;
  $1 = $42;
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 if ((label|0) == 4) {
  $10 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 9776;
  (_fprintf(($10|0),(9712|0),($vararg_buffer|0))|0);
  $11 = HEAP32[4872>>2]|0;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 13) {
  $36 = HEAP32[_stderr>>2]|0;
  $37 = $ind_block_len;
  HEAP32[$vararg_buffer1>>2] = 9776;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $37;
  (_fprintf(($36|0),(9672|0),($vararg_buffer1|0))|0);
  $38 = HEAP32[4872>>2]|0;
  $39 = ($38|0)!=(0);
  if (!($39)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 20) {
  STACKTOP = sp;return;
 }
}
function _fill_tindirect_block($tind_block,$len,$alloc) {
 $tind_block = $tind_block|0;
 $len = $len|0;
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dind_block = 0, $dind_block_data = 0, $dind_block_len = 0;
 var $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tind_block;
 $1 = $len;
 $2 = $alloc;
 $i = 0;
 while(1) {
  $3 = $1;
  $4 = ($3|0)>(0);
  if (!($4)) {
   label = 14;
   break;
  }
  $5 = $2;
  $6 = (_get_oob_block($5,0)|0);
  $dind_block = $6;
  $7 = $2;
  $8 = (_advance_oob_blocks($7,1)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   break;
  }
  $13 = $dind_block;
  $14 = $i;
  $15 = $0;
  $16 = (($15) + ($14<<2)|0);
  HEAP32[$16>>2] = $13;
  $17 = HEAP32[((4880 + 8|0))>>2]|0;
  $18 = (_calloc($17,1)|0);
  $dind_block_data = $18;
  $19 = HEAP32[5096>>2]|0;
  $20 = $dind_block_data;
  $21 = HEAP32[((4880 + 8|0))>>2]|0;
  $22 = $dind_block;
  (_sparse_file_add_data($19,$20,$21,$22)|0);
  $23 = HEAP32[((5104 + 52|0))>>2]|0;
  $24 = $1;
  $25 = ($23|0)<($24|0);
  if ($25) {
   $26 = HEAP32[((5104 + 52|0))>>2]|0;
   $28 = $26;
  } else {
   $27 = $1;
   $28 = $27;
  }
  $dind_block_len = $28;
  $29 = $dind_block_data;
  $30 = $dind_block_len;
  $31 = $2;
  _fill_dindirect_block($29,$30,$31);
  $32 = $dind_block_len;
  $33 = $1;
  $34 = (($33) - ($32))|0;
  $1 = $34;
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 if ((label|0) == 14) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer>>2] = 9752;
 (_fprintf(($10|0),(9712|0),($vararg_buffer|0))|0);
 $11 = HEAP32[4872>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 STACKTOP = sp;return;
}
function _inode_allocate_data_extents($inode,$0,$1,$2,$3) {
 $inode = $inode|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $alloc = 0, $data = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $5 = $inode;
 $8 = $6;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $12 = $7;
 $13 = $12;
 HEAP32[$13>>2] = $2;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $3;
 $data = 0;
 $16 = $5;
 $17 = $6;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_do_inode_allocate_extents($16,$19,$22)|0);
 $alloc = $23;
 $24 = $alloc;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $26 = HEAP32[_stderr>>2]|0;
  $27 = $6;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$vararg_buffer>>2] = 10096;
  $vararg_ptr1 = (($vararg_buffer) + 8|0);
  $33 = $vararg_ptr1;
  $34 = $33;
  HEAP32[$34>>2] = $29;
  $35 = (($33) + 4)|0;
  $36 = $35;
  HEAP32[$36>>2] = $32;
  (_fprintf(($26|0),(10040|0),($vararg_buffer|0))|0);
  $37 = HEAP32[4872>>2]|0;
  $38 = ($37|0)!=(0);
  if (!($38)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $4 = 0;
  $73 = $4;
  STACKTOP = sp;return ($73|0);
 }
 $39 = $7;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = ($41|0)!=(0);
 $46 = ($44|0)!=(0);
 $47 = $45 | $46;
 if ($47) {
  $48 = $alloc;
  $49 = $7;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = (_extent_create_backing($48,$51,$54)|0);
  $data = $55;
  $56 = $data;
  $57 = ($56|0)!=(0|0);
  if (!($57)) {
   $58 = HEAP32[_stderr>>2]|0;
   $59 = $7;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 4)|0;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   HEAP32[$vararg_buffer2>>2] = 10096;
   $vararg_ptr5 = (($vararg_buffer2) + 8|0);
   $65 = $vararg_ptr5;
   $66 = $65;
   HEAP32[$66>>2] = $61;
   $67 = (($65) + 4)|0;
   $68 = $67;
   HEAP32[$68>>2] = $64;
   (_fprintf(($58|0),(10128|0),($vararg_buffer2|0))|0);
   $69 = HEAP32[4872>>2]|0;
   $70 = ($69|0)!=(0);
   if (!($70)) {
    _longjmp((4936|0),1);
    // unreachable;
   }
  }
 }
 $71 = $alloc;
 _free_alloc($71);
 $72 = $data;
 $4 = $72;
 $73 = $4;
 STACKTOP = sp;return ($73|0);
}
function _inode_allocate_file_extents($inode,$0,$1,$filename) {
 $inode = $inode|0;
 $0 = $0|0;
 $1 = $1|0;
 $filename = $filename|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $alloc = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $4 = sp;
 $3 = $inode;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $5 = $filename;
 $10 = $3;
 $11 = $4;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (_do_inode_allocate_extents($10,$13,$16)|0);
 $alloc = $17;
 $18 = $alloc;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  $33 = $alloc;
  $34 = $4;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) + 4)|0;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = $5;
  _extent_create_backing_file($33,$36,$39,$40);
  $41 = $alloc;
  $2 = $41;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 $20 = HEAP32[_stderr>>2]|0;
 $21 = $4;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$vararg_buffer>>2] = 10184;
 $vararg_ptr1 = (($vararg_buffer) + 8|0);
 $27 = $vararg_ptr1;
 $28 = $27;
 HEAP32[$28>>2] = $23;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 (_fprintf(($20|0),(10040|0),($vararg_buffer|0))|0);
 $31 = HEAP32[4872>>2]|0;
 $32 = ($31|0)!=(0);
 if (!($32)) {
  _longjmp((4936|0),1);
  // unreachable;
 }
 $2 = 0;
 $42 = $2;
 STACKTOP = sp;return ($42|0);
}
function _do_inode_allocate_extents($inode,$0,$1) {
 $inode = $inode|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $alloc = 0, $allocation_len = 0, $block_len = 0, $blocks = 0, $data = 0, $extent = 0, $extent_block = 0, $file_block = 0, $hdr = 0, $hdr1 = 0, $idx = 0, $region_block = 0, $region_len = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $4 = sp + 8|0;
 $blocks = sp;
 $region_block = sp + 52|0;
 $region_len = sp + 48|0;
 $3 = $inode;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $4;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[((4880 + 8|0))>>2]|0;
 $16 = (_i64Add(($11|0),($14|0),($15|0),0)|0);
 $17 = tempRet0;
 $18 = (_i64Subtract(($16|0),($17|0),1,0)|0);
 $19 = tempRet0;
 $20 = HEAP32[((4880 + 8|0))>>2]|0;
 $21 = (___udivdi3(($18|0),($19|0),($20|0),0)|0);
 $22 = tempRet0;
 $block_len = $21;
 $23 = $block_len;
 $24 = (($23) + 1)|0;
 $25 = (_allocate_blocks($24)|0);
 $alloc = $25;
 $extent_block = 0;
 $file_block = 0;
 $26 = $alloc;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $28 = HEAP32[_stderr>>2]|0;
  $29 = $block_len;
  $30 = (($29) + 1)|0;
  HEAP32[$vararg_buffer>>2] = 10320;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $30;
  (_fprintf(($28|0),(10272|0),($vararg_buffer|0))|0);
  $31 = HEAP32[4872>>2]|0;
  $32 = ($31|0)!=(0);
  if (!($32)) {
   _longjmp((4936|0),1);
   // unreachable;
  }
  $2 = 0;
  $203 = $2;
  STACKTOP = sp;return ($203|0);
 }
 $33 = $alloc;
 $34 = (_block_allocation_num_regions($33)|0);
 $allocation_len = $34;
 $35 = $allocation_len;
 $36 = ($35|0)<=(3);
 if ($36) {
  $37 = $alloc;
  _reduce_allocation($37,1);
 } else {
  $38 = $alloc;
  (_reserve_oob_blocks($38,1)|0);
  $39 = $alloc;
  $40 = (_get_oob_block($39,0)|0);
  $extent_block = $40;
 }
 $41 = $extent_block;
 $42 = ($41|0)!=(0);
 do {
  if ($42) {
   $59 = $3;
   $60 = (($59) + 40|0);
   $hdr1 = $60;
   $61 = $hdr1;
   HEAP16[$61>>1] = -3318;
   $62 = $hdr1;
   $63 = (($62) + 2|0);
   HEAP16[$63>>1] = 1;
   $64 = $hdr1;
   $65 = (($64) + 4|0);
   HEAP16[$65>>1] = 3;
   $66 = $hdr1;
   $67 = (($66) + 8|0);
   HEAP32[$67>>2] = 0;
   $68 = $hdr1;
   $69 = (($68) + 6|0);
   HEAP16[$69>>1] = 1;
   $70 = $3;
   $71 = (($70) + 40|0);
   $72 = (($71) + 12|0);
   $idx = $72;
   $73 = $idx;
   HEAP32[$73>>2] = 0;
   $74 = $extent_block;
   $75 = $idx;
   $76 = (($75) + 4|0);
   HEAP32[$76>>2] = $74;
   $77 = $idx;
   $78 = (($77) + 8|0);
   HEAP16[$78>>1] = 0;
   $79 = $idx;
   $80 = (($79) + 10|0);
   HEAP16[$80>>1] = 0;
   $81 = HEAP32[((4880 + 8|0))>>2]|0;
   $82 = (_calloc($81,1)|0);
   $data = $82;
   $83 = $data;
   $84 = ($83|0)!=(0|0);
   if (!($84)) {
    $85 = HEAP32[_stderr>>2]|0;
    $86 = (___errno_location()|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (_strerror(($87|0))|0);
    HEAP32[$vararg_buffer2>>2] = 10320;
    $vararg_ptr5 = (($vararg_buffer2) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $88;
    (_fprintf(($85|0),(10216|0),($vararg_buffer2|0))|0);
    _longjmp((4936|0),1);
    // unreachable;
   }
   $89 = HEAP32[5096>>2]|0;
   $90 = $data;
   $91 = HEAP32[((4880 + 8|0))>>2]|0;
   $92 = $extent_block;
   (_sparse_file_add_data($89,$90,$91,$92)|0);
   $93 = HEAP32[((4880 + 8|0))>>2]|0;
   $94 = (($93) - 1)|0;
   $95 = $allocation_len;
   $96 = ($94|0)<($95|0);
   if (!($96)) {
    $110 = $data;
    $hdr1 = $110;
    $111 = $hdr1;
    HEAP16[$111>>1] = -3318;
    $112 = $allocation_len;
    $113 = $112&65535;
    $114 = $hdr1;
    $115 = (($114) + 2|0);
    HEAP16[$115>>1] = $113;
    $116 = HEAP32[((4880 + 8|0))>>2]|0;
    $117 = (($116) - 12)|0;
    $118 = (($117>>>0) / 12)&-1;
    $119 = $118&65535;
    $120 = $hdr1;
    $121 = (($120) + 4|0);
    HEAP16[$121>>1] = $119;
    $122 = $hdr1;
    $123 = (($122) + 8|0);
    HEAP32[$123>>2] = 0;
    $124 = $hdr1;
    $125 = (($124) + 6|0);
    HEAP16[$125>>1] = 0;
    $126 = $data;
    $127 = (($126) + 12|0);
    $extent = $127;
    break;
   }
   $97 = HEAP32[_stderr>>2]|0;
   $98 = $4;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = (($98) + 4)|0;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   HEAP32[$vararg_buffer6>>2] = 10320;
   $vararg_ptr9 = (($vararg_buffer6) + 8|0);
   $104 = $vararg_ptr9;
   $105 = $104;
   HEAP32[$105>>2] = $100;
   $106 = (($104) + 4)|0;
   $107 = $106;
   HEAP32[$107>>2] = $103;
   (_fprintf(($97|0),(10352|0),($vararg_buffer6|0))|0);
   $108 = HEAP32[4872>>2]|0;
   $109 = ($108|0)!=(0);
   if (!($109)) {
    _longjmp((4936|0),1);
    // unreachable;
   }
   $2 = 0;
   $203 = $2;
   STACKTOP = sp;return ($203|0);
  } else {
   $43 = $3;
   $44 = (($43) + 40|0);
   $hdr = $44;
   $45 = $hdr;
   HEAP16[$45>>1] = -3318;
   $46 = $allocation_len;
   $47 = $46&65535;
   $48 = $hdr;
   $49 = (($48) + 2|0);
   HEAP16[$49>>1] = $47;
   $50 = $hdr;
   $51 = (($50) + 4|0);
   HEAP16[$51>>1] = 3;
   $52 = $hdr;
   $53 = (($52) + 8|0);
   HEAP32[$53>>2] = 0;
   $54 = $hdr;
   $55 = (($54) + 6|0);
   HEAP16[$55>>1] = 0;
   $56 = $3;
   $57 = (($56) + 40|0);
   $58 = (($57) + 12|0);
   $extent = $58;
  }
 } while(0);
 while(1) {
  $128 = $alloc;
  $129 = (_last_region($128)|0);
  $130 = ($129|0)!=(0);
  $131 = $130 ^ 1;
  if (!($131)) {
   break;
  }
  $132 = $alloc;
  _get_region($132,$region_block,$region_len);
  $133 = $file_block;
  $134 = $extent;
  HEAP32[$134>>2] = $133;
  $135 = HEAP32[$region_len>>2]|0;
  $136 = $135&65535;
  $137 = $extent;
  $138 = (($137) + 4|0);
  HEAP16[$138>>1] = $136;
  $139 = $extent;
  $140 = (($139) + 6|0);
  HEAP16[$140>>1] = 0;
  $141 = HEAP32[$region_block>>2]|0;
  $142 = $extent;
  $143 = (($142) + 8|0);
  HEAP32[$143>>2] = $141;
  $144 = HEAP32[$region_len>>2]|0;
  $145 = $file_block;
  $146 = (($145) + ($144))|0;
  $file_block = $146;
  $147 = $extent;
  $148 = (($147) + 12|0);
  $extent = $148;
  $149 = $alloc;
  _get_next_region($149);
 }
 $150 = $extent_block;
 $151 = ($150|0)!=(0);
 if ($151) {
  $152 = $block_len;
  $153 = (($152) + 1)|0;
  $block_len = $153;
 }
 $154 = $block_len;
 $155 = HEAP32[((4880 + 8|0))>>2]|0;
 $156 = (___muldi3(($154|0),0,($155|0),0)|0);
 $157 = tempRet0;
 $158 = (___udivdi3(($156|0),($157|0),512,0)|0);
 $159 = tempRet0;
 $160 = $blocks;
 $161 = $160;
 HEAP32[$161>>2] = $158;
 $162 = (($160) + 4)|0;
 $163 = $162;
 HEAP32[$163>>2] = $159;
 $164 = $3;
 $165 = (($164) + 32|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = $166 | 524288;
 HEAP32[$165>>2] = $167;
 $168 = $4;
 $169 = $168;
 $170 = HEAP32[$169>>2]|0;
 $171 = (($168) + 4)|0;
 $172 = $171;
 $173 = HEAP32[$172>>2]|0;
 $174 = $3;
 $175 = (($174) + 4|0);
 HEAP32[$175>>2] = $170;
 $176 = $4;
 $177 = $176;
 $178 = HEAP32[$177>>2]|0;
 $179 = (($176) + 4)|0;
 $180 = $179;
 $181 = HEAP32[$180>>2]|0;
 $182 = $3;
 $183 = (($182) + 108|0);
 HEAP32[$183>>2] = $181;
 $184 = $blocks;
 $185 = $184;
 $186 = HEAP32[$185>>2]|0;
 $187 = (($184) + 4)|0;
 $188 = $187;
 $189 = HEAP32[$188>>2]|0;
 $190 = $3;
 $191 = (($190) + 28|0);
 HEAP32[$191>>2] = $186;
 $192 = $blocks;
 $193 = $192;
 $194 = HEAP32[$193>>2]|0;
 $195 = (($192) + 4)|0;
 $196 = $195;
 $197 = HEAP32[$196>>2]|0;
 $198 = $197&65535;
 $199 = $3;
 $200 = (($199) + 116|0);
 HEAP16[$200>>1] = $198;
 $201 = $alloc;
 _rewind_alloc($201);
 $202 = $alloc;
 $2 = $202;
 $203 = $2;
 STACKTOP = sp;return ($203|0);
}
function _extent_create_backing($alloc,$0,$1) {
 $alloc = $alloc|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $9 = 0, $data = 0, $len = 0, $ptr = 0, $region_block = 0, $region_len = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $3 = sp;
 $region_block = sp + 24|0;
 $region_len = sp + 20|0;
 $2 = $alloc;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_calloc($10,1)|0);
 $data = $14;
 $15 = $data;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  $17 = HEAP32[_stderr>>2]|0;
  $18 = (___errno_location()|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_strerror(($19|0))|0);
  HEAP32[$vararg_buffer>>2] = 10248;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $20;
  (_fprintf(($17|0),(10216|0),($vararg_buffer|0))|0);
  _longjmp((4936|0),1);
  // unreachable;
 }
 $21 = $data;
 $ptr = $21;
 while(1) {
  $22 = $2;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = $3;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29>>>0)>(0);
   $31 = ($26>>>0)>(0);
   $32 = ($29|0)==(0);
   $33 = $32 & $31;
   $34 = $30 | $33;
   $82 = $34;
  } else {
   $82 = 0;
  }
  if (!($82)) {
   break;
  }
  $35 = $2;
  _get_region($35,$region_block,$region_len);
  $36 = HEAP32[$region_len>>2]|0;
  $37 = HEAP32[((4880 + 8|0))>>2]|0;
  $38 = Math_imul($36, $37)|0;
  $39 = $3;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($39) + 4)|0;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = (0)<($44>>>0);
  $46 = ($38>>>0)<($41>>>0);
  $47 = (0)==($44|0);
  $48 = $47 & $46;
  $49 = $45 | $48;
  if ($49) {
   $50 = HEAP32[$region_len>>2]|0;
   $51 = HEAP32[((4880 + 8|0))>>2]|0;
   $52 = Math_imul($50, $51)|0;
   $59 = $52;$83 = 0;
  } else {
   $53 = $3;
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   $56 = (($53) + 4)|0;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = $55;$83 = $58;
  }
  $len = $59;
  $60 = HEAP32[5096>>2]|0;
  $61 = $ptr;
  $62 = $len;
  $63 = HEAP32[$region_block>>2]|0;
  (_sparse_file_add_data($60,$61,$62,$63)|0);
  $64 = $len;
  $65 = $ptr;
  $66 = (($65) + ($64)|0);
  $ptr = $66;
  $67 = $len;
  $68 = $3;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($68) + 4)|0;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (_i64Subtract(($70|0),($73|0),($67|0),0)|0);
  $75 = tempRet0;
  $76 = $3;
  $77 = $76;
  HEAP32[$77>>2] = $74;
  $78 = (($76) + 4)|0;
  $79 = $78;
  HEAP32[$79>>2] = $75;
  $80 = $2;
  _get_next_region($80);
 }
 $81 = $data;
 STACKTOP = sp;return ($81|0);
}
function _extent_create_backing_file($alloc,$0,$1,$filename) {
 $alloc = $alloc|0;
 $0 = $0|0;
 $1 = $1|0;
 $filename = $filename|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $len = 0, $offset = 0, $region_block = 0, $region_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $region_block = sp + 16|0;
 $region_len = sp + 12|0;
 $2 = $alloc;
 $5 = $3;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $4 = $filename;
 $offset = 0;
 while(1) {
  $9 = $2;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $3;
   $12 = $11;
   $13 = HEAP32[$12>>2]|0;
   $14 = (($11) + 4)|0;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16>>>0)>(0);
   $18 = ($13>>>0)>(0);
   $19 = ($16|0)==(0);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $71 = $21;
  } else {
   $71 = 0;
  }
  if (!($71)) {
   break;
  }
  $22 = $2;
  _get_region($22,$region_block,$region_len);
  $23 = HEAP32[$region_len>>2]|0;
  $24 = HEAP32[((4880 + 8|0))>>2]|0;
  $25 = Math_imul($23, $24)|0;
  $26 = $3;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (0)<($31>>>0);
  $33 = ($25>>>0)<($28>>>0);
  $34 = (0)==($31|0);
  $35 = $34 & $33;
  $36 = $32 | $35;
  if ($36) {
   $37 = HEAP32[$region_len>>2]|0;
   $38 = HEAP32[((4880 + 8|0))>>2]|0;
   $39 = Math_imul($37, $38)|0;
   $46 = $39;$72 = 0;
  } else {
   $40 = $3;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = $42;$72 = $45;
  }
  $len = $46;
  $47 = HEAP32[5096>>2]|0;
  $48 = $4;
  $49 = $offset;
  $50 = ($49|0)<(0);
  $51 = $50 << 31 >> 31;
  $52 = $len;
  $53 = HEAP32[$region_block>>2]|0;
  (_sparse_file_add_file($47,$48,$49,$51,$52,$53)|0);
  $54 = $len;
  $55 = $offset;
  $56 = (($55) + ($54))|0;
  $offset = $56;
  $57 = $len;
  $58 = $3;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + 4)|0;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (_i64Subtract(($60|0),($63|0),($57|0),0)|0);
  $65 = tempRet0;
  $66 = $3;
  $67 = $66;
  HEAP32[$67>>2] = $64;
  $68 = (($66) + 4)|0;
  $69 = $68;
  HEAP32[$69>>2] = $65;
  $70 = $2;
  _get_next_region($70);
 }
 STACKTOP = sp;return;
}
function _ext4_crc16($crc_in,$buf,$size) {
 $crc_in = $crc_in|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crc = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $crc_in;
 $1 = $buf;
 $2 = $size;
 $3 = $1;
 $p = $3;
 $4 = $0;
 $crc = $4;
 while(1) {
  $5 = $2;
  $6 = (($5) + -1)|0;
  $2 = $6;
  $7 = ($5|0)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $crc;
  $9 = $8&65535;
  $10 = $p;
  $11 = (($10) + 1|0);
  $p = $11;
  $12 = HEAP8[$10>>0]|0;
  $13 = $12&255;
  $14 = $9 ^ $13;
  $15 = $14 & 255;
  $16 = (10424 + ($15<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = $crc;
  $20 = $19&65535;
  $21 = $20 >> 8;
  $22 = $18 ^ $21;
  $23 = $22&65535;
  $crc = $23;
 }
 $24 = $crc;
 STACKTOP = sp;return ($24|0);
}
function _SHA1Transform($state,$buffer) {
 $state = $state|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0;
 var $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0;
 var $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0;
 var $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0;
 var $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0;
 var $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0;
 var $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0;
 var $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0;
 var $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0;
 var $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0;
 var $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0;
 var $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0;
 var $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0;
 var $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0;
 var $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0;
 var $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0;
 var $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0;
 var $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0;
 var $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0;
 var $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0;
 var $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0;
 var $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0;
 var $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0;
 var $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0;
 var $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0;
 var $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0;
 var $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0;
 var $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0;
 var $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0;
 var $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0;
 var $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0;
 var $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0;
 var $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0;
 var $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0;
 var $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0;
 var $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0;
 var $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0;
 var $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0;
 var $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0;
 var $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0;
 var $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0;
 var $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0;
 var $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0;
 var $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0;
 var $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0;
 var $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0;
 var $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0;
 var $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0;
 var $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0;
 var $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0;
 var $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0;
 var $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0;
 var $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0;
 var $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0;
 var $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0;
 var $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0;
 var $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0;
 var $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0;
 var $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0;
 var $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0;
 var $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0;
 var $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0;
 var $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0;
 var $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0;
 var $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0;
 var $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0;
 var $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0;
 var $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0;
 var $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0;
 var $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0;
 var $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0;
 var $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0;
 var $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0;
 var $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0;
 var $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0;
 var $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0;
 var $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0;
 var $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0;
 var $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0;
 var $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0;
 var $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0;
 var $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0;
 var $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0;
 var $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0, $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0;
 var $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0, $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0;
 var $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0, $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0;
 var $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0, $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0;
 var $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0, $3977 = 0, $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0;
 var $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0, $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0;
 var $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0, $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0, $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0;
 var $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0, $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0;
 var $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0, $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0;
 var $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0, $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0, $4066 = 0, $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0;
 var $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0, $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0, $4084 = 0, $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0;
 var $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0, $4098 = 0, $4099 = 0, $41 = 0, $410 = 0, $4100 = 0, $4101 = 0, $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0;
 var $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0, $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0, $412 = 0, $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0;
 var $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0, $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0, $4137 = 0, $4138 = 0, $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0;
 var $4148 = 0, $4149 = 0, $415 = 0, $4150 = 0, $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0, $4155 = 0, $4156 = 0, $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0;
 var $4166 = 0, $4167 = 0, $4168 = 0, $4169 = 0, $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0, $4174 = 0, $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0;
 var $4184 = 0, $4185 = 0, $4186 = 0, $4187 = 0, $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0, $4191 = 0, $4192 = 0, $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0;
 var $4201 = 0, $4202 = 0, $4203 = 0, $4204 = 0, $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0, $4209 = 0, $421 = 0, $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0;
 var $422 = 0, $4220 = 0, $4221 = 0, $4222 = 0, $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0, $4228 = 0, $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0;
 var $4238 = 0, $4239 = 0, $424 = 0, $4240 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0, $4246 = 0, $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0;
 var $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0, $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0, $4263 = 0, $4264 = 0, $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0;
 var $4274 = 0, $4275 = 0, $4276 = 0, $4277 = 0, $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0, $4281 = 0, $4282 = 0, $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0;
 var $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0, $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0, $43 = 0, $430 = 0, $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0;
 var $431 = 0, $4310 = 0, $4311 = 0, $4312 = 0, $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4317 = 0, $4318 = 0, $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0;
 var $4328 = 0, $4329 = 0, $433 = 0, $4330 = 0, $4331 = 0, $4332 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a = 0, $b = 0, $block = 0, $c = 0, $d = 0, $e = 0, $workspace = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $workspace = sp;
 $0 = $state;
 $1 = $buffer;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((10936|0),(10952|0),134,(10960|0));
  // unreachable;
 }
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $block = $workspace;
  $6 = $block;
  $7 = $1;
  dest=$6+0|0; src=$7+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $a = $9;
  $10 = $0;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $b = $12;
  $13 = $0;
  $14 = (($13) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $c = $15;
  $16 = $0;
  $17 = (($16) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $d = $18;
  $19 = $0;
  $20 = (($19) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $e = $21;
  $22 = $b;
  $23 = $c;
  $24 = $d;
  $25 = $23 ^ $24;
  $26 = $22 & $25;
  $27 = $d;
  $28 = $26 ^ $27;
  $29 = $block;
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 << 24;
  $32 = $block;
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 >>> 8;
  $35 = $31 | $34;
  $36 = $35 & -16711936;
  $37 = $block;
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 << 8;
  $40 = $block;
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >>> 24;
  $43 = $39 | $42;
  $44 = $43 & 16711935;
  $45 = $36 | $44;
  $46 = $block;
  HEAP32[$46>>2] = $45;
  $47 = (($28) + ($45))|0;
  $48 = (($47) + 1518500249)|0;
  $49 = $a;
  $50 = $49 << 5;
  $51 = $a;
  $52 = $51 >>> 27;
  $53 = $50 | $52;
  $54 = (($48) + ($53))|0;
  $55 = $e;
  $56 = (($55) + ($54))|0;
  $e = $56;
  $57 = $b;
  $58 = $57 << 30;
  $59 = $b;
  $60 = $59 >>> 2;
  $61 = $58 | $60;
  $b = $61;
  $62 = $a;
  $63 = $b;
  $64 = $c;
  $65 = $63 ^ $64;
  $66 = $62 & $65;
  $67 = $c;
  $68 = $66 ^ $67;
  $69 = $block;
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $71 << 24;
  $73 = $block;
  $74 = (($73) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $75 >>> 8;
  $77 = $72 | $76;
  $78 = $77 & -16711936;
  $79 = $block;
  $80 = (($79) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $81 << 8;
  $83 = $block;
  $84 = (($83) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $85 >>> 24;
  $87 = $82 | $86;
  $88 = $87 & 16711935;
  $89 = $78 | $88;
  $90 = $block;
  $91 = (($90) + 4|0);
  HEAP32[$91>>2] = $89;
  $92 = (($68) + ($89))|0;
  $93 = (($92) + 1518500249)|0;
  $94 = $e;
  $95 = $94 << 5;
  $96 = $e;
  $97 = $96 >>> 27;
  $98 = $95 | $97;
  $99 = (($93) + ($98))|0;
  $100 = $d;
  $101 = (($100) + ($99))|0;
  $d = $101;
  $102 = $a;
  $103 = $102 << 30;
  $104 = $a;
  $105 = $104 >>> 2;
  $106 = $103 | $105;
  $a = $106;
  $107 = $e;
  $108 = $a;
  $109 = $b;
  $110 = $108 ^ $109;
  $111 = $107 & $110;
  $112 = $b;
  $113 = $111 ^ $112;
  $114 = $block;
  $115 = (($114) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 << 24;
  $118 = $block;
  $119 = (($118) + 8|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $120 >>> 8;
  $122 = $117 | $121;
  $123 = $122 & -16711936;
  $124 = $block;
  $125 = (($124) + 8|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $126 << 8;
  $128 = $block;
  $129 = (($128) + 8|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $130 >>> 24;
  $132 = $127 | $131;
  $133 = $132 & 16711935;
  $134 = $123 | $133;
  $135 = $block;
  $136 = (($135) + 8|0);
  HEAP32[$136>>2] = $134;
  $137 = (($113) + ($134))|0;
  $138 = (($137) + 1518500249)|0;
  $139 = $d;
  $140 = $139 << 5;
  $141 = $d;
  $142 = $141 >>> 27;
  $143 = $140 | $142;
  $144 = (($138) + ($143))|0;
  $145 = $c;
  $146 = (($145) + ($144))|0;
  $c = $146;
  $147 = $e;
  $148 = $147 << 30;
  $149 = $e;
  $150 = $149 >>> 2;
  $151 = $148 | $150;
  $e = $151;
  $152 = $d;
  $153 = $e;
  $154 = $a;
  $155 = $153 ^ $154;
  $156 = $152 & $155;
  $157 = $a;
  $158 = $156 ^ $157;
  $159 = $block;
  $160 = (($159) + 12|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $161 << 24;
  $163 = $block;
  $164 = (($163) + 12|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $165 >>> 8;
  $167 = $162 | $166;
  $168 = $167 & -16711936;
  $169 = $block;
  $170 = (($169) + 12|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = $171 << 8;
  $173 = $block;
  $174 = (($173) + 12|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $175 >>> 24;
  $177 = $172 | $176;
  $178 = $177 & 16711935;
  $179 = $168 | $178;
  $180 = $block;
  $181 = (($180) + 12|0);
  HEAP32[$181>>2] = $179;
  $182 = (($158) + ($179))|0;
  $183 = (($182) + 1518500249)|0;
  $184 = $c;
  $185 = $184 << 5;
  $186 = $c;
  $187 = $186 >>> 27;
  $188 = $185 | $187;
  $189 = (($183) + ($188))|0;
  $190 = $b;
  $191 = (($190) + ($189))|0;
  $b = $191;
  $192 = $d;
  $193 = $192 << 30;
  $194 = $d;
  $195 = $194 >>> 2;
  $196 = $193 | $195;
  $d = $196;
  $197 = $c;
  $198 = $d;
  $199 = $e;
  $200 = $198 ^ $199;
  $201 = $197 & $200;
  $202 = $e;
  $203 = $201 ^ $202;
  $204 = $block;
  $205 = (($204) + 16|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = $206 << 24;
  $208 = $block;
  $209 = (($208) + 16|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = $210 >>> 8;
  $212 = $207 | $211;
  $213 = $212 & -16711936;
  $214 = $block;
  $215 = (($214) + 16|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = $216 << 8;
  $218 = $block;
  $219 = (($218) + 16|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $220 >>> 24;
  $222 = $217 | $221;
  $223 = $222 & 16711935;
  $224 = $213 | $223;
  $225 = $block;
  $226 = (($225) + 16|0);
  HEAP32[$226>>2] = $224;
  $227 = (($203) + ($224))|0;
  $228 = (($227) + 1518500249)|0;
  $229 = $b;
  $230 = $229 << 5;
  $231 = $b;
  $232 = $231 >>> 27;
  $233 = $230 | $232;
  $234 = (($228) + ($233))|0;
  $235 = $a;
  $236 = (($235) + ($234))|0;
  $a = $236;
  $237 = $c;
  $238 = $237 << 30;
  $239 = $c;
  $240 = $239 >>> 2;
  $241 = $238 | $240;
  $c = $241;
  $242 = $b;
  $243 = $c;
  $244 = $d;
  $245 = $243 ^ $244;
  $246 = $242 & $245;
  $247 = $d;
  $248 = $246 ^ $247;
  $249 = $block;
  $250 = (($249) + 20|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = $251 << 24;
  $253 = $block;
  $254 = (($253) + 20|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = $255 >>> 8;
  $257 = $252 | $256;
  $258 = $257 & -16711936;
  $259 = $block;
  $260 = (($259) + 20|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = $261 << 8;
  $263 = $block;
  $264 = (($263) + 20|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $265 >>> 24;
  $267 = $262 | $266;
  $268 = $267 & 16711935;
  $269 = $258 | $268;
  $270 = $block;
  $271 = (($270) + 20|0);
  HEAP32[$271>>2] = $269;
  $272 = (($248) + ($269))|0;
  $273 = (($272) + 1518500249)|0;
  $274 = $a;
  $275 = $274 << 5;
  $276 = $a;
  $277 = $276 >>> 27;
  $278 = $275 | $277;
  $279 = (($273) + ($278))|0;
  $280 = $e;
  $281 = (($280) + ($279))|0;
  $e = $281;
  $282 = $b;
  $283 = $282 << 30;
  $284 = $b;
  $285 = $284 >>> 2;
  $286 = $283 | $285;
  $b = $286;
  $287 = $a;
  $288 = $b;
  $289 = $c;
  $290 = $288 ^ $289;
  $291 = $287 & $290;
  $292 = $c;
  $293 = $291 ^ $292;
  $294 = $block;
  $295 = (($294) + 24|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = $296 << 24;
  $298 = $block;
  $299 = (($298) + 24|0);
  $300 = HEAP32[$299>>2]|0;
  $301 = $300 >>> 8;
  $302 = $297 | $301;
  $303 = $302 & -16711936;
  $304 = $block;
  $305 = (($304) + 24|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = $306 << 8;
  $308 = $block;
  $309 = (($308) + 24|0);
  $310 = HEAP32[$309>>2]|0;
  $311 = $310 >>> 24;
  $312 = $307 | $311;
  $313 = $312 & 16711935;
  $314 = $303 | $313;
  $315 = $block;
  $316 = (($315) + 24|0);
  HEAP32[$316>>2] = $314;
  $317 = (($293) + ($314))|0;
  $318 = (($317) + 1518500249)|0;
  $319 = $e;
  $320 = $319 << 5;
  $321 = $e;
  $322 = $321 >>> 27;
  $323 = $320 | $322;
  $324 = (($318) + ($323))|0;
  $325 = $d;
  $326 = (($325) + ($324))|0;
  $d = $326;
  $327 = $a;
  $328 = $327 << 30;
  $329 = $a;
  $330 = $329 >>> 2;
  $331 = $328 | $330;
  $a = $331;
  $332 = $e;
  $333 = $a;
  $334 = $b;
  $335 = $333 ^ $334;
  $336 = $332 & $335;
  $337 = $b;
  $338 = $336 ^ $337;
  $339 = $block;
  $340 = (($339) + 28|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = $341 << 24;
  $343 = $block;
  $344 = (($343) + 28|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = $345 >>> 8;
  $347 = $342 | $346;
  $348 = $347 & -16711936;
  $349 = $block;
  $350 = (($349) + 28|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = $351 << 8;
  $353 = $block;
  $354 = (($353) + 28|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = $355 >>> 24;
  $357 = $352 | $356;
  $358 = $357 & 16711935;
  $359 = $348 | $358;
  $360 = $block;
  $361 = (($360) + 28|0);
  HEAP32[$361>>2] = $359;
  $362 = (($338) + ($359))|0;
  $363 = (($362) + 1518500249)|0;
  $364 = $d;
  $365 = $364 << 5;
  $366 = $d;
  $367 = $366 >>> 27;
  $368 = $365 | $367;
  $369 = (($363) + ($368))|0;
  $370 = $c;
  $371 = (($370) + ($369))|0;
  $c = $371;
  $372 = $e;
  $373 = $372 << 30;
  $374 = $e;
  $375 = $374 >>> 2;
  $376 = $373 | $375;
  $e = $376;
  $377 = $d;
  $378 = $e;
  $379 = $a;
  $380 = $378 ^ $379;
  $381 = $377 & $380;
  $382 = $a;
  $383 = $381 ^ $382;
  $384 = $block;
  $385 = (($384) + 32|0);
  $386 = HEAP32[$385>>2]|0;
  $387 = $386 << 24;
  $388 = $block;
  $389 = (($388) + 32|0);
  $390 = HEAP32[$389>>2]|0;
  $391 = $390 >>> 8;
  $392 = $387 | $391;
  $393 = $392 & -16711936;
  $394 = $block;
  $395 = (($394) + 32|0);
  $396 = HEAP32[$395>>2]|0;
  $397 = $396 << 8;
  $398 = $block;
  $399 = (($398) + 32|0);
  $400 = HEAP32[$399>>2]|0;
  $401 = $400 >>> 24;
  $402 = $397 | $401;
  $403 = $402 & 16711935;
  $404 = $393 | $403;
  $405 = $block;
  $406 = (($405) + 32|0);
  HEAP32[$406>>2] = $404;
  $407 = (($383) + ($404))|0;
  $408 = (($407) + 1518500249)|0;
  $409 = $c;
  $410 = $409 << 5;
  $411 = $c;
  $412 = $411 >>> 27;
  $413 = $410 | $412;
  $414 = (($408) + ($413))|0;
  $415 = $b;
  $416 = (($415) + ($414))|0;
  $b = $416;
  $417 = $d;
  $418 = $417 << 30;
  $419 = $d;
  $420 = $419 >>> 2;
  $421 = $418 | $420;
  $d = $421;
  $422 = $c;
  $423 = $d;
  $424 = $e;
  $425 = $423 ^ $424;
  $426 = $422 & $425;
  $427 = $e;
  $428 = $426 ^ $427;
  $429 = $block;
  $430 = (($429) + 36|0);
  $431 = HEAP32[$430>>2]|0;
  $432 = $431 << 24;
  $433 = $block;
  $434 = (($433) + 36|0);
  $435 = HEAP32[$434>>2]|0;
  $436 = $435 >>> 8;
  $437 = $432 | $436;
  $438 = $437 & -16711936;
  $439 = $block;
  $440 = (($439) + 36|0);
  $441 = HEAP32[$440>>2]|0;
  $442 = $441 << 8;
  $443 = $block;
  $444 = (($443) + 36|0);
  $445 = HEAP32[$444>>2]|0;
  $446 = $445 >>> 24;
  $447 = $442 | $446;
  $448 = $447 & 16711935;
  $449 = $438 | $448;
  $450 = $block;
  $451 = (($450) + 36|0);
  HEAP32[$451>>2] = $449;
  $452 = (($428) + ($449))|0;
  $453 = (($452) + 1518500249)|0;
  $454 = $b;
  $455 = $454 << 5;
  $456 = $b;
  $457 = $456 >>> 27;
  $458 = $455 | $457;
  $459 = (($453) + ($458))|0;
  $460 = $a;
  $461 = (($460) + ($459))|0;
  $a = $461;
  $462 = $c;
  $463 = $462 << 30;
  $464 = $c;
  $465 = $464 >>> 2;
  $466 = $463 | $465;
  $c = $466;
  $467 = $b;
  $468 = $c;
  $469 = $d;
  $470 = $468 ^ $469;
  $471 = $467 & $470;
  $472 = $d;
  $473 = $471 ^ $472;
  $474 = $block;
  $475 = (($474) + 40|0);
  $476 = HEAP32[$475>>2]|0;
  $477 = $476 << 24;
  $478 = $block;
  $479 = (($478) + 40|0);
  $480 = HEAP32[$479>>2]|0;
  $481 = $480 >>> 8;
  $482 = $477 | $481;
  $483 = $482 & -16711936;
  $484 = $block;
  $485 = (($484) + 40|0);
  $486 = HEAP32[$485>>2]|0;
  $487 = $486 << 8;
  $488 = $block;
  $489 = (($488) + 40|0);
  $490 = HEAP32[$489>>2]|0;
  $491 = $490 >>> 24;
  $492 = $487 | $491;
  $493 = $492 & 16711935;
  $494 = $483 | $493;
  $495 = $block;
  $496 = (($495) + 40|0);
  HEAP32[$496>>2] = $494;
  $497 = (($473) + ($494))|0;
  $498 = (($497) + 1518500249)|0;
  $499 = $a;
  $500 = $499 << 5;
  $501 = $a;
  $502 = $501 >>> 27;
  $503 = $500 | $502;
  $504 = (($498) + ($503))|0;
  $505 = $e;
  $506 = (($505) + ($504))|0;
  $e = $506;
  $507 = $b;
  $508 = $507 << 30;
  $509 = $b;
  $510 = $509 >>> 2;
  $511 = $508 | $510;
  $b = $511;
  $512 = $a;
  $513 = $b;
  $514 = $c;
  $515 = $513 ^ $514;
  $516 = $512 & $515;
  $517 = $c;
  $518 = $516 ^ $517;
  $519 = $block;
  $520 = (($519) + 44|0);
  $521 = HEAP32[$520>>2]|0;
  $522 = $521 << 24;
  $523 = $block;
  $524 = (($523) + 44|0);
  $525 = HEAP32[$524>>2]|0;
  $526 = $525 >>> 8;
  $527 = $522 | $526;
  $528 = $527 & -16711936;
  $529 = $block;
  $530 = (($529) + 44|0);
  $531 = HEAP32[$530>>2]|0;
  $532 = $531 << 8;
  $533 = $block;
  $534 = (($533) + 44|0);
  $535 = HEAP32[$534>>2]|0;
  $536 = $535 >>> 24;
  $537 = $532 | $536;
  $538 = $537 & 16711935;
  $539 = $528 | $538;
  $540 = $block;
  $541 = (($540) + 44|0);
  HEAP32[$541>>2] = $539;
  $542 = (($518) + ($539))|0;
  $543 = (($542) + 1518500249)|0;
  $544 = $e;
  $545 = $544 << 5;
  $546 = $e;
  $547 = $546 >>> 27;
  $548 = $545 | $547;
  $549 = (($543) + ($548))|0;
  $550 = $d;
  $551 = (($550) + ($549))|0;
  $d = $551;
  $552 = $a;
  $553 = $552 << 30;
  $554 = $a;
  $555 = $554 >>> 2;
  $556 = $553 | $555;
  $a = $556;
  $557 = $e;
  $558 = $a;
  $559 = $b;
  $560 = $558 ^ $559;
  $561 = $557 & $560;
  $562 = $b;
  $563 = $561 ^ $562;
  $564 = $block;
  $565 = (($564) + 48|0);
  $566 = HEAP32[$565>>2]|0;
  $567 = $566 << 24;
  $568 = $block;
  $569 = (($568) + 48|0);
  $570 = HEAP32[$569>>2]|0;
  $571 = $570 >>> 8;
  $572 = $567 | $571;
  $573 = $572 & -16711936;
  $574 = $block;
  $575 = (($574) + 48|0);
  $576 = HEAP32[$575>>2]|0;
  $577 = $576 << 8;
  $578 = $block;
  $579 = (($578) + 48|0);
  $580 = HEAP32[$579>>2]|0;
  $581 = $580 >>> 24;
  $582 = $577 | $581;
  $583 = $582 & 16711935;
  $584 = $573 | $583;
  $585 = $block;
  $586 = (($585) + 48|0);
  HEAP32[$586>>2] = $584;
  $587 = (($563) + ($584))|0;
  $588 = (($587) + 1518500249)|0;
  $589 = $d;
  $590 = $589 << 5;
  $591 = $d;
  $592 = $591 >>> 27;
  $593 = $590 | $592;
  $594 = (($588) + ($593))|0;
  $595 = $c;
  $596 = (($595) + ($594))|0;
  $c = $596;
  $597 = $e;
  $598 = $597 << 30;
  $599 = $e;
  $600 = $599 >>> 2;
  $601 = $598 | $600;
  $e = $601;
  $602 = $d;
  $603 = $e;
  $604 = $a;
  $605 = $603 ^ $604;
  $606 = $602 & $605;
  $607 = $a;
  $608 = $606 ^ $607;
  $609 = $block;
  $610 = (($609) + 52|0);
  $611 = HEAP32[$610>>2]|0;
  $612 = $611 << 24;
  $613 = $block;
  $614 = (($613) + 52|0);
  $615 = HEAP32[$614>>2]|0;
  $616 = $615 >>> 8;
  $617 = $612 | $616;
  $618 = $617 & -16711936;
  $619 = $block;
  $620 = (($619) + 52|0);
  $621 = HEAP32[$620>>2]|0;
  $622 = $621 << 8;
  $623 = $block;
  $624 = (($623) + 52|0);
  $625 = HEAP32[$624>>2]|0;
  $626 = $625 >>> 24;
  $627 = $622 | $626;
  $628 = $627 & 16711935;
  $629 = $618 | $628;
  $630 = $block;
  $631 = (($630) + 52|0);
  HEAP32[$631>>2] = $629;
  $632 = (($608) + ($629))|0;
  $633 = (($632) + 1518500249)|0;
  $634 = $c;
  $635 = $634 << 5;
  $636 = $c;
  $637 = $636 >>> 27;
  $638 = $635 | $637;
  $639 = (($633) + ($638))|0;
  $640 = $b;
  $641 = (($640) + ($639))|0;
  $b = $641;
  $642 = $d;
  $643 = $642 << 30;
  $644 = $d;
  $645 = $644 >>> 2;
  $646 = $643 | $645;
  $d = $646;
  $647 = $c;
  $648 = $d;
  $649 = $e;
  $650 = $648 ^ $649;
  $651 = $647 & $650;
  $652 = $e;
  $653 = $651 ^ $652;
  $654 = $block;
  $655 = (($654) + 56|0);
  $656 = HEAP32[$655>>2]|0;
  $657 = $656 << 24;
  $658 = $block;
  $659 = (($658) + 56|0);
  $660 = HEAP32[$659>>2]|0;
  $661 = $660 >>> 8;
  $662 = $657 | $661;
  $663 = $662 & -16711936;
  $664 = $block;
  $665 = (($664) + 56|0);
  $666 = HEAP32[$665>>2]|0;
  $667 = $666 << 8;
  $668 = $block;
  $669 = (($668) + 56|0);
  $670 = HEAP32[$669>>2]|0;
  $671 = $670 >>> 24;
  $672 = $667 | $671;
  $673 = $672 & 16711935;
  $674 = $663 | $673;
  $675 = $block;
  $676 = (($675) + 56|0);
  HEAP32[$676>>2] = $674;
  $677 = (($653) + ($674))|0;
  $678 = (($677) + 1518500249)|0;
  $679 = $b;
  $680 = $679 << 5;
  $681 = $b;
  $682 = $681 >>> 27;
  $683 = $680 | $682;
  $684 = (($678) + ($683))|0;
  $685 = $a;
  $686 = (($685) + ($684))|0;
  $a = $686;
  $687 = $c;
  $688 = $687 << 30;
  $689 = $c;
  $690 = $689 >>> 2;
  $691 = $688 | $690;
  $c = $691;
  $692 = $b;
  $693 = $c;
  $694 = $d;
  $695 = $693 ^ $694;
  $696 = $692 & $695;
  $697 = $d;
  $698 = $696 ^ $697;
  $699 = $block;
  $700 = (($699) + 60|0);
  $701 = HEAP32[$700>>2]|0;
  $702 = $701 << 24;
  $703 = $block;
  $704 = (($703) + 60|0);
  $705 = HEAP32[$704>>2]|0;
  $706 = $705 >>> 8;
  $707 = $702 | $706;
  $708 = $707 & -16711936;
  $709 = $block;
  $710 = (($709) + 60|0);
  $711 = HEAP32[$710>>2]|0;
  $712 = $711 << 8;
  $713 = $block;
  $714 = (($713) + 60|0);
  $715 = HEAP32[$714>>2]|0;
  $716 = $715 >>> 24;
  $717 = $712 | $716;
  $718 = $717 & 16711935;
  $719 = $708 | $718;
  $720 = $block;
  $721 = (($720) + 60|0);
  HEAP32[$721>>2] = $719;
  $722 = (($698) + ($719))|0;
  $723 = (($722) + 1518500249)|0;
  $724 = $a;
  $725 = $724 << 5;
  $726 = $a;
  $727 = $726 >>> 27;
  $728 = $725 | $727;
  $729 = (($723) + ($728))|0;
  $730 = $e;
  $731 = (($730) + ($729))|0;
  $e = $731;
  $732 = $b;
  $733 = $732 << 30;
  $734 = $b;
  $735 = $734 >>> 2;
  $736 = $733 | $735;
  $b = $736;
  $737 = $a;
  $738 = $b;
  $739 = $c;
  $740 = $738 ^ $739;
  $741 = $737 & $740;
  $742 = $c;
  $743 = $741 ^ $742;
  $744 = $block;
  $745 = (($744) + 52|0);
  $746 = HEAP32[$745>>2]|0;
  $747 = $block;
  $748 = (($747) + 32|0);
  $749 = HEAP32[$748>>2]|0;
  $750 = $746 ^ $749;
  $751 = $block;
  $752 = (($751) + 8|0);
  $753 = HEAP32[$752>>2]|0;
  $754 = $750 ^ $753;
  $755 = $block;
  $756 = HEAP32[$755>>2]|0;
  $757 = $754 ^ $756;
  $758 = $757 << 1;
  $759 = $block;
  $760 = (($759) + 52|0);
  $761 = HEAP32[$760>>2]|0;
  $762 = $block;
  $763 = (($762) + 32|0);
  $764 = HEAP32[$763>>2]|0;
  $765 = $761 ^ $764;
  $766 = $block;
  $767 = (($766) + 8|0);
  $768 = HEAP32[$767>>2]|0;
  $769 = $765 ^ $768;
  $770 = $block;
  $771 = HEAP32[$770>>2]|0;
  $772 = $769 ^ $771;
  $773 = $772 >>> 31;
  $774 = $758 | $773;
  $775 = $block;
  HEAP32[$775>>2] = $774;
  $776 = (($743) + ($774))|0;
  $777 = (($776) + 1518500249)|0;
  $778 = $e;
  $779 = $778 << 5;
  $780 = $e;
  $781 = $780 >>> 27;
  $782 = $779 | $781;
  $783 = (($777) + ($782))|0;
  $784 = $d;
  $785 = (($784) + ($783))|0;
  $d = $785;
  $786 = $a;
  $787 = $786 << 30;
  $788 = $a;
  $789 = $788 >>> 2;
  $790 = $787 | $789;
  $a = $790;
  $791 = $e;
  $792 = $a;
  $793 = $b;
  $794 = $792 ^ $793;
  $795 = $791 & $794;
  $796 = $b;
  $797 = $795 ^ $796;
  $798 = $block;
  $799 = (($798) + 56|0);
  $800 = HEAP32[$799>>2]|0;
  $801 = $block;
  $802 = (($801) + 36|0);
  $803 = HEAP32[$802>>2]|0;
  $804 = $800 ^ $803;
  $805 = $block;
  $806 = (($805) + 12|0);
  $807 = HEAP32[$806>>2]|0;
  $808 = $804 ^ $807;
  $809 = $block;
  $810 = (($809) + 4|0);
  $811 = HEAP32[$810>>2]|0;
  $812 = $808 ^ $811;
  $813 = $812 << 1;
  $814 = $block;
  $815 = (($814) + 56|0);
  $816 = HEAP32[$815>>2]|0;
  $817 = $block;
  $818 = (($817) + 36|0);
  $819 = HEAP32[$818>>2]|0;
  $820 = $816 ^ $819;
  $821 = $block;
  $822 = (($821) + 12|0);
  $823 = HEAP32[$822>>2]|0;
  $824 = $820 ^ $823;
  $825 = $block;
  $826 = (($825) + 4|0);
  $827 = HEAP32[$826>>2]|0;
  $828 = $824 ^ $827;
  $829 = $828 >>> 31;
  $830 = $813 | $829;
  $831 = $block;
  $832 = (($831) + 4|0);
  HEAP32[$832>>2] = $830;
  $833 = (($797) + ($830))|0;
  $834 = (($833) + 1518500249)|0;
  $835 = $d;
  $836 = $835 << 5;
  $837 = $d;
  $838 = $837 >>> 27;
  $839 = $836 | $838;
  $840 = (($834) + ($839))|0;
  $841 = $c;
  $842 = (($841) + ($840))|0;
  $c = $842;
  $843 = $e;
  $844 = $843 << 30;
  $845 = $e;
  $846 = $845 >>> 2;
  $847 = $844 | $846;
  $e = $847;
  $848 = $d;
  $849 = $e;
  $850 = $a;
  $851 = $849 ^ $850;
  $852 = $848 & $851;
  $853 = $a;
  $854 = $852 ^ $853;
  $855 = $block;
  $856 = (($855) + 60|0);
  $857 = HEAP32[$856>>2]|0;
  $858 = $block;
  $859 = (($858) + 40|0);
  $860 = HEAP32[$859>>2]|0;
  $861 = $857 ^ $860;
  $862 = $block;
  $863 = (($862) + 16|0);
  $864 = HEAP32[$863>>2]|0;
  $865 = $861 ^ $864;
  $866 = $block;
  $867 = (($866) + 8|0);
  $868 = HEAP32[$867>>2]|0;
  $869 = $865 ^ $868;
  $870 = $869 << 1;
  $871 = $block;
  $872 = (($871) + 60|0);
  $873 = HEAP32[$872>>2]|0;
  $874 = $block;
  $875 = (($874) + 40|0);
  $876 = HEAP32[$875>>2]|0;
  $877 = $873 ^ $876;
  $878 = $block;
  $879 = (($878) + 16|0);
  $880 = HEAP32[$879>>2]|0;
  $881 = $877 ^ $880;
  $882 = $block;
  $883 = (($882) + 8|0);
  $884 = HEAP32[$883>>2]|0;
  $885 = $881 ^ $884;
  $886 = $885 >>> 31;
  $887 = $870 | $886;
  $888 = $block;
  $889 = (($888) + 8|0);
  HEAP32[$889>>2] = $887;
  $890 = (($854) + ($887))|0;
  $891 = (($890) + 1518500249)|0;
  $892 = $c;
  $893 = $892 << 5;
  $894 = $c;
  $895 = $894 >>> 27;
  $896 = $893 | $895;
  $897 = (($891) + ($896))|0;
  $898 = $b;
  $899 = (($898) + ($897))|0;
  $b = $899;
  $900 = $d;
  $901 = $900 << 30;
  $902 = $d;
  $903 = $902 >>> 2;
  $904 = $901 | $903;
  $d = $904;
  $905 = $c;
  $906 = $d;
  $907 = $e;
  $908 = $906 ^ $907;
  $909 = $905 & $908;
  $910 = $e;
  $911 = $909 ^ $910;
  $912 = $block;
  $913 = HEAP32[$912>>2]|0;
  $914 = $block;
  $915 = (($914) + 44|0);
  $916 = HEAP32[$915>>2]|0;
  $917 = $913 ^ $916;
  $918 = $block;
  $919 = (($918) + 20|0);
  $920 = HEAP32[$919>>2]|0;
  $921 = $917 ^ $920;
  $922 = $block;
  $923 = (($922) + 12|0);
  $924 = HEAP32[$923>>2]|0;
  $925 = $921 ^ $924;
  $926 = $925 << 1;
  $927 = $block;
  $928 = HEAP32[$927>>2]|0;
  $929 = $block;
  $930 = (($929) + 44|0);
  $931 = HEAP32[$930>>2]|0;
  $932 = $928 ^ $931;
  $933 = $block;
  $934 = (($933) + 20|0);
  $935 = HEAP32[$934>>2]|0;
  $936 = $932 ^ $935;
  $937 = $block;
  $938 = (($937) + 12|0);
  $939 = HEAP32[$938>>2]|0;
  $940 = $936 ^ $939;
  $941 = $940 >>> 31;
  $942 = $926 | $941;
  $943 = $block;
  $944 = (($943) + 12|0);
  HEAP32[$944>>2] = $942;
  $945 = (($911) + ($942))|0;
  $946 = (($945) + 1518500249)|0;
  $947 = $b;
  $948 = $947 << 5;
  $949 = $b;
  $950 = $949 >>> 27;
  $951 = $948 | $950;
  $952 = (($946) + ($951))|0;
  $953 = $a;
  $954 = (($953) + ($952))|0;
  $a = $954;
  $955 = $c;
  $956 = $955 << 30;
  $957 = $c;
  $958 = $957 >>> 2;
  $959 = $956 | $958;
  $c = $959;
  $960 = $b;
  $961 = $c;
  $962 = $960 ^ $961;
  $963 = $d;
  $964 = $962 ^ $963;
  $965 = $block;
  $966 = (($965) + 4|0);
  $967 = HEAP32[$966>>2]|0;
  $968 = $block;
  $969 = (($968) + 48|0);
  $970 = HEAP32[$969>>2]|0;
  $971 = $967 ^ $970;
  $972 = $block;
  $973 = (($972) + 24|0);
  $974 = HEAP32[$973>>2]|0;
  $975 = $971 ^ $974;
  $976 = $block;
  $977 = (($976) + 16|0);
  $978 = HEAP32[$977>>2]|0;
  $979 = $975 ^ $978;
  $980 = $979 << 1;
  $981 = $block;
  $982 = (($981) + 4|0);
  $983 = HEAP32[$982>>2]|0;
  $984 = $block;
  $985 = (($984) + 48|0);
  $986 = HEAP32[$985>>2]|0;
  $987 = $983 ^ $986;
  $988 = $block;
  $989 = (($988) + 24|0);
  $990 = HEAP32[$989>>2]|0;
  $991 = $987 ^ $990;
  $992 = $block;
  $993 = (($992) + 16|0);
  $994 = HEAP32[$993>>2]|0;
  $995 = $991 ^ $994;
  $996 = $995 >>> 31;
  $997 = $980 | $996;
  $998 = $block;
  $999 = (($998) + 16|0);
  HEAP32[$999>>2] = $997;
  $1000 = (($964) + ($997))|0;
  $1001 = (($1000) + 1859775393)|0;
  $1002 = $a;
  $1003 = $1002 << 5;
  $1004 = $a;
  $1005 = $1004 >>> 27;
  $1006 = $1003 | $1005;
  $1007 = (($1001) + ($1006))|0;
  $1008 = $e;
  $1009 = (($1008) + ($1007))|0;
  $e = $1009;
  $1010 = $b;
  $1011 = $1010 << 30;
  $1012 = $b;
  $1013 = $1012 >>> 2;
  $1014 = $1011 | $1013;
  $b = $1014;
  $1015 = $a;
  $1016 = $b;
  $1017 = $1015 ^ $1016;
  $1018 = $c;
  $1019 = $1017 ^ $1018;
  $1020 = $block;
  $1021 = (($1020) + 8|0);
  $1022 = HEAP32[$1021>>2]|0;
  $1023 = $block;
  $1024 = (($1023) + 52|0);
  $1025 = HEAP32[$1024>>2]|0;
  $1026 = $1022 ^ $1025;
  $1027 = $block;
  $1028 = (($1027) + 28|0);
  $1029 = HEAP32[$1028>>2]|0;
  $1030 = $1026 ^ $1029;
  $1031 = $block;
  $1032 = (($1031) + 20|0);
  $1033 = HEAP32[$1032>>2]|0;
  $1034 = $1030 ^ $1033;
  $1035 = $1034 << 1;
  $1036 = $block;
  $1037 = (($1036) + 8|0);
  $1038 = HEAP32[$1037>>2]|0;
  $1039 = $block;
  $1040 = (($1039) + 52|0);
  $1041 = HEAP32[$1040>>2]|0;
  $1042 = $1038 ^ $1041;
  $1043 = $block;
  $1044 = (($1043) + 28|0);
  $1045 = HEAP32[$1044>>2]|0;
  $1046 = $1042 ^ $1045;
  $1047 = $block;
  $1048 = (($1047) + 20|0);
  $1049 = HEAP32[$1048>>2]|0;
  $1050 = $1046 ^ $1049;
  $1051 = $1050 >>> 31;
  $1052 = $1035 | $1051;
  $1053 = $block;
  $1054 = (($1053) + 20|0);
  HEAP32[$1054>>2] = $1052;
  $1055 = (($1019) + ($1052))|0;
  $1056 = (($1055) + 1859775393)|0;
  $1057 = $e;
  $1058 = $1057 << 5;
  $1059 = $e;
  $1060 = $1059 >>> 27;
  $1061 = $1058 | $1060;
  $1062 = (($1056) + ($1061))|0;
  $1063 = $d;
  $1064 = (($1063) + ($1062))|0;
  $d = $1064;
  $1065 = $a;
  $1066 = $1065 << 30;
  $1067 = $a;
  $1068 = $1067 >>> 2;
  $1069 = $1066 | $1068;
  $a = $1069;
  $1070 = $e;
  $1071 = $a;
  $1072 = $1070 ^ $1071;
  $1073 = $b;
  $1074 = $1072 ^ $1073;
  $1075 = $block;
  $1076 = (($1075) + 12|0);
  $1077 = HEAP32[$1076>>2]|0;
  $1078 = $block;
  $1079 = (($1078) + 56|0);
  $1080 = HEAP32[$1079>>2]|0;
  $1081 = $1077 ^ $1080;
  $1082 = $block;
  $1083 = (($1082) + 32|0);
  $1084 = HEAP32[$1083>>2]|0;
  $1085 = $1081 ^ $1084;
  $1086 = $block;
  $1087 = (($1086) + 24|0);
  $1088 = HEAP32[$1087>>2]|0;
  $1089 = $1085 ^ $1088;
  $1090 = $1089 << 1;
  $1091 = $block;
  $1092 = (($1091) + 12|0);
  $1093 = HEAP32[$1092>>2]|0;
  $1094 = $block;
  $1095 = (($1094) + 56|0);
  $1096 = HEAP32[$1095>>2]|0;
  $1097 = $1093 ^ $1096;
  $1098 = $block;
  $1099 = (($1098) + 32|0);
  $1100 = HEAP32[$1099>>2]|0;
  $1101 = $1097 ^ $1100;
  $1102 = $block;
  $1103 = (($1102) + 24|0);
  $1104 = HEAP32[$1103>>2]|0;
  $1105 = $1101 ^ $1104;
  $1106 = $1105 >>> 31;
  $1107 = $1090 | $1106;
  $1108 = $block;
  $1109 = (($1108) + 24|0);
  HEAP32[$1109>>2] = $1107;
  $1110 = (($1074) + ($1107))|0;
  $1111 = (($1110) + 1859775393)|0;
  $1112 = $d;
  $1113 = $1112 << 5;
  $1114 = $d;
  $1115 = $1114 >>> 27;
  $1116 = $1113 | $1115;
  $1117 = (($1111) + ($1116))|0;
  $1118 = $c;
  $1119 = (($1118) + ($1117))|0;
  $c = $1119;
  $1120 = $e;
  $1121 = $1120 << 30;
  $1122 = $e;
  $1123 = $1122 >>> 2;
  $1124 = $1121 | $1123;
  $e = $1124;
  $1125 = $d;
  $1126 = $e;
  $1127 = $1125 ^ $1126;
  $1128 = $a;
  $1129 = $1127 ^ $1128;
  $1130 = $block;
  $1131 = (($1130) + 16|0);
  $1132 = HEAP32[$1131>>2]|0;
  $1133 = $block;
  $1134 = (($1133) + 60|0);
  $1135 = HEAP32[$1134>>2]|0;
  $1136 = $1132 ^ $1135;
  $1137 = $block;
  $1138 = (($1137) + 36|0);
  $1139 = HEAP32[$1138>>2]|0;
  $1140 = $1136 ^ $1139;
  $1141 = $block;
  $1142 = (($1141) + 28|0);
  $1143 = HEAP32[$1142>>2]|0;
  $1144 = $1140 ^ $1143;
  $1145 = $1144 << 1;
  $1146 = $block;
  $1147 = (($1146) + 16|0);
  $1148 = HEAP32[$1147>>2]|0;
  $1149 = $block;
  $1150 = (($1149) + 60|0);
  $1151 = HEAP32[$1150>>2]|0;
  $1152 = $1148 ^ $1151;
  $1153 = $block;
  $1154 = (($1153) + 36|0);
  $1155 = HEAP32[$1154>>2]|0;
  $1156 = $1152 ^ $1155;
  $1157 = $block;
  $1158 = (($1157) + 28|0);
  $1159 = HEAP32[$1158>>2]|0;
  $1160 = $1156 ^ $1159;
  $1161 = $1160 >>> 31;
  $1162 = $1145 | $1161;
  $1163 = $block;
  $1164 = (($1163) + 28|0);
  HEAP32[$1164>>2] = $1162;
  $1165 = (($1129) + ($1162))|0;
  $1166 = (($1165) + 1859775393)|0;
  $1167 = $c;
  $1168 = $1167 << 5;
  $1169 = $c;
  $1170 = $1169 >>> 27;
  $1171 = $1168 | $1170;
  $1172 = (($1166) + ($1171))|0;
  $1173 = $b;
  $1174 = (($1173) + ($1172))|0;
  $b = $1174;
  $1175 = $d;
  $1176 = $1175 << 30;
  $1177 = $d;
  $1178 = $1177 >>> 2;
  $1179 = $1176 | $1178;
  $d = $1179;
  $1180 = $c;
  $1181 = $d;
  $1182 = $1180 ^ $1181;
  $1183 = $e;
  $1184 = $1182 ^ $1183;
  $1185 = $block;
  $1186 = (($1185) + 20|0);
  $1187 = HEAP32[$1186>>2]|0;
  $1188 = $block;
  $1189 = HEAP32[$1188>>2]|0;
  $1190 = $1187 ^ $1189;
  $1191 = $block;
  $1192 = (($1191) + 40|0);
  $1193 = HEAP32[$1192>>2]|0;
  $1194 = $1190 ^ $1193;
  $1195 = $block;
  $1196 = (($1195) + 32|0);
  $1197 = HEAP32[$1196>>2]|0;
  $1198 = $1194 ^ $1197;
  $1199 = $1198 << 1;
  $1200 = $block;
  $1201 = (($1200) + 20|0);
  $1202 = HEAP32[$1201>>2]|0;
  $1203 = $block;
  $1204 = HEAP32[$1203>>2]|0;
  $1205 = $1202 ^ $1204;
  $1206 = $block;
  $1207 = (($1206) + 40|0);
  $1208 = HEAP32[$1207>>2]|0;
  $1209 = $1205 ^ $1208;
  $1210 = $block;
  $1211 = (($1210) + 32|0);
  $1212 = HEAP32[$1211>>2]|0;
  $1213 = $1209 ^ $1212;
  $1214 = $1213 >>> 31;
  $1215 = $1199 | $1214;
  $1216 = $block;
  $1217 = (($1216) + 32|0);
  HEAP32[$1217>>2] = $1215;
  $1218 = (($1184) + ($1215))|0;
  $1219 = (($1218) + 1859775393)|0;
  $1220 = $b;
  $1221 = $1220 << 5;
  $1222 = $b;
  $1223 = $1222 >>> 27;
  $1224 = $1221 | $1223;
  $1225 = (($1219) + ($1224))|0;
  $1226 = $a;
  $1227 = (($1226) + ($1225))|0;
  $a = $1227;
  $1228 = $c;
  $1229 = $1228 << 30;
  $1230 = $c;
  $1231 = $1230 >>> 2;
  $1232 = $1229 | $1231;
  $c = $1232;
  $1233 = $b;
  $1234 = $c;
  $1235 = $1233 ^ $1234;
  $1236 = $d;
  $1237 = $1235 ^ $1236;
  $1238 = $block;
  $1239 = (($1238) + 24|0);
  $1240 = HEAP32[$1239>>2]|0;
  $1241 = $block;
  $1242 = (($1241) + 4|0);
  $1243 = HEAP32[$1242>>2]|0;
  $1244 = $1240 ^ $1243;
  $1245 = $block;
  $1246 = (($1245) + 44|0);
  $1247 = HEAP32[$1246>>2]|0;
  $1248 = $1244 ^ $1247;
  $1249 = $block;
  $1250 = (($1249) + 36|0);
  $1251 = HEAP32[$1250>>2]|0;
  $1252 = $1248 ^ $1251;
  $1253 = $1252 << 1;
  $1254 = $block;
  $1255 = (($1254) + 24|0);
  $1256 = HEAP32[$1255>>2]|0;
  $1257 = $block;
  $1258 = (($1257) + 4|0);
  $1259 = HEAP32[$1258>>2]|0;
  $1260 = $1256 ^ $1259;
  $1261 = $block;
  $1262 = (($1261) + 44|0);
  $1263 = HEAP32[$1262>>2]|0;
  $1264 = $1260 ^ $1263;
  $1265 = $block;
  $1266 = (($1265) + 36|0);
  $1267 = HEAP32[$1266>>2]|0;
  $1268 = $1264 ^ $1267;
  $1269 = $1268 >>> 31;
  $1270 = $1253 | $1269;
  $1271 = $block;
  $1272 = (($1271) + 36|0);
  HEAP32[$1272>>2] = $1270;
  $1273 = (($1237) + ($1270))|0;
  $1274 = (($1273) + 1859775393)|0;
  $1275 = $a;
  $1276 = $1275 << 5;
  $1277 = $a;
  $1278 = $1277 >>> 27;
  $1279 = $1276 | $1278;
  $1280 = (($1274) + ($1279))|0;
  $1281 = $e;
  $1282 = (($1281) + ($1280))|0;
  $e = $1282;
  $1283 = $b;
  $1284 = $1283 << 30;
  $1285 = $b;
  $1286 = $1285 >>> 2;
  $1287 = $1284 | $1286;
  $b = $1287;
  $1288 = $a;
  $1289 = $b;
  $1290 = $1288 ^ $1289;
  $1291 = $c;
  $1292 = $1290 ^ $1291;
  $1293 = $block;
  $1294 = (($1293) + 28|0);
  $1295 = HEAP32[$1294>>2]|0;
  $1296 = $block;
  $1297 = (($1296) + 8|0);
  $1298 = HEAP32[$1297>>2]|0;
  $1299 = $1295 ^ $1298;
  $1300 = $block;
  $1301 = (($1300) + 48|0);
  $1302 = HEAP32[$1301>>2]|0;
  $1303 = $1299 ^ $1302;
  $1304 = $block;
  $1305 = (($1304) + 40|0);
  $1306 = HEAP32[$1305>>2]|0;
  $1307 = $1303 ^ $1306;
  $1308 = $1307 << 1;
  $1309 = $block;
  $1310 = (($1309) + 28|0);
  $1311 = HEAP32[$1310>>2]|0;
  $1312 = $block;
  $1313 = (($1312) + 8|0);
  $1314 = HEAP32[$1313>>2]|0;
  $1315 = $1311 ^ $1314;
  $1316 = $block;
  $1317 = (($1316) + 48|0);
  $1318 = HEAP32[$1317>>2]|0;
  $1319 = $1315 ^ $1318;
  $1320 = $block;
  $1321 = (($1320) + 40|0);
  $1322 = HEAP32[$1321>>2]|0;
  $1323 = $1319 ^ $1322;
  $1324 = $1323 >>> 31;
  $1325 = $1308 | $1324;
  $1326 = $block;
  $1327 = (($1326) + 40|0);
  HEAP32[$1327>>2] = $1325;
  $1328 = (($1292) + ($1325))|0;
  $1329 = (($1328) + 1859775393)|0;
  $1330 = $e;
  $1331 = $1330 << 5;
  $1332 = $e;
  $1333 = $1332 >>> 27;
  $1334 = $1331 | $1333;
  $1335 = (($1329) + ($1334))|0;
  $1336 = $d;
  $1337 = (($1336) + ($1335))|0;
  $d = $1337;
  $1338 = $a;
  $1339 = $1338 << 30;
  $1340 = $a;
  $1341 = $1340 >>> 2;
  $1342 = $1339 | $1341;
  $a = $1342;
  $1343 = $e;
  $1344 = $a;
  $1345 = $1343 ^ $1344;
  $1346 = $b;
  $1347 = $1345 ^ $1346;
  $1348 = $block;
  $1349 = (($1348) + 32|0);
  $1350 = HEAP32[$1349>>2]|0;
  $1351 = $block;
  $1352 = (($1351) + 12|0);
  $1353 = HEAP32[$1352>>2]|0;
  $1354 = $1350 ^ $1353;
  $1355 = $block;
  $1356 = (($1355) + 52|0);
  $1357 = HEAP32[$1356>>2]|0;
  $1358 = $1354 ^ $1357;
  $1359 = $block;
  $1360 = (($1359) + 44|0);
  $1361 = HEAP32[$1360>>2]|0;
  $1362 = $1358 ^ $1361;
  $1363 = $1362 << 1;
  $1364 = $block;
  $1365 = (($1364) + 32|0);
  $1366 = HEAP32[$1365>>2]|0;
  $1367 = $block;
  $1368 = (($1367) + 12|0);
  $1369 = HEAP32[$1368>>2]|0;
  $1370 = $1366 ^ $1369;
  $1371 = $block;
  $1372 = (($1371) + 52|0);
  $1373 = HEAP32[$1372>>2]|0;
  $1374 = $1370 ^ $1373;
  $1375 = $block;
  $1376 = (($1375) + 44|0);
  $1377 = HEAP32[$1376>>2]|0;
  $1378 = $1374 ^ $1377;
  $1379 = $1378 >>> 31;
  $1380 = $1363 | $1379;
  $1381 = $block;
  $1382 = (($1381) + 44|0);
  HEAP32[$1382>>2] = $1380;
  $1383 = (($1347) + ($1380))|0;
  $1384 = (($1383) + 1859775393)|0;
  $1385 = $d;
  $1386 = $1385 << 5;
  $1387 = $d;
  $1388 = $1387 >>> 27;
  $1389 = $1386 | $1388;
  $1390 = (($1384) + ($1389))|0;
  $1391 = $c;
  $1392 = (($1391) + ($1390))|0;
  $c = $1392;
  $1393 = $e;
  $1394 = $1393 << 30;
  $1395 = $e;
  $1396 = $1395 >>> 2;
  $1397 = $1394 | $1396;
  $e = $1397;
  $1398 = $d;
  $1399 = $e;
  $1400 = $1398 ^ $1399;
  $1401 = $a;
  $1402 = $1400 ^ $1401;
  $1403 = $block;
  $1404 = (($1403) + 36|0);
  $1405 = HEAP32[$1404>>2]|0;
  $1406 = $block;
  $1407 = (($1406) + 16|0);
  $1408 = HEAP32[$1407>>2]|0;
  $1409 = $1405 ^ $1408;
  $1410 = $block;
  $1411 = (($1410) + 56|0);
  $1412 = HEAP32[$1411>>2]|0;
  $1413 = $1409 ^ $1412;
  $1414 = $block;
  $1415 = (($1414) + 48|0);
  $1416 = HEAP32[$1415>>2]|0;
  $1417 = $1413 ^ $1416;
  $1418 = $1417 << 1;
  $1419 = $block;
  $1420 = (($1419) + 36|0);
  $1421 = HEAP32[$1420>>2]|0;
  $1422 = $block;
  $1423 = (($1422) + 16|0);
  $1424 = HEAP32[$1423>>2]|0;
  $1425 = $1421 ^ $1424;
  $1426 = $block;
  $1427 = (($1426) + 56|0);
  $1428 = HEAP32[$1427>>2]|0;
  $1429 = $1425 ^ $1428;
  $1430 = $block;
  $1431 = (($1430) + 48|0);
  $1432 = HEAP32[$1431>>2]|0;
  $1433 = $1429 ^ $1432;
  $1434 = $1433 >>> 31;
  $1435 = $1418 | $1434;
  $1436 = $block;
  $1437 = (($1436) + 48|0);
  HEAP32[$1437>>2] = $1435;
  $1438 = (($1402) + ($1435))|0;
  $1439 = (($1438) + 1859775393)|0;
  $1440 = $c;
  $1441 = $1440 << 5;
  $1442 = $c;
  $1443 = $1442 >>> 27;
  $1444 = $1441 | $1443;
  $1445 = (($1439) + ($1444))|0;
  $1446 = $b;
  $1447 = (($1446) + ($1445))|0;
  $b = $1447;
  $1448 = $d;
  $1449 = $1448 << 30;
  $1450 = $d;
  $1451 = $1450 >>> 2;
  $1452 = $1449 | $1451;
  $d = $1452;
  $1453 = $c;
  $1454 = $d;
  $1455 = $1453 ^ $1454;
  $1456 = $e;
  $1457 = $1455 ^ $1456;
  $1458 = $block;
  $1459 = (($1458) + 40|0);
  $1460 = HEAP32[$1459>>2]|0;
  $1461 = $block;
  $1462 = (($1461) + 20|0);
  $1463 = HEAP32[$1462>>2]|0;
  $1464 = $1460 ^ $1463;
  $1465 = $block;
  $1466 = (($1465) + 60|0);
  $1467 = HEAP32[$1466>>2]|0;
  $1468 = $1464 ^ $1467;
  $1469 = $block;
  $1470 = (($1469) + 52|0);
  $1471 = HEAP32[$1470>>2]|0;
  $1472 = $1468 ^ $1471;
  $1473 = $1472 << 1;
  $1474 = $block;
  $1475 = (($1474) + 40|0);
  $1476 = HEAP32[$1475>>2]|0;
  $1477 = $block;
  $1478 = (($1477) + 20|0);
  $1479 = HEAP32[$1478>>2]|0;
  $1480 = $1476 ^ $1479;
  $1481 = $block;
  $1482 = (($1481) + 60|0);
  $1483 = HEAP32[$1482>>2]|0;
  $1484 = $1480 ^ $1483;
  $1485 = $block;
  $1486 = (($1485) + 52|0);
  $1487 = HEAP32[$1486>>2]|0;
  $1488 = $1484 ^ $1487;
  $1489 = $1488 >>> 31;
  $1490 = $1473 | $1489;
  $1491 = $block;
  $1492 = (($1491) + 52|0);
  HEAP32[$1492>>2] = $1490;
  $1493 = (($1457) + ($1490))|0;
  $1494 = (($1493) + 1859775393)|0;
  $1495 = $b;
  $1496 = $1495 << 5;
  $1497 = $b;
  $1498 = $1497 >>> 27;
  $1499 = $1496 | $1498;
  $1500 = (($1494) + ($1499))|0;
  $1501 = $a;
  $1502 = (($1501) + ($1500))|0;
  $a = $1502;
  $1503 = $c;
  $1504 = $1503 << 30;
  $1505 = $c;
  $1506 = $1505 >>> 2;
  $1507 = $1504 | $1506;
  $c = $1507;
  $1508 = $b;
  $1509 = $c;
  $1510 = $1508 ^ $1509;
  $1511 = $d;
  $1512 = $1510 ^ $1511;
  $1513 = $block;
  $1514 = (($1513) + 44|0);
  $1515 = HEAP32[$1514>>2]|0;
  $1516 = $block;
  $1517 = (($1516) + 24|0);
  $1518 = HEAP32[$1517>>2]|0;
  $1519 = $1515 ^ $1518;
  $1520 = $block;
  $1521 = HEAP32[$1520>>2]|0;
  $1522 = $1519 ^ $1521;
  $1523 = $block;
  $1524 = (($1523) + 56|0);
  $1525 = HEAP32[$1524>>2]|0;
  $1526 = $1522 ^ $1525;
  $1527 = $1526 << 1;
  $1528 = $block;
  $1529 = (($1528) + 44|0);
  $1530 = HEAP32[$1529>>2]|0;
  $1531 = $block;
  $1532 = (($1531) + 24|0);
  $1533 = HEAP32[$1532>>2]|0;
  $1534 = $1530 ^ $1533;
  $1535 = $block;
  $1536 = HEAP32[$1535>>2]|0;
  $1537 = $1534 ^ $1536;
  $1538 = $block;
  $1539 = (($1538) + 56|0);
  $1540 = HEAP32[$1539>>2]|0;
  $1541 = $1537 ^ $1540;
  $1542 = $1541 >>> 31;
  $1543 = $1527 | $1542;
  $1544 = $block;
  $1545 = (($1544) + 56|0);
  HEAP32[$1545>>2] = $1543;
  $1546 = (($1512) + ($1543))|0;
  $1547 = (($1546) + 1859775393)|0;
  $1548 = $a;
  $1549 = $1548 << 5;
  $1550 = $a;
  $1551 = $1550 >>> 27;
  $1552 = $1549 | $1551;
  $1553 = (($1547) + ($1552))|0;
  $1554 = $e;
  $1555 = (($1554) + ($1553))|0;
  $e = $1555;
  $1556 = $b;
  $1557 = $1556 << 30;
  $1558 = $b;
  $1559 = $1558 >>> 2;
  $1560 = $1557 | $1559;
  $b = $1560;
  $1561 = $a;
  $1562 = $b;
  $1563 = $1561 ^ $1562;
  $1564 = $c;
  $1565 = $1563 ^ $1564;
  $1566 = $block;
  $1567 = (($1566) + 48|0);
  $1568 = HEAP32[$1567>>2]|0;
  $1569 = $block;
  $1570 = (($1569) + 28|0);
  $1571 = HEAP32[$1570>>2]|0;
  $1572 = $1568 ^ $1571;
  $1573 = $block;
  $1574 = (($1573) + 4|0);
  $1575 = HEAP32[$1574>>2]|0;
  $1576 = $1572 ^ $1575;
  $1577 = $block;
  $1578 = (($1577) + 60|0);
  $1579 = HEAP32[$1578>>2]|0;
  $1580 = $1576 ^ $1579;
  $1581 = $1580 << 1;
  $1582 = $block;
  $1583 = (($1582) + 48|0);
  $1584 = HEAP32[$1583>>2]|0;
  $1585 = $block;
  $1586 = (($1585) + 28|0);
  $1587 = HEAP32[$1586>>2]|0;
  $1588 = $1584 ^ $1587;
  $1589 = $block;
  $1590 = (($1589) + 4|0);
  $1591 = HEAP32[$1590>>2]|0;
  $1592 = $1588 ^ $1591;
  $1593 = $block;
  $1594 = (($1593) + 60|0);
  $1595 = HEAP32[$1594>>2]|0;
  $1596 = $1592 ^ $1595;
  $1597 = $1596 >>> 31;
  $1598 = $1581 | $1597;
  $1599 = $block;
  $1600 = (($1599) + 60|0);
  HEAP32[$1600>>2] = $1598;
  $1601 = (($1565) + ($1598))|0;
  $1602 = (($1601) + 1859775393)|0;
  $1603 = $e;
  $1604 = $1603 << 5;
  $1605 = $e;
  $1606 = $1605 >>> 27;
  $1607 = $1604 | $1606;
  $1608 = (($1602) + ($1607))|0;
  $1609 = $d;
  $1610 = (($1609) + ($1608))|0;
  $d = $1610;
  $1611 = $a;
  $1612 = $1611 << 30;
  $1613 = $a;
  $1614 = $1613 >>> 2;
  $1615 = $1612 | $1614;
  $a = $1615;
  $1616 = $e;
  $1617 = $a;
  $1618 = $1616 ^ $1617;
  $1619 = $b;
  $1620 = $1618 ^ $1619;
  $1621 = $block;
  $1622 = (($1621) + 52|0);
  $1623 = HEAP32[$1622>>2]|0;
  $1624 = $block;
  $1625 = (($1624) + 32|0);
  $1626 = HEAP32[$1625>>2]|0;
  $1627 = $1623 ^ $1626;
  $1628 = $block;
  $1629 = (($1628) + 8|0);
  $1630 = HEAP32[$1629>>2]|0;
  $1631 = $1627 ^ $1630;
  $1632 = $block;
  $1633 = HEAP32[$1632>>2]|0;
  $1634 = $1631 ^ $1633;
  $1635 = $1634 << 1;
  $1636 = $block;
  $1637 = (($1636) + 52|0);
  $1638 = HEAP32[$1637>>2]|0;
  $1639 = $block;
  $1640 = (($1639) + 32|0);
  $1641 = HEAP32[$1640>>2]|0;
  $1642 = $1638 ^ $1641;
  $1643 = $block;
  $1644 = (($1643) + 8|0);
  $1645 = HEAP32[$1644>>2]|0;
  $1646 = $1642 ^ $1645;
  $1647 = $block;
  $1648 = HEAP32[$1647>>2]|0;
  $1649 = $1646 ^ $1648;
  $1650 = $1649 >>> 31;
  $1651 = $1635 | $1650;
  $1652 = $block;
  HEAP32[$1652>>2] = $1651;
  $1653 = (($1620) + ($1651))|0;
  $1654 = (($1653) + 1859775393)|0;
  $1655 = $d;
  $1656 = $1655 << 5;
  $1657 = $d;
  $1658 = $1657 >>> 27;
  $1659 = $1656 | $1658;
  $1660 = (($1654) + ($1659))|0;
  $1661 = $c;
  $1662 = (($1661) + ($1660))|0;
  $c = $1662;
  $1663 = $e;
  $1664 = $1663 << 30;
  $1665 = $e;
  $1666 = $1665 >>> 2;
  $1667 = $1664 | $1666;
  $e = $1667;
  $1668 = $d;
  $1669 = $e;
  $1670 = $1668 ^ $1669;
  $1671 = $a;
  $1672 = $1670 ^ $1671;
  $1673 = $block;
  $1674 = (($1673) + 56|0);
  $1675 = HEAP32[$1674>>2]|0;
  $1676 = $block;
  $1677 = (($1676) + 36|0);
  $1678 = HEAP32[$1677>>2]|0;
  $1679 = $1675 ^ $1678;
  $1680 = $block;
  $1681 = (($1680) + 12|0);
  $1682 = HEAP32[$1681>>2]|0;
  $1683 = $1679 ^ $1682;
  $1684 = $block;
  $1685 = (($1684) + 4|0);
  $1686 = HEAP32[$1685>>2]|0;
  $1687 = $1683 ^ $1686;
  $1688 = $1687 << 1;
  $1689 = $block;
  $1690 = (($1689) + 56|0);
  $1691 = HEAP32[$1690>>2]|0;
  $1692 = $block;
  $1693 = (($1692) + 36|0);
  $1694 = HEAP32[$1693>>2]|0;
  $1695 = $1691 ^ $1694;
  $1696 = $block;
  $1697 = (($1696) + 12|0);
  $1698 = HEAP32[$1697>>2]|0;
  $1699 = $1695 ^ $1698;
  $1700 = $block;
  $1701 = (($1700) + 4|0);
  $1702 = HEAP32[$1701>>2]|0;
  $1703 = $1699 ^ $1702;
  $1704 = $1703 >>> 31;
  $1705 = $1688 | $1704;
  $1706 = $block;
  $1707 = (($1706) + 4|0);
  HEAP32[$1707>>2] = $1705;
  $1708 = (($1672) + ($1705))|0;
  $1709 = (($1708) + 1859775393)|0;
  $1710 = $c;
  $1711 = $1710 << 5;
  $1712 = $c;
  $1713 = $1712 >>> 27;
  $1714 = $1711 | $1713;
  $1715 = (($1709) + ($1714))|0;
  $1716 = $b;
  $1717 = (($1716) + ($1715))|0;
  $b = $1717;
  $1718 = $d;
  $1719 = $1718 << 30;
  $1720 = $d;
  $1721 = $1720 >>> 2;
  $1722 = $1719 | $1721;
  $d = $1722;
  $1723 = $c;
  $1724 = $d;
  $1725 = $1723 ^ $1724;
  $1726 = $e;
  $1727 = $1725 ^ $1726;
  $1728 = $block;
  $1729 = (($1728) + 60|0);
  $1730 = HEAP32[$1729>>2]|0;
  $1731 = $block;
  $1732 = (($1731) + 40|0);
  $1733 = HEAP32[$1732>>2]|0;
  $1734 = $1730 ^ $1733;
  $1735 = $block;
  $1736 = (($1735) + 16|0);
  $1737 = HEAP32[$1736>>2]|0;
  $1738 = $1734 ^ $1737;
  $1739 = $block;
  $1740 = (($1739) + 8|0);
  $1741 = HEAP32[$1740>>2]|0;
  $1742 = $1738 ^ $1741;
  $1743 = $1742 << 1;
  $1744 = $block;
  $1745 = (($1744) + 60|0);
  $1746 = HEAP32[$1745>>2]|0;
  $1747 = $block;
  $1748 = (($1747) + 40|0);
  $1749 = HEAP32[$1748>>2]|0;
  $1750 = $1746 ^ $1749;
  $1751 = $block;
  $1752 = (($1751) + 16|0);
  $1753 = HEAP32[$1752>>2]|0;
  $1754 = $1750 ^ $1753;
  $1755 = $block;
  $1756 = (($1755) + 8|0);
  $1757 = HEAP32[$1756>>2]|0;
  $1758 = $1754 ^ $1757;
  $1759 = $1758 >>> 31;
  $1760 = $1743 | $1759;
  $1761 = $block;
  $1762 = (($1761) + 8|0);
  HEAP32[$1762>>2] = $1760;
  $1763 = (($1727) + ($1760))|0;
  $1764 = (($1763) + 1859775393)|0;
  $1765 = $b;
  $1766 = $1765 << 5;
  $1767 = $b;
  $1768 = $1767 >>> 27;
  $1769 = $1766 | $1768;
  $1770 = (($1764) + ($1769))|0;
  $1771 = $a;
  $1772 = (($1771) + ($1770))|0;
  $a = $1772;
  $1773 = $c;
  $1774 = $1773 << 30;
  $1775 = $c;
  $1776 = $1775 >>> 2;
  $1777 = $1774 | $1776;
  $c = $1777;
  $1778 = $b;
  $1779 = $c;
  $1780 = $1778 ^ $1779;
  $1781 = $d;
  $1782 = $1780 ^ $1781;
  $1783 = $block;
  $1784 = HEAP32[$1783>>2]|0;
  $1785 = $block;
  $1786 = (($1785) + 44|0);
  $1787 = HEAP32[$1786>>2]|0;
  $1788 = $1784 ^ $1787;
  $1789 = $block;
  $1790 = (($1789) + 20|0);
  $1791 = HEAP32[$1790>>2]|0;
  $1792 = $1788 ^ $1791;
  $1793 = $block;
  $1794 = (($1793) + 12|0);
  $1795 = HEAP32[$1794>>2]|0;
  $1796 = $1792 ^ $1795;
  $1797 = $1796 << 1;
  $1798 = $block;
  $1799 = HEAP32[$1798>>2]|0;
  $1800 = $block;
  $1801 = (($1800) + 44|0);
  $1802 = HEAP32[$1801>>2]|0;
  $1803 = $1799 ^ $1802;
  $1804 = $block;
  $1805 = (($1804) + 20|0);
  $1806 = HEAP32[$1805>>2]|0;
  $1807 = $1803 ^ $1806;
  $1808 = $block;
  $1809 = (($1808) + 12|0);
  $1810 = HEAP32[$1809>>2]|0;
  $1811 = $1807 ^ $1810;
  $1812 = $1811 >>> 31;
  $1813 = $1797 | $1812;
  $1814 = $block;
  $1815 = (($1814) + 12|0);
  HEAP32[$1815>>2] = $1813;
  $1816 = (($1782) + ($1813))|0;
  $1817 = (($1816) + 1859775393)|0;
  $1818 = $a;
  $1819 = $1818 << 5;
  $1820 = $a;
  $1821 = $1820 >>> 27;
  $1822 = $1819 | $1821;
  $1823 = (($1817) + ($1822))|0;
  $1824 = $e;
  $1825 = (($1824) + ($1823))|0;
  $e = $1825;
  $1826 = $b;
  $1827 = $1826 << 30;
  $1828 = $b;
  $1829 = $1828 >>> 2;
  $1830 = $1827 | $1829;
  $b = $1830;
  $1831 = $a;
  $1832 = $b;
  $1833 = $1831 ^ $1832;
  $1834 = $c;
  $1835 = $1833 ^ $1834;
  $1836 = $block;
  $1837 = (($1836) + 4|0);
  $1838 = HEAP32[$1837>>2]|0;
  $1839 = $block;
  $1840 = (($1839) + 48|0);
  $1841 = HEAP32[$1840>>2]|0;
  $1842 = $1838 ^ $1841;
  $1843 = $block;
  $1844 = (($1843) + 24|0);
  $1845 = HEAP32[$1844>>2]|0;
  $1846 = $1842 ^ $1845;
  $1847 = $block;
  $1848 = (($1847) + 16|0);
  $1849 = HEAP32[$1848>>2]|0;
  $1850 = $1846 ^ $1849;
  $1851 = $1850 << 1;
  $1852 = $block;
  $1853 = (($1852) + 4|0);
  $1854 = HEAP32[$1853>>2]|0;
  $1855 = $block;
  $1856 = (($1855) + 48|0);
  $1857 = HEAP32[$1856>>2]|0;
  $1858 = $1854 ^ $1857;
  $1859 = $block;
  $1860 = (($1859) + 24|0);
  $1861 = HEAP32[$1860>>2]|0;
  $1862 = $1858 ^ $1861;
  $1863 = $block;
  $1864 = (($1863) + 16|0);
  $1865 = HEAP32[$1864>>2]|0;
  $1866 = $1862 ^ $1865;
  $1867 = $1866 >>> 31;
  $1868 = $1851 | $1867;
  $1869 = $block;
  $1870 = (($1869) + 16|0);
  HEAP32[$1870>>2] = $1868;
  $1871 = (($1835) + ($1868))|0;
  $1872 = (($1871) + 1859775393)|0;
  $1873 = $e;
  $1874 = $1873 << 5;
  $1875 = $e;
  $1876 = $1875 >>> 27;
  $1877 = $1874 | $1876;
  $1878 = (($1872) + ($1877))|0;
  $1879 = $d;
  $1880 = (($1879) + ($1878))|0;
  $d = $1880;
  $1881 = $a;
  $1882 = $1881 << 30;
  $1883 = $a;
  $1884 = $1883 >>> 2;
  $1885 = $1882 | $1884;
  $a = $1885;
  $1886 = $e;
  $1887 = $a;
  $1888 = $1886 ^ $1887;
  $1889 = $b;
  $1890 = $1888 ^ $1889;
  $1891 = $block;
  $1892 = (($1891) + 8|0);
  $1893 = HEAP32[$1892>>2]|0;
  $1894 = $block;
  $1895 = (($1894) + 52|0);
  $1896 = HEAP32[$1895>>2]|0;
  $1897 = $1893 ^ $1896;
  $1898 = $block;
  $1899 = (($1898) + 28|0);
  $1900 = HEAP32[$1899>>2]|0;
  $1901 = $1897 ^ $1900;
  $1902 = $block;
  $1903 = (($1902) + 20|0);
  $1904 = HEAP32[$1903>>2]|0;
  $1905 = $1901 ^ $1904;
  $1906 = $1905 << 1;
  $1907 = $block;
  $1908 = (($1907) + 8|0);
  $1909 = HEAP32[$1908>>2]|0;
  $1910 = $block;
  $1911 = (($1910) + 52|0);
  $1912 = HEAP32[$1911>>2]|0;
  $1913 = $1909 ^ $1912;
  $1914 = $block;
  $1915 = (($1914) + 28|0);
  $1916 = HEAP32[$1915>>2]|0;
  $1917 = $1913 ^ $1916;
  $1918 = $block;
  $1919 = (($1918) + 20|0);
  $1920 = HEAP32[$1919>>2]|0;
  $1921 = $1917 ^ $1920;
  $1922 = $1921 >>> 31;
  $1923 = $1906 | $1922;
  $1924 = $block;
  $1925 = (($1924) + 20|0);
  HEAP32[$1925>>2] = $1923;
  $1926 = (($1890) + ($1923))|0;
  $1927 = (($1926) + 1859775393)|0;
  $1928 = $d;
  $1929 = $1928 << 5;
  $1930 = $d;
  $1931 = $1930 >>> 27;
  $1932 = $1929 | $1931;
  $1933 = (($1927) + ($1932))|0;
  $1934 = $c;
  $1935 = (($1934) + ($1933))|0;
  $c = $1935;
  $1936 = $e;
  $1937 = $1936 << 30;
  $1938 = $e;
  $1939 = $1938 >>> 2;
  $1940 = $1937 | $1939;
  $e = $1940;
  $1941 = $d;
  $1942 = $e;
  $1943 = $1941 ^ $1942;
  $1944 = $a;
  $1945 = $1943 ^ $1944;
  $1946 = $block;
  $1947 = (($1946) + 12|0);
  $1948 = HEAP32[$1947>>2]|0;
  $1949 = $block;
  $1950 = (($1949) + 56|0);
  $1951 = HEAP32[$1950>>2]|0;
  $1952 = $1948 ^ $1951;
  $1953 = $block;
  $1954 = (($1953) + 32|0);
  $1955 = HEAP32[$1954>>2]|0;
  $1956 = $1952 ^ $1955;
  $1957 = $block;
  $1958 = (($1957) + 24|0);
  $1959 = HEAP32[$1958>>2]|0;
  $1960 = $1956 ^ $1959;
  $1961 = $1960 << 1;
  $1962 = $block;
  $1963 = (($1962) + 12|0);
  $1964 = HEAP32[$1963>>2]|0;
  $1965 = $block;
  $1966 = (($1965) + 56|0);
  $1967 = HEAP32[$1966>>2]|0;
  $1968 = $1964 ^ $1967;
  $1969 = $block;
  $1970 = (($1969) + 32|0);
  $1971 = HEAP32[$1970>>2]|0;
  $1972 = $1968 ^ $1971;
  $1973 = $block;
  $1974 = (($1973) + 24|0);
  $1975 = HEAP32[$1974>>2]|0;
  $1976 = $1972 ^ $1975;
  $1977 = $1976 >>> 31;
  $1978 = $1961 | $1977;
  $1979 = $block;
  $1980 = (($1979) + 24|0);
  HEAP32[$1980>>2] = $1978;
  $1981 = (($1945) + ($1978))|0;
  $1982 = (($1981) + 1859775393)|0;
  $1983 = $c;
  $1984 = $1983 << 5;
  $1985 = $c;
  $1986 = $1985 >>> 27;
  $1987 = $1984 | $1986;
  $1988 = (($1982) + ($1987))|0;
  $1989 = $b;
  $1990 = (($1989) + ($1988))|0;
  $b = $1990;
  $1991 = $d;
  $1992 = $1991 << 30;
  $1993 = $d;
  $1994 = $1993 >>> 2;
  $1995 = $1992 | $1994;
  $d = $1995;
  $1996 = $c;
  $1997 = $d;
  $1998 = $1996 ^ $1997;
  $1999 = $e;
  $2000 = $1998 ^ $1999;
  $2001 = $block;
  $2002 = (($2001) + 16|0);
  $2003 = HEAP32[$2002>>2]|0;
  $2004 = $block;
  $2005 = (($2004) + 60|0);
  $2006 = HEAP32[$2005>>2]|0;
  $2007 = $2003 ^ $2006;
  $2008 = $block;
  $2009 = (($2008) + 36|0);
  $2010 = HEAP32[$2009>>2]|0;
  $2011 = $2007 ^ $2010;
  $2012 = $block;
  $2013 = (($2012) + 28|0);
  $2014 = HEAP32[$2013>>2]|0;
  $2015 = $2011 ^ $2014;
  $2016 = $2015 << 1;
  $2017 = $block;
  $2018 = (($2017) + 16|0);
  $2019 = HEAP32[$2018>>2]|0;
  $2020 = $block;
  $2021 = (($2020) + 60|0);
  $2022 = HEAP32[$2021>>2]|0;
  $2023 = $2019 ^ $2022;
  $2024 = $block;
  $2025 = (($2024) + 36|0);
  $2026 = HEAP32[$2025>>2]|0;
  $2027 = $2023 ^ $2026;
  $2028 = $block;
  $2029 = (($2028) + 28|0);
  $2030 = HEAP32[$2029>>2]|0;
  $2031 = $2027 ^ $2030;
  $2032 = $2031 >>> 31;
  $2033 = $2016 | $2032;
  $2034 = $block;
  $2035 = (($2034) + 28|0);
  HEAP32[$2035>>2] = $2033;
  $2036 = (($2000) + ($2033))|0;
  $2037 = (($2036) + 1859775393)|0;
  $2038 = $b;
  $2039 = $2038 << 5;
  $2040 = $b;
  $2041 = $2040 >>> 27;
  $2042 = $2039 | $2041;
  $2043 = (($2037) + ($2042))|0;
  $2044 = $a;
  $2045 = (($2044) + ($2043))|0;
  $a = $2045;
  $2046 = $c;
  $2047 = $2046 << 30;
  $2048 = $c;
  $2049 = $2048 >>> 2;
  $2050 = $2047 | $2049;
  $c = $2050;
  $2051 = $b;
  $2052 = $c;
  $2053 = $2051 | $2052;
  $2054 = $d;
  $2055 = $2053 & $2054;
  $2056 = $b;
  $2057 = $c;
  $2058 = $2056 & $2057;
  $2059 = $2055 | $2058;
  $2060 = $block;
  $2061 = (($2060) + 20|0);
  $2062 = HEAP32[$2061>>2]|0;
  $2063 = $block;
  $2064 = HEAP32[$2063>>2]|0;
  $2065 = $2062 ^ $2064;
  $2066 = $block;
  $2067 = (($2066) + 40|0);
  $2068 = HEAP32[$2067>>2]|0;
  $2069 = $2065 ^ $2068;
  $2070 = $block;
  $2071 = (($2070) + 32|0);
  $2072 = HEAP32[$2071>>2]|0;
  $2073 = $2069 ^ $2072;
  $2074 = $2073 << 1;
  $2075 = $block;
  $2076 = (($2075) + 20|0);
  $2077 = HEAP32[$2076>>2]|0;
  $2078 = $block;
  $2079 = HEAP32[$2078>>2]|0;
  $2080 = $2077 ^ $2079;
  $2081 = $block;
  $2082 = (($2081) + 40|0);
  $2083 = HEAP32[$2082>>2]|0;
  $2084 = $2080 ^ $2083;
  $2085 = $block;
  $2086 = (($2085) + 32|0);
  $2087 = HEAP32[$2086>>2]|0;
  $2088 = $2084 ^ $2087;
  $2089 = $2088 >>> 31;
  $2090 = $2074 | $2089;
  $2091 = $block;
  $2092 = (($2091) + 32|0);
  HEAP32[$2092>>2] = $2090;
  $2093 = (($2059) + ($2090))|0;
  $2094 = (($2093) + -1894007588)|0;
  $2095 = $a;
  $2096 = $2095 << 5;
  $2097 = $a;
  $2098 = $2097 >>> 27;
  $2099 = $2096 | $2098;
  $2100 = (($2094) + ($2099))|0;
  $2101 = $e;
  $2102 = (($2101) + ($2100))|0;
  $e = $2102;
  $2103 = $b;
  $2104 = $2103 << 30;
  $2105 = $b;
  $2106 = $2105 >>> 2;
  $2107 = $2104 | $2106;
  $b = $2107;
  $2108 = $a;
  $2109 = $b;
  $2110 = $2108 | $2109;
  $2111 = $c;
  $2112 = $2110 & $2111;
  $2113 = $a;
  $2114 = $b;
  $2115 = $2113 & $2114;
  $2116 = $2112 | $2115;
  $2117 = $block;
  $2118 = (($2117) + 24|0);
  $2119 = HEAP32[$2118>>2]|0;
  $2120 = $block;
  $2121 = (($2120) + 4|0);
  $2122 = HEAP32[$2121>>2]|0;
  $2123 = $2119 ^ $2122;
  $2124 = $block;
  $2125 = (($2124) + 44|0);
  $2126 = HEAP32[$2125>>2]|0;
  $2127 = $2123 ^ $2126;
  $2128 = $block;
  $2129 = (($2128) + 36|0);
  $2130 = HEAP32[$2129>>2]|0;
  $2131 = $2127 ^ $2130;
  $2132 = $2131 << 1;
  $2133 = $block;
  $2134 = (($2133) + 24|0);
  $2135 = HEAP32[$2134>>2]|0;
  $2136 = $block;
  $2137 = (($2136) + 4|0);
  $2138 = HEAP32[$2137>>2]|0;
  $2139 = $2135 ^ $2138;
  $2140 = $block;
  $2141 = (($2140) + 44|0);
  $2142 = HEAP32[$2141>>2]|0;
  $2143 = $2139 ^ $2142;
  $2144 = $block;
  $2145 = (($2144) + 36|0);
  $2146 = HEAP32[$2145>>2]|0;
  $2147 = $2143 ^ $2146;
  $2148 = $2147 >>> 31;
  $2149 = $2132 | $2148;
  $2150 = $block;
  $2151 = (($2150) + 36|0);
  HEAP32[$2151>>2] = $2149;
  $2152 = (($2116) + ($2149))|0;
  $2153 = (($2152) + -1894007588)|0;
  $2154 = $e;
  $2155 = $2154 << 5;
  $2156 = $e;
  $2157 = $2156 >>> 27;
  $2158 = $2155 | $2157;
  $2159 = (($2153) + ($2158))|0;
  $2160 = $d;
  $2161 = (($2160) + ($2159))|0;
  $d = $2161;
  $2162 = $a;
  $2163 = $2162 << 30;
  $2164 = $a;
  $2165 = $2164 >>> 2;
  $2166 = $2163 | $2165;
  $a = $2166;
  $2167 = $e;
  $2168 = $a;
  $2169 = $2167 | $2168;
  $2170 = $b;
  $2171 = $2169 & $2170;
  $2172 = $e;
  $2173 = $a;
  $2174 = $2172 & $2173;
  $2175 = $2171 | $2174;
  $2176 = $block;
  $2177 = (($2176) + 28|0);
  $2178 = HEAP32[$2177>>2]|0;
  $2179 = $block;
  $2180 = (($2179) + 8|0);
  $2181 = HEAP32[$2180>>2]|0;
  $2182 = $2178 ^ $2181;
  $2183 = $block;
  $2184 = (($2183) + 48|0);
  $2185 = HEAP32[$2184>>2]|0;
  $2186 = $2182 ^ $2185;
  $2187 = $block;
  $2188 = (($2187) + 40|0);
  $2189 = HEAP32[$2188>>2]|0;
  $2190 = $2186 ^ $2189;
  $2191 = $2190 << 1;
  $2192 = $block;
  $2193 = (($2192) + 28|0);
  $2194 = HEAP32[$2193>>2]|0;
  $2195 = $block;
  $2196 = (($2195) + 8|0);
  $2197 = HEAP32[$2196>>2]|0;
  $2198 = $2194 ^ $2197;
  $2199 = $block;
  $2200 = (($2199) + 48|0);
  $2201 = HEAP32[$2200>>2]|0;
  $2202 = $2198 ^ $2201;
  $2203 = $block;
  $2204 = (($2203) + 40|0);
  $2205 = HEAP32[$2204>>2]|0;
  $2206 = $2202 ^ $2205;
  $2207 = $2206 >>> 31;
  $2208 = $2191 | $2207;
  $2209 = $block;
  $2210 = (($2209) + 40|0);
  HEAP32[$2210>>2] = $2208;
  $2211 = (($2175) + ($2208))|0;
  $2212 = (($2211) + -1894007588)|0;
  $2213 = $d;
  $2214 = $2213 << 5;
  $2215 = $d;
  $2216 = $2215 >>> 27;
  $2217 = $2214 | $2216;
  $2218 = (($2212) + ($2217))|0;
  $2219 = $c;
  $2220 = (($2219) + ($2218))|0;
  $c = $2220;
  $2221 = $e;
  $2222 = $2221 << 30;
  $2223 = $e;
  $2224 = $2223 >>> 2;
  $2225 = $2222 | $2224;
  $e = $2225;
  $2226 = $d;
  $2227 = $e;
  $2228 = $2226 | $2227;
  $2229 = $a;
  $2230 = $2228 & $2229;
  $2231 = $d;
  $2232 = $e;
  $2233 = $2231 & $2232;
  $2234 = $2230 | $2233;
  $2235 = $block;
  $2236 = (($2235) + 32|0);
  $2237 = HEAP32[$2236>>2]|0;
  $2238 = $block;
  $2239 = (($2238) + 12|0);
  $2240 = HEAP32[$2239>>2]|0;
  $2241 = $2237 ^ $2240;
  $2242 = $block;
  $2243 = (($2242) + 52|0);
  $2244 = HEAP32[$2243>>2]|0;
  $2245 = $2241 ^ $2244;
  $2246 = $block;
  $2247 = (($2246) + 44|0);
  $2248 = HEAP32[$2247>>2]|0;
  $2249 = $2245 ^ $2248;
  $2250 = $2249 << 1;
  $2251 = $block;
  $2252 = (($2251) + 32|0);
  $2253 = HEAP32[$2252>>2]|0;
  $2254 = $block;
  $2255 = (($2254) + 12|0);
  $2256 = HEAP32[$2255>>2]|0;
  $2257 = $2253 ^ $2256;
  $2258 = $block;
  $2259 = (($2258) + 52|0);
  $2260 = HEAP32[$2259>>2]|0;
  $2261 = $2257 ^ $2260;
  $2262 = $block;
  $2263 = (($2262) + 44|0);
  $2264 = HEAP32[$2263>>2]|0;
  $2265 = $2261 ^ $2264;
  $2266 = $2265 >>> 31;
  $2267 = $2250 | $2266;
  $2268 = $block;
  $2269 = (($2268) + 44|0);
  HEAP32[$2269>>2] = $2267;
  $2270 = (($2234) + ($2267))|0;
  $2271 = (($2270) + -1894007588)|0;
  $2272 = $c;
  $2273 = $2272 << 5;
  $2274 = $c;
  $2275 = $2274 >>> 27;
  $2276 = $2273 | $2275;
  $2277 = (($2271) + ($2276))|0;
  $2278 = $b;
  $2279 = (($2278) + ($2277))|0;
  $b = $2279;
  $2280 = $d;
  $2281 = $2280 << 30;
  $2282 = $d;
  $2283 = $2282 >>> 2;
  $2284 = $2281 | $2283;
  $d = $2284;
  $2285 = $c;
  $2286 = $d;
  $2287 = $2285 | $2286;
  $2288 = $e;
  $2289 = $2287 & $2288;
  $2290 = $c;
  $2291 = $d;
  $2292 = $2290 & $2291;
  $2293 = $2289 | $2292;
  $2294 = $block;
  $2295 = (($2294) + 36|0);
  $2296 = HEAP32[$2295>>2]|0;
  $2297 = $block;
  $2298 = (($2297) + 16|0);
  $2299 = HEAP32[$2298>>2]|0;
  $2300 = $2296 ^ $2299;
  $2301 = $block;
  $2302 = (($2301) + 56|0);
  $2303 = HEAP32[$2302>>2]|0;
  $2304 = $2300 ^ $2303;
  $2305 = $block;
  $2306 = (($2305) + 48|0);
  $2307 = HEAP32[$2306>>2]|0;
  $2308 = $2304 ^ $2307;
  $2309 = $2308 << 1;
  $2310 = $block;
  $2311 = (($2310) + 36|0);
  $2312 = HEAP32[$2311>>2]|0;
  $2313 = $block;
  $2314 = (($2313) + 16|0);
  $2315 = HEAP32[$2314>>2]|0;
  $2316 = $2312 ^ $2315;
  $2317 = $block;
  $2318 = (($2317) + 56|0);
  $2319 = HEAP32[$2318>>2]|0;
  $2320 = $2316 ^ $2319;
  $2321 = $block;
  $2322 = (($2321) + 48|0);
  $2323 = HEAP32[$2322>>2]|0;
  $2324 = $2320 ^ $2323;
  $2325 = $2324 >>> 31;
  $2326 = $2309 | $2325;
  $2327 = $block;
  $2328 = (($2327) + 48|0);
  HEAP32[$2328>>2] = $2326;
  $2329 = (($2293) + ($2326))|0;
  $2330 = (($2329) + -1894007588)|0;
  $2331 = $b;
  $2332 = $2331 << 5;
  $2333 = $b;
  $2334 = $2333 >>> 27;
  $2335 = $2332 | $2334;
  $2336 = (($2330) + ($2335))|0;
  $2337 = $a;
  $2338 = (($2337) + ($2336))|0;
  $a = $2338;
  $2339 = $c;
  $2340 = $2339 << 30;
  $2341 = $c;
  $2342 = $2341 >>> 2;
  $2343 = $2340 | $2342;
  $c = $2343;
  $2344 = $b;
  $2345 = $c;
  $2346 = $2344 | $2345;
  $2347 = $d;
  $2348 = $2346 & $2347;
  $2349 = $b;
  $2350 = $c;
  $2351 = $2349 & $2350;
  $2352 = $2348 | $2351;
  $2353 = $block;
  $2354 = (($2353) + 40|0);
  $2355 = HEAP32[$2354>>2]|0;
  $2356 = $block;
  $2357 = (($2356) + 20|0);
  $2358 = HEAP32[$2357>>2]|0;
  $2359 = $2355 ^ $2358;
  $2360 = $block;
  $2361 = (($2360) + 60|0);
  $2362 = HEAP32[$2361>>2]|0;
  $2363 = $2359 ^ $2362;
  $2364 = $block;
  $2365 = (($2364) + 52|0);
  $2366 = HEAP32[$2365>>2]|0;
  $2367 = $2363 ^ $2366;
  $2368 = $2367 << 1;
  $2369 = $block;
  $2370 = (($2369) + 40|0);
  $2371 = HEAP32[$2370>>2]|0;
  $2372 = $block;
  $2373 = (($2372) + 20|0);
  $2374 = HEAP32[$2373>>2]|0;
  $2375 = $2371 ^ $2374;
  $2376 = $block;
  $2377 = (($2376) + 60|0);
  $2378 = HEAP32[$2377>>2]|0;
  $2379 = $2375 ^ $2378;
  $2380 = $block;
  $2381 = (($2380) + 52|0);
  $2382 = HEAP32[$2381>>2]|0;
  $2383 = $2379 ^ $2382;
  $2384 = $2383 >>> 31;
  $2385 = $2368 | $2384;
  $2386 = $block;
  $2387 = (($2386) + 52|0);
  HEAP32[$2387>>2] = $2385;
  $2388 = (($2352) + ($2385))|0;
  $2389 = (($2388) + -1894007588)|0;
  $2390 = $a;
  $2391 = $2390 << 5;
  $2392 = $a;
  $2393 = $2392 >>> 27;
  $2394 = $2391 | $2393;
  $2395 = (($2389) + ($2394))|0;
  $2396 = $e;
  $2397 = (($2396) + ($2395))|0;
  $e = $2397;
  $2398 = $b;
  $2399 = $2398 << 30;
  $2400 = $b;
  $2401 = $2400 >>> 2;
  $2402 = $2399 | $2401;
  $b = $2402;
  $2403 = $a;
  $2404 = $b;
  $2405 = $2403 | $2404;
  $2406 = $c;
  $2407 = $2405 & $2406;
  $2408 = $a;
  $2409 = $b;
  $2410 = $2408 & $2409;
  $2411 = $2407 | $2410;
  $2412 = $block;
  $2413 = (($2412) + 44|0);
  $2414 = HEAP32[$2413>>2]|0;
  $2415 = $block;
  $2416 = (($2415) + 24|0);
  $2417 = HEAP32[$2416>>2]|0;
  $2418 = $2414 ^ $2417;
  $2419 = $block;
  $2420 = HEAP32[$2419>>2]|0;
  $2421 = $2418 ^ $2420;
  $2422 = $block;
  $2423 = (($2422) + 56|0);
  $2424 = HEAP32[$2423>>2]|0;
  $2425 = $2421 ^ $2424;
  $2426 = $2425 << 1;
  $2427 = $block;
  $2428 = (($2427) + 44|0);
  $2429 = HEAP32[$2428>>2]|0;
  $2430 = $block;
  $2431 = (($2430) + 24|0);
  $2432 = HEAP32[$2431>>2]|0;
  $2433 = $2429 ^ $2432;
  $2434 = $block;
  $2435 = HEAP32[$2434>>2]|0;
  $2436 = $2433 ^ $2435;
  $2437 = $block;
  $2438 = (($2437) + 56|0);
  $2439 = HEAP32[$2438>>2]|0;
  $2440 = $2436 ^ $2439;
  $2441 = $2440 >>> 31;
  $2442 = $2426 | $2441;
  $2443 = $block;
  $2444 = (($2443) + 56|0);
  HEAP32[$2444>>2] = $2442;
  $2445 = (($2411) + ($2442))|0;
  $2446 = (($2445) + -1894007588)|0;
  $2447 = $e;
  $2448 = $2447 << 5;
  $2449 = $e;
  $2450 = $2449 >>> 27;
  $2451 = $2448 | $2450;
  $2452 = (($2446) + ($2451))|0;
  $2453 = $d;
  $2454 = (($2453) + ($2452))|0;
  $d = $2454;
  $2455 = $a;
  $2456 = $2455 << 30;
  $2457 = $a;
  $2458 = $2457 >>> 2;
  $2459 = $2456 | $2458;
  $a = $2459;
  $2460 = $e;
  $2461 = $a;
  $2462 = $2460 | $2461;
  $2463 = $b;
  $2464 = $2462 & $2463;
  $2465 = $e;
  $2466 = $a;
  $2467 = $2465 & $2466;
  $2468 = $2464 | $2467;
  $2469 = $block;
  $2470 = (($2469) + 48|0);
  $2471 = HEAP32[$2470>>2]|0;
  $2472 = $block;
  $2473 = (($2472) + 28|0);
  $2474 = HEAP32[$2473>>2]|0;
  $2475 = $2471 ^ $2474;
  $2476 = $block;
  $2477 = (($2476) + 4|0);
  $2478 = HEAP32[$2477>>2]|0;
  $2479 = $2475 ^ $2478;
  $2480 = $block;
  $2481 = (($2480) + 60|0);
  $2482 = HEAP32[$2481>>2]|0;
  $2483 = $2479 ^ $2482;
  $2484 = $2483 << 1;
  $2485 = $block;
  $2486 = (($2485) + 48|0);
  $2487 = HEAP32[$2486>>2]|0;
  $2488 = $block;
  $2489 = (($2488) + 28|0);
  $2490 = HEAP32[$2489>>2]|0;
  $2491 = $2487 ^ $2490;
  $2492 = $block;
  $2493 = (($2492) + 4|0);
  $2494 = HEAP32[$2493>>2]|0;
  $2495 = $2491 ^ $2494;
  $2496 = $block;
  $2497 = (($2496) + 60|0);
  $2498 = HEAP32[$2497>>2]|0;
  $2499 = $2495 ^ $2498;
  $2500 = $2499 >>> 31;
  $2501 = $2484 | $2500;
  $2502 = $block;
  $2503 = (($2502) + 60|0);
  HEAP32[$2503>>2] = $2501;
  $2504 = (($2468) + ($2501))|0;
  $2505 = (($2504) + -1894007588)|0;
  $2506 = $d;
  $2507 = $2506 << 5;
  $2508 = $d;
  $2509 = $2508 >>> 27;
  $2510 = $2507 | $2509;
  $2511 = (($2505) + ($2510))|0;
  $2512 = $c;
  $2513 = (($2512) + ($2511))|0;
  $c = $2513;
  $2514 = $e;
  $2515 = $2514 << 30;
  $2516 = $e;
  $2517 = $2516 >>> 2;
  $2518 = $2515 | $2517;
  $e = $2518;
  $2519 = $d;
  $2520 = $e;
  $2521 = $2519 | $2520;
  $2522 = $a;
  $2523 = $2521 & $2522;
  $2524 = $d;
  $2525 = $e;
  $2526 = $2524 & $2525;
  $2527 = $2523 | $2526;
  $2528 = $block;
  $2529 = (($2528) + 52|0);
  $2530 = HEAP32[$2529>>2]|0;
  $2531 = $block;
  $2532 = (($2531) + 32|0);
  $2533 = HEAP32[$2532>>2]|0;
  $2534 = $2530 ^ $2533;
  $2535 = $block;
  $2536 = (($2535) + 8|0);
  $2537 = HEAP32[$2536>>2]|0;
  $2538 = $2534 ^ $2537;
  $2539 = $block;
  $2540 = HEAP32[$2539>>2]|0;
  $2541 = $2538 ^ $2540;
  $2542 = $2541 << 1;
  $2543 = $block;
  $2544 = (($2543) + 52|0);
  $2545 = HEAP32[$2544>>2]|0;
  $2546 = $block;
  $2547 = (($2546) + 32|0);
  $2548 = HEAP32[$2547>>2]|0;
  $2549 = $2545 ^ $2548;
  $2550 = $block;
  $2551 = (($2550) + 8|0);
  $2552 = HEAP32[$2551>>2]|0;
  $2553 = $2549 ^ $2552;
  $2554 = $block;
  $2555 = HEAP32[$2554>>2]|0;
  $2556 = $2553 ^ $2555;
  $2557 = $2556 >>> 31;
  $2558 = $2542 | $2557;
  $2559 = $block;
  HEAP32[$2559>>2] = $2558;
  $2560 = (($2527) + ($2558))|0;
  $2561 = (($2560) + -1894007588)|0;
  $2562 = $c;
  $2563 = $2562 << 5;
  $2564 = $c;
  $2565 = $2564 >>> 27;
  $2566 = $2563 | $2565;
  $2567 = (($2561) + ($2566))|0;
  $2568 = $b;
  $2569 = (($2568) + ($2567))|0;
  $b = $2569;
  $2570 = $d;
  $2571 = $2570 << 30;
  $2572 = $d;
  $2573 = $2572 >>> 2;
  $2574 = $2571 | $2573;
  $d = $2574;
  $2575 = $c;
  $2576 = $d;
  $2577 = $2575 | $2576;
  $2578 = $e;
  $2579 = $2577 & $2578;
  $2580 = $c;
  $2581 = $d;
  $2582 = $2580 & $2581;
  $2583 = $2579 | $2582;
  $2584 = $block;
  $2585 = (($2584) + 56|0);
  $2586 = HEAP32[$2585>>2]|0;
  $2587 = $block;
  $2588 = (($2587) + 36|0);
  $2589 = HEAP32[$2588>>2]|0;
  $2590 = $2586 ^ $2589;
  $2591 = $block;
  $2592 = (($2591) + 12|0);
  $2593 = HEAP32[$2592>>2]|0;
  $2594 = $2590 ^ $2593;
  $2595 = $block;
  $2596 = (($2595) + 4|0);
  $2597 = HEAP32[$2596>>2]|0;
  $2598 = $2594 ^ $2597;
  $2599 = $2598 << 1;
  $2600 = $block;
  $2601 = (($2600) + 56|0);
  $2602 = HEAP32[$2601>>2]|0;
  $2603 = $block;
  $2604 = (($2603) + 36|0);
  $2605 = HEAP32[$2604>>2]|0;
  $2606 = $2602 ^ $2605;
  $2607 = $block;
  $2608 = (($2607) + 12|0);
  $2609 = HEAP32[$2608>>2]|0;
  $2610 = $2606 ^ $2609;
  $2611 = $block;
  $2612 = (($2611) + 4|0);
  $2613 = HEAP32[$2612>>2]|0;
  $2614 = $2610 ^ $2613;
  $2615 = $2614 >>> 31;
  $2616 = $2599 | $2615;
  $2617 = $block;
  $2618 = (($2617) + 4|0);
  HEAP32[$2618>>2] = $2616;
  $2619 = (($2583) + ($2616))|0;
  $2620 = (($2619) + -1894007588)|0;
  $2621 = $b;
  $2622 = $2621 << 5;
  $2623 = $b;
  $2624 = $2623 >>> 27;
  $2625 = $2622 | $2624;
  $2626 = (($2620) + ($2625))|0;
  $2627 = $a;
  $2628 = (($2627) + ($2626))|0;
  $a = $2628;
  $2629 = $c;
  $2630 = $2629 << 30;
  $2631 = $c;
  $2632 = $2631 >>> 2;
  $2633 = $2630 | $2632;
  $c = $2633;
  $2634 = $b;
  $2635 = $c;
  $2636 = $2634 | $2635;
  $2637 = $d;
  $2638 = $2636 & $2637;
  $2639 = $b;
  $2640 = $c;
  $2641 = $2639 & $2640;
  $2642 = $2638 | $2641;
  $2643 = $block;
  $2644 = (($2643) + 60|0);
  $2645 = HEAP32[$2644>>2]|0;
  $2646 = $block;
  $2647 = (($2646) + 40|0);
  $2648 = HEAP32[$2647>>2]|0;
  $2649 = $2645 ^ $2648;
  $2650 = $block;
  $2651 = (($2650) + 16|0);
  $2652 = HEAP32[$2651>>2]|0;
  $2653 = $2649 ^ $2652;
  $2654 = $block;
  $2655 = (($2654) + 8|0);
  $2656 = HEAP32[$2655>>2]|0;
  $2657 = $2653 ^ $2656;
  $2658 = $2657 << 1;
  $2659 = $block;
  $2660 = (($2659) + 60|0);
  $2661 = HEAP32[$2660>>2]|0;
  $2662 = $block;
  $2663 = (($2662) + 40|0);
  $2664 = HEAP32[$2663>>2]|0;
  $2665 = $2661 ^ $2664;
  $2666 = $block;
  $2667 = (($2666) + 16|0);
  $2668 = HEAP32[$2667>>2]|0;
  $2669 = $2665 ^ $2668;
  $2670 = $block;
  $2671 = (($2670) + 8|0);
  $2672 = HEAP32[$2671>>2]|0;
  $2673 = $2669 ^ $2672;
  $2674 = $2673 >>> 31;
  $2675 = $2658 | $2674;
  $2676 = $block;
  $2677 = (($2676) + 8|0);
  HEAP32[$2677>>2] = $2675;
  $2678 = (($2642) + ($2675))|0;
  $2679 = (($2678) + -1894007588)|0;
  $2680 = $a;
  $2681 = $2680 << 5;
  $2682 = $a;
  $2683 = $2682 >>> 27;
  $2684 = $2681 | $2683;
  $2685 = (($2679) + ($2684))|0;
  $2686 = $e;
  $2687 = (($2686) + ($2685))|0;
  $e = $2687;
  $2688 = $b;
  $2689 = $2688 << 30;
  $2690 = $b;
  $2691 = $2690 >>> 2;
  $2692 = $2689 | $2691;
  $b = $2692;
  $2693 = $a;
  $2694 = $b;
  $2695 = $2693 | $2694;
  $2696 = $c;
  $2697 = $2695 & $2696;
  $2698 = $a;
  $2699 = $b;
  $2700 = $2698 & $2699;
  $2701 = $2697 | $2700;
  $2702 = $block;
  $2703 = HEAP32[$2702>>2]|0;
  $2704 = $block;
  $2705 = (($2704) + 44|0);
  $2706 = HEAP32[$2705>>2]|0;
  $2707 = $2703 ^ $2706;
  $2708 = $block;
  $2709 = (($2708) + 20|0);
  $2710 = HEAP32[$2709>>2]|0;
  $2711 = $2707 ^ $2710;
  $2712 = $block;
  $2713 = (($2712) + 12|0);
  $2714 = HEAP32[$2713>>2]|0;
  $2715 = $2711 ^ $2714;
  $2716 = $2715 << 1;
  $2717 = $block;
  $2718 = HEAP32[$2717>>2]|0;
  $2719 = $block;
  $2720 = (($2719) + 44|0);
  $2721 = HEAP32[$2720>>2]|0;
  $2722 = $2718 ^ $2721;
  $2723 = $block;
  $2724 = (($2723) + 20|0);
  $2725 = HEAP32[$2724>>2]|0;
  $2726 = $2722 ^ $2725;
  $2727 = $block;
  $2728 = (($2727) + 12|0);
  $2729 = HEAP32[$2728>>2]|0;
  $2730 = $2726 ^ $2729;
  $2731 = $2730 >>> 31;
  $2732 = $2716 | $2731;
  $2733 = $block;
  $2734 = (($2733) + 12|0);
  HEAP32[$2734>>2] = $2732;
  $2735 = (($2701) + ($2732))|0;
  $2736 = (($2735) + -1894007588)|0;
  $2737 = $e;
  $2738 = $2737 << 5;
  $2739 = $e;
  $2740 = $2739 >>> 27;
  $2741 = $2738 | $2740;
  $2742 = (($2736) + ($2741))|0;
  $2743 = $d;
  $2744 = (($2743) + ($2742))|0;
  $d = $2744;
  $2745 = $a;
  $2746 = $2745 << 30;
  $2747 = $a;
  $2748 = $2747 >>> 2;
  $2749 = $2746 | $2748;
  $a = $2749;
  $2750 = $e;
  $2751 = $a;
  $2752 = $2750 | $2751;
  $2753 = $b;
  $2754 = $2752 & $2753;
  $2755 = $e;
  $2756 = $a;
  $2757 = $2755 & $2756;
  $2758 = $2754 | $2757;
  $2759 = $block;
  $2760 = (($2759) + 4|0);
  $2761 = HEAP32[$2760>>2]|0;
  $2762 = $block;
  $2763 = (($2762) + 48|0);
  $2764 = HEAP32[$2763>>2]|0;
  $2765 = $2761 ^ $2764;
  $2766 = $block;
  $2767 = (($2766) + 24|0);
  $2768 = HEAP32[$2767>>2]|0;
  $2769 = $2765 ^ $2768;
  $2770 = $block;
  $2771 = (($2770) + 16|0);
  $2772 = HEAP32[$2771>>2]|0;
  $2773 = $2769 ^ $2772;
  $2774 = $2773 << 1;
  $2775 = $block;
  $2776 = (($2775) + 4|0);
  $2777 = HEAP32[$2776>>2]|0;
  $2778 = $block;
  $2779 = (($2778) + 48|0);
  $2780 = HEAP32[$2779>>2]|0;
  $2781 = $2777 ^ $2780;
  $2782 = $block;
  $2783 = (($2782) + 24|0);
  $2784 = HEAP32[$2783>>2]|0;
  $2785 = $2781 ^ $2784;
  $2786 = $block;
  $2787 = (($2786) + 16|0);
  $2788 = HEAP32[$2787>>2]|0;
  $2789 = $2785 ^ $2788;
  $2790 = $2789 >>> 31;
  $2791 = $2774 | $2790;
  $2792 = $block;
  $2793 = (($2792) + 16|0);
  HEAP32[$2793>>2] = $2791;
  $2794 = (($2758) + ($2791))|0;
  $2795 = (($2794) + -1894007588)|0;
  $2796 = $d;
  $2797 = $2796 << 5;
  $2798 = $d;
  $2799 = $2798 >>> 27;
  $2800 = $2797 | $2799;
  $2801 = (($2795) + ($2800))|0;
  $2802 = $c;
  $2803 = (($2802) + ($2801))|0;
  $c = $2803;
  $2804 = $e;
  $2805 = $2804 << 30;
  $2806 = $e;
  $2807 = $2806 >>> 2;
  $2808 = $2805 | $2807;
  $e = $2808;
  $2809 = $d;
  $2810 = $e;
  $2811 = $2809 | $2810;
  $2812 = $a;
  $2813 = $2811 & $2812;
  $2814 = $d;
  $2815 = $e;
  $2816 = $2814 & $2815;
  $2817 = $2813 | $2816;
  $2818 = $block;
  $2819 = (($2818) + 8|0);
  $2820 = HEAP32[$2819>>2]|0;
  $2821 = $block;
  $2822 = (($2821) + 52|0);
  $2823 = HEAP32[$2822>>2]|0;
  $2824 = $2820 ^ $2823;
  $2825 = $block;
  $2826 = (($2825) + 28|0);
  $2827 = HEAP32[$2826>>2]|0;
  $2828 = $2824 ^ $2827;
  $2829 = $block;
  $2830 = (($2829) + 20|0);
  $2831 = HEAP32[$2830>>2]|0;
  $2832 = $2828 ^ $2831;
  $2833 = $2832 << 1;
  $2834 = $block;
  $2835 = (($2834) + 8|0);
  $2836 = HEAP32[$2835>>2]|0;
  $2837 = $block;
  $2838 = (($2837) + 52|0);
  $2839 = HEAP32[$2838>>2]|0;
  $2840 = $2836 ^ $2839;
  $2841 = $block;
  $2842 = (($2841) + 28|0);
  $2843 = HEAP32[$2842>>2]|0;
  $2844 = $2840 ^ $2843;
  $2845 = $block;
  $2846 = (($2845) + 20|0);
  $2847 = HEAP32[$2846>>2]|0;
  $2848 = $2844 ^ $2847;
  $2849 = $2848 >>> 31;
  $2850 = $2833 | $2849;
  $2851 = $block;
  $2852 = (($2851) + 20|0);
  HEAP32[$2852>>2] = $2850;
  $2853 = (($2817) + ($2850))|0;
  $2854 = (($2853) + -1894007588)|0;
  $2855 = $c;
  $2856 = $2855 << 5;
  $2857 = $c;
  $2858 = $2857 >>> 27;
  $2859 = $2856 | $2858;
  $2860 = (($2854) + ($2859))|0;
  $2861 = $b;
  $2862 = (($2861) + ($2860))|0;
  $b = $2862;
  $2863 = $d;
  $2864 = $2863 << 30;
  $2865 = $d;
  $2866 = $2865 >>> 2;
  $2867 = $2864 | $2866;
  $d = $2867;
  $2868 = $c;
  $2869 = $d;
  $2870 = $2868 | $2869;
  $2871 = $e;
  $2872 = $2870 & $2871;
  $2873 = $c;
  $2874 = $d;
  $2875 = $2873 & $2874;
  $2876 = $2872 | $2875;
  $2877 = $block;
  $2878 = (($2877) + 12|0);
  $2879 = HEAP32[$2878>>2]|0;
  $2880 = $block;
  $2881 = (($2880) + 56|0);
  $2882 = HEAP32[$2881>>2]|0;
  $2883 = $2879 ^ $2882;
  $2884 = $block;
  $2885 = (($2884) + 32|0);
  $2886 = HEAP32[$2885>>2]|0;
  $2887 = $2883 ^ $2886;
  $2888 = $block;
  $2889 = (($2888) + 24|0);
  $2890 = HEAP32[$2889>>2]|0;
  $2891 = $2887 ^ $2890;
  $2892 = $2891 << 1;
  $2893 = $block;
  $2894 = (($2893) + 12|0);
  $2895 = HEAP32[$2894>>2]|0;
  $2896 = $block;
  $2897 = (($2896) + 56|0);
  $2898 = HEAP32[$2897>>2]|0;
  $2899 = $2895 ^ $2898;
  $2900 = $block;
  $2901 = (($2900) + 32|0);
  $2902 = HEAP32[$2901>>2]|0;
  $2903 = $2899 ^ $2902;
  $2904 = $block;
  $2905 = (($2904) + 24|0);
  $2906 = HEAP32[$2905>>2]|0;
  $2907 = $2903 ^ $2906;
  $2908 = $2907 >>> 31;
  $2909 = $2892 | $2908;
  $2910 = $block;
  $2911 = (($2910) + 24|0);
  HEAP32[$2911>>2] = $2909;
  $2912 = (($2876) + ($2909))|0;
  $2913 = (($2912) + -1894007588)|0;
  $2914 = $b;
  $2915 = $2914 << 5;
  $2916 = $b;
  $2917 = $2916 >>> 27;
  $2918 = $2915 | $2917;
  $2919 = (($2913) + ($2918))|0;
  $2920 = $a;
  $2921 = (($2920) + ($2919))|0;
  $a = $2921;
  $2922 = $c;
  $2923 = $2922 << 30;
  $2924 = $c;
  $2925 = $2924 >>> 2;
  $2926 = $2923 | $2925;
  $c = $2926;
  $2927 = $b;
  $2928 = $c;
  $2929 = $2927 | $2928;
  $2930 = $d;
  $2931 = $2929 & $2930;
  $2932 = $b;
  $2933 = $c;
  $2934 = $2932 & $2933;
  $2935 = $2931 | $2934;
  $2936 = $block;
  $2937 = (($2936) + 16|0);
  $2938 = HEAP32[$2937>>2]|0;
  $2939 = $block;
  $2940 = (($2939) + 60|0);
  $2941 = HEAP32[$2940>>2]|0;
  $2942 = $2938 ^ $2941;
  $2943 = $block;
  $2944 = (($2943) + 36|0);
  $2945 = HEAP32[$2944>>2]|0;
  $2946 = $2942 ^ $2945;
  $2947 = $block;
  $2948 = (($2947) + 28|0);
  $2949 = HEAP32[$2948>>2]|0;
  $2950 = $2946 ^ $2949;
  $2951 = $2950 << 1;
  $2952 = $block;
  $2953 = (($2952) + 16|0);
  $2954 = HEAP32[$2953>>2]|0;
  $2955 = $block;
  $2956 = (($2955) + 60|0);
  $2957 = HEAP32[$2956>>2]|0;
  $2958 = $2954 ^ $2957;
  $2959 = $block;
  $2960 = (($2959) + 36|0);
  $2961 = HEAP32[$2960>>2]|0;
  $2962 = $2958 ^ $2961;
  $2963 = $block;
  $2964 = (($2963) + 28|0);
  $2965 = HEAP32[$2964>>2]|0;
  $2966 = $2962 ^ $2965;
  $2967 = $2966 >>> 31;
  $2968 = $2951 | $2967;
  $2969 = $block;
  $2970 = (($2969) + 28|0);
  HEAP32[$2970>>2] = $2968;
  $2971 = (($2935) + ($2968))|0;
  $2972 = (($2971) + -1894007588)|0;
  $2973 = $a;
  $2974 = $2973 << 5;
  $2975 = $a;
  $2976 = $2975 >>> 27;
  $2977 = $2974 | $2976;
  $2978 = (($2972) + ($2977))|0;
  $2979 = $e;
  $2980 = (($2979) + ($2978))|0;
  $e = $2980;
  $2981 = $b;
  $2982 = $2981 << 30;
  $2983 = $b;
  $2984 = $2983 >>> 2;
  $2985 = $2982 | $2984;
  $b = $2985;
  $2986 = $a;
  $2987 = $b;
  $2988 = $2986 | $2987;
  $2989 = $c;
  $2990 = $2988 & $2989;
  $2991 = $a;
  $2992 = $b;
  $2993 = $2991 & $2992;
  $2994 = $2990 | $2993;
  $2995 = $block;
  $2996 = (($2995) + 20|0);
  $2997 = HEAP32[$2996>>2]|0;
  $2998 = $block;
  $2999 = HEAP32[$2998>>2]|0;
  $3000 = $2997 ^ $2999;
  $3001 = $block;
  $3002 = (($3001) + 40|0);
  $3003 = HEAP32[$3002>>2]|0;
  $3004 = $3000 ^ $3003;
  $3005 = $block;
  $3006 = (($3005) + 32|0);
  $3007 = HEAP32[$3006>>2]|0;
  $3008 = $3004 ^ $3007;
  $3009 = $3008 << 1;
  $3010 = $block;
  $3011 = (($3010) + 20|0);
  $3012 = HEAP32[$3011>>2]|0;
  $3013 = $block;
  $3014 = HEAP32[$3013>>2]|0;
  $3015 = $3012 ^ $3014;
  $3016 = $block;
  $3017 = (($3016) + 40|0);
  $3018 = HEAP32[$3017>>2]|0;
  $3019 = $3015 ^ $3018;
  $3020 = $block;
  $3021 = (($3020) + 32|0);
  $3022 = HEAP32[$3021>>2]|0;
  $3023 = $3019 ^ $3022;
  $3024 = $3023 >>> 31;
  $3025 = $3009 | $3024;
  $3026 = $block;
  $3027 = (($3026) + 32|0);
  HEAP32[$3027>>2] = $3025;
  $3028 = (($2994) + ($3025))|0;
  $3029 = (($3028) + -1894007588)|0;
  $3030 = $e;
  $3031 = $3030 << 5;
  $3032 = $e;
  $3033 = $3032 >>> 27;
  $3034 = $3031 | $3033;
  $3035 = (($3029) + ($3034))|0;
  $3036 = $d;
  $3037 = (($3036) + ($3035))|0;
  $d = $3037;
  $3038 = $a;
  $3039 = $3038 << 30;
  $3040 = $a;
  $3041 = $3040 >>> 2;
  $3042 = $3039 | $3041;
  $a = $3042;
  $3043 = $e;
  $3044 = $a;
  $3045 = $3043 | $3044;
  $3046 = $b;
  $3047 = $3045 & $3046;
  $3048 = $e;
  $3049 = $a;
  $3050 = $3048 & $3049;
  $3051 = $3047 | $3050;
  $3052 = $block;
  $3053 = (($3052) + 24|0);
  $3054 = HEAP32[$3053>>2]|0;
  $3055 = $block;
  $3056 = (($3055) + 4|0);
  $3057 = HEAP32[$3056>>2]|0;
  $3058 = $3054 ^ $3057;
  $3059 = $block;
  $3060 = (($3059) + 44|0);
  $3061 = HEAP32[$3060>>2]|0;
  $3062 = $3058 ^ $3061;
  $3063 = $block;
  $3064 = (($3063) + 36|0);
  $3065 = HEAP32[$3064>>2]|0;
  $3066 = $3062 ^ $3065;
  $3067 = $3066 << 1;
  $3068 = $block;
  $3069 = (($3068) + 24|0);
  $3070 = HEAP32[$3069>>2]|0;
  $3071 = $block;
  $3072 = (($3071) + 4|0);
  $3073 = HEAP32[$3072>>2]|0;
  $3074 = $3070 ^ $3073;
  $3075 = $block;
  $3076 = (($3075) + 44|0);
  $3077 = HEAP32[$3076>>2]|0;
  $3078 = $3074 ^ $3077;
  $3079 = $block;
  $3080 = (($3079) + 36|0);
  $3081 = HEAP32[$3080>>2]|0;
  $3082 = $3078 ^ $3081;
  $3083 = $3082 >>> 31;
  $3084 = $3067 | $3083;
  $3085 = $block;
  $3086 = (($3085) + 36|0);
  HEAP32[$3086>>2] = $3084;
  $3087 = (($3051) + ($3084))|0;
  $3088 = (($3087) + -1894007588)|0;
  $3089 = $d;
  $3090 = $3089 << 5;
  $3091 = $d;
  $3092 = $3091 >>> 27;
  $3093 = $3090 | $3092;
  $3094 = (($3088) + ($3093))|0;
  $3095 = $c;
  $3096 = (($3095) + ($3094))|0;
  $c = $3096;
  $3097 = $e;
  $3098 = $3097 << 30;
  $3099 = $e;
  $3100 = $3099 >>> 2;
  $3101 = $3098 | $3100;
  $e = $3101;
  $3102 = $d;
  $3103 = $e;
  $3104 = $3102 | $3103;
  $3105 = $a;
  $3106 = $3104 & $3105;
  $3107 = $d;
  $3108 = $e;
  $3109 = $3107 & $3108;
  $3110 = $3106 | $3109;
  $3111 = $block;
  $3112 = (($3111) + 28|0);
  $3113 = HEAP32[$3112>>2]|0;
  $3114 = $block;
  $3115 = (($3114) + 8|0);
  $3116 = HEAP32[$3115>>2]|0;
  $3117 = $3113 ^ $3116;
  $3118 = $block;
  $3119 = (($3118) + 48|0);
  $3120 = HEAP32[$3119>>2]|0;
  $3121 = $3117 ^ $3120;
  $3122 = $block;
  $3123 = (($3122) + 40|0);
  $3124 = HEAP32[$3123>>2]|0;
  $3125 = $3121 ^ $3124;
  $3126 = $3125 << 1;
  $3127 = $block;
  $3128 = (($3127) + 28|0);
  $3129 = HEAP32[$3128>>2]|0;
  $3130 = $block;
  $3131 = (($3130) + 8|0);
  $3132 = HEAP32[$3131>>2]|0;
  $3133 = $3129 ^ $3132;
  $3134 = $block;
  $3135 = (($3134) + 48|0);
  $3136 = HEAP32[$3135>>2]|0;
  $3137 = $3133 ^ $3136;
  $3138 = $block;
  $3139 = (($3138) + 40|0);
  $3140 = HEAP32[$3139>>2]|0;
  $3141 = $3137 ^ $3140;
  $3142 = $3141 >>> 31;
  $3143 = $3126 | $3142;
  $3144 = $block;
  $3145 = (($3144) + 40|0);
  HEAP32[$3145>>2] = $3143;
  $3146 = (($3110) + ($3143))|0;
  $3147 = (($3146) + -1894007588)|0;
  $3148 = $c;
  $3149 = $3148 << 5;
  $3150 = $c;
  $3151 = $3150 >>> 27;
  $3152 = $3149 | $3151;
  $3153 = (($3147) + ($3152))|0;
  $3154 = $b;
  $3155 = (($3154) + ($3153))|0;
  $b = $3155;
  $3156 = $d;
  $3157 = $3156 << 30;
  $3158 = $d;
  $3159 = $3158 >>> 2;
  $3160 = $3157 | $3159;
  $d = $3160;
  $3161 = $c;
  $3162 = $d;
  $3163 = $3161 | $3162;
  $3164 = $e;
  $3165 = $3163 & $3164;
  $3166 = $c;
  $3167 = $d;
  $3168 = $3166 & $3167;
  $3169 = $3165 | $3168;
  $3170 = $block;
  $3171 = (($3170) + 32|0);
  $3172 = HEAP32[$3171>>2]|0;
  $3173 = $block;
  $3174 = (($3173) + 12|0);
  $3175 = HEAP32[$3174>>2]|0;
  $3176 = $3172 ^ $3175;
  $3177 = $block;
  $3178 = (($3177) + 52|0);
  $3179 = HEAP32[$3178>>2]|0;
  $3180 = $3176 ^ $3179;
  $3181 = $block;
  $3182 = (($3181) + 44|0);
  $3183 = HEAP32[$3182>>2]|0;
  $3184 = $3180 ^ $3183;
  $3185 = $3184 << 1;
  $3186 = $block;
  $3187 = (($3186) + 32|0);
  $3188 = HEAP32[$3187>>2]|0;
  $3189 = $block;
  $3190 = (($3189) + 12|0);
  $3191 = HEAP32[$3190>>2]|0;
  $3192 = $3188 ^ $3191;
  $3193 = $block;
  $3194 = (($3193) + 52|0);
  $3195 = HEAP32[$3194>>2]|0;
  $3196 = $3192 ^ $3195;
  $3197 = $block;
  $3198 = (($3197) + 44|0);
  $3199 = HEAP32[$3198>>2]|0;
  $3200 = $3196 ^ $3199;
  $3201 = $3200 >>> 31;
  $3202 = $3185 | $3201;
  $3203 = $block;
  $3204 = (($3203) + 44|0);
  HEAP32[$3204>>2] = $3202;
  $3205 = (($3169) + ($3202))|0;
  $3206 = (($3205) + -1894007588)|0;
  $3207 = $b;
  $3208 = $3207 << 5;
  $3209 = $b;
  $3210 = $3209 >>> 27;
  $3211 = $3208 | $3210;
  $3212 = (($3206) + ($3211))|0;
  $3213 = $a;
  $3214 = (($3213) + ($3212))|0;
  $a = $3214;
  $3215 = $c;
  $3216 = $3215 << 30;
  $3217 = $c;
  $3218 = $3217 >>> 2;
  $3219 = $3216 | $3218;
  $c = $3219;
  $3220 = $b;
  $3221 = $c;
  $3222 = $3220 ^ $3221;
  $3223 = $d;
  $3224 = $3222 ^ $3223;
  $3225 = $block;
  $3226 = (($3225) + 36|0);
  $3227 = HEAP32[$3226>>2]|0;
  $3228 = $block;
  $3229 = (($3228) + 16|0);
  $3230 = HEAP32[$3229>>2]|0;
  $3231 = $3227 ^ $3230;
  $3232 = $block;
  $3233 = (($3232) + 56|0);
  $3234 = HEAP32[$3233>>2]|0;
  $3235 = $3231 ^ $3234;
  $3236 = $block;
  $3237 = (($3236) + 48|0);
  $3238 = HEAP32[$3237>>2]|0;
  $3239 = $3235 ^ $3238;
  $3240 = $3239 << 1;
  $3241 = $block;
  $3242 = (($3241) + 36|0);
  $3243 = HEAP32[$3242>>2]|0;
  $3244 = $block;
  $3245 = (($3244) + 16|0);
  $3246 = HEAP32[$3245>>2]|0;
  $3247 = $3243 ^ $3246;
  $3248 = $block;
  $3249 = (($3248) + 56|0);
  $3250 = HEAP32[$3249>>2]|0;
  $3251 = $3247 ^ $3250;
  $3252 = $block;
  $3253 = (($3252) + 48|0);
  $3254 = HEAP32[$3253>>2]|0;
  $3255 = $3251 ^ $3254;
  $3256 = $3255 >>> 31;
  $3257 = $3240 | $3256;
  $3258 = $block;
  $3259 = (($3258) + 48|0);
  HEAP32[$3259>>2] = $3257;
  $3260 = (($3224) + ($3257))|0;
  $3261 = (($3260) + -899497514)|0;
  $3262 = $a;
  $3263 = $3262 << 5;
  $3264 = $a;
  $3265 = $3264 >>> 27;
  $3266 = $3263 | $3265;
  $3267 = (($3261) + ($3266))|0;
  $3268 = $e;
  $3269 = (($3268) + ($3267))|0;
  $e = $3269;
  $3270 = $b;
  $3271 = $3270 << 30;
  $3272 = $b;
  $3273 = $3272 >>> 2;
  $3274 = $3271 | $3273;
  $b = $3274;
  $3275 = $a;
  $3276 = $b;
  $3277 = $3275 ^ $3276;
  $3278 = $c;
  $3279 = $3277 ^ $3278;
  $3280 = $block;
  $3281 = (($3280) + 40|0);
  $3282 = HEAP32[$3281>>2]|0;
  $3283 = $block;
  $3284 = (($3283) + 20|0);
  $3285 = HEAP32[$3284>>2]|0;
  $3286 = $3282 ^ $3285;
  $3287 = $block;
  $3288 = (($3287) + 60|0);
  $3289 = HEAP32[$3288>>2]|0;
  $3290 = $3286 ^ $3289;
  $3291 = $block;
  $3292 = (($3291) + 52|0);
  $3293 = HEAP32[$3292>>2]|0;
  $3294 = $3290 ^ $3293;
  $3295 = $3294 << 1;
  $3296 = $block;
  $3297 = (($3296) + 40|0);
  $3298 = HEAP32[$3297>>2]|0;
  $3299 = $block;
  $3300 = (($3299) + 20|0);
  $3301 = HEAP32[$3300>>2]|0;
  $3302 = $3298 ^ $3301;
  $3303 = $block;
  $3304 = (($3303) + 60|0);
  $3305 = HEAP32[$3304>>2]|0;
  $3306 = $3302 ^ $3305;
  $3307 = $block;
  $3308 = (($3307) + 52|0);
  $3309 = HEAP32[$3308>>2]|0;
  $3310 = $3306 ^ $3309;
  $3311 = $3310 >>> 31;
  $3312 = $3295 | $3311;
  $3313 = $block;
  $3314 = (($3313) + 52|0);
  HEAP32[$3314>>2] = $3312;
  $3315 = (($3279) + ($3312))|0;
  $3316 = (($3315) + -899497514)|0;
  $3317 = $e;
  $3318 = $3317 << 5;
  $3319 = $e;
  $3320 = $3319 >>> 27;
  $3321 = $3318 | $3320;
  $3322 = (($3316) + ($3321))|0;
  $3323 = $d;
  $3324 = (($3323) + ($3322))|0;
  $d = $3324;
  $3325 = $a;
  $3326 = $3325 << 30;
  $3327 = $a;
  $3328 = $3327 >>> 2;
  $3329 = $3326 | $3328;
  $a = $3329;
  $3330 = $e;
  $3331 = $a;
  $3332 = $3330 ^ $3331;
  $3333 = $b;
  $3334 = $3332 ^ $3333;
  $3335 = $block;
  $3336 = (($3335) + 44|0);
  $3337 = HEAP32[$3336>>2]|0;
  $3338 = $block;
  $3339 = (($3338) + 24|0);
  $3340 = HEAP32[$3339>>2]|0;
  $3341 = $3337 ^ $3340;
  $3342 = $block;
  $3343 = HEAP32[$3342>>2]|0;
  $3344 = $3341 ^ $3343;
  $3345 = $block;
  $3346 = (($3345) + 56|0);
  $3347 = HEAP32[$3346>>2]|0;
  $3348 = $3344 ^ $3347;
  $3349 = $3348 << 1;
  $3350 = $block;
  $3351 = (($3350) + 44|0);
  $3352 = HEAP32[$3351>>2]|0;
  $3353 = $block;
  $3354 = (($3353) + 24|0);
  $3355 = HEAP32[$3354>>2]|0;
  $3356 = $3352 ^ $3355;
  $3357 = $block;
  $3358 = HEAP32[$3357>>2]|0;
  $3359 = $3356 ^ $3358;
  $3360 = $block;
  $3361 = (($3360) + 56|0);
  $3362 = HEAP32[$3361>>2]|0;
  $3363 = $3359 ^ $3362;
  $3364 = $3363 >>> 31;
  $3365 = $3349 | $3364;
  $3366 = $block;
  $3367 = (($3366) + 56|0);
  HEAP32[$3367>>2] = $3365;
  $3368 = (($3334) + ($3365))|0;
  $3369 = (($3368) + -899497514)|0;
  $3370 = $d;
  $3371 = $3370 << 5;
  $3372 = $d;
  $3373 = $3372 >>> 27;
  $3374 = $3371 | $3373;
  $3375 = (($3369) + ($3374))|0;
  $3376 = $c;
  $3377 = (($3376) + ($3375))|0;
  $c = $3377;
  $3378 = $e;
  $3379 = $3378 << 30;
  $3380 = $e;
  $3381 = $3380 >>> 2;
  $3382 = $3379 | $3381;
  $e = $3382;
  $3383 = $d;
  $3384 = $e;
  $3385 = $3383 ^ $3384;
  $3386 = $a;
  $3387 = $3385 ^ $3386;
  $3388 = $block;
  $3389 = (($3388) + 48|0);
  $3390 = HEAP32[$3389>>2]|0;
  $3391 = $block;
  $3392 = (($3391) + 28|0);
  $3393 = HEAP32[$3392>>2]|0;
  $3394 = $3390 ^ $3393;
  $3395 = $block;
  $3396 = (($3395) + 4|0);
  $3397 = HEAP32[$3396>>2]|0;
  $3398 = $3394 ^ $3397;
  $3399 = $block;
  $3400 = (($3399) + 60|0);
  $3401 = HEAP32[$3400>>2]|0;
  $3402 = $3398 ^ $3401;
  $3403 = $3402 << 1;
  $3404 = $block;
  $3405 = (($3404) + 48|0);
  $3406 = HEAP32[$3405>>2]|0;
  $3407 = $block;
  $3408 = (($3407) + 28|0);
  $3409 = HEAP32[$3408>>2]|0;
  $3410 = $3406 ^ $3409;
  $3411 = $block;
  $3412 = (($3411) + 4|0);
  $3413 = HEAP32[$3412>>2]|0;
  $3414 = $3410 ^ $3413;
  $3415 = $block;
  $3416 = (($3415) + 60|0);
  $3417 = HEAP32[$3416>>2]|0;
  $3418 = $3414 ^ $3417;
  $3419 = $3418 >>> 31;
  $3420 = $3403 | $3419;
  $3421 = $block;
  $3422 = (($3421) + 60|0);
  HEAP32[$3422>>2] = $3420;
  $3423 = (($3387) + ($3420))|0;
  $3424 = (($3423) + -899497514)|0;
  $3425 = $c;
  $3426 = $3425 << 5;
  $3427 = $c;
  $3428 = $3427 >>> 27;
  $3429 = $3426 | $3428;
  $3430 = (($3424) + ($3429))|0;
  $3431 = $b;
  $3432 = (($3431) + ($3430))|0;
  $b = $3432;
  $3433 = $d;
  $3434 = $3433 << 30;
  $3435 = $d;
  $3436 = $3435 >>> 2;
  $3437 = $3434 | $3436;
  $d = $3437;
  $3438 = $c;
  $3439 = $d;
  $3440 = $3438 ^ $3439;
  $3441 = $e;
  $3442 = $3440 ^ $3441;
  $3443 = $block;
  $3444 = (($3443) + 52|0);
  $3445 = HEAP32[$3444>>2]|0;
  $3446 = $block;
  $3447 = (($3446) + 32|0);
  $3448 = HEAP32[$3447>>2]|0;
  $3449 = $3445 ^ $3448;
  $3450 = $block;
  $3451 = (($3450) + 8|0);
  $3452 = HEAP32[$3451>>2]|0;
  $3453 = $3449 ^ $3452;
  $3454 = $block;
  $3455 = HEAP32[$3454>>2]|0;
  $3456 = $3453 ^ $3455;
  $3457 = $3456 << 1;
  $3458 = $block;
  $3459 = (($3458) + 52|0);
  $3460 = HEAP32[$3459>>2]|0;
  $3461 = $block;
  $3462 = (($3461) + 32|0);
  $3463 = HEAP32[$3462>>2]|0;
  $3464 = $3460 ^ $3463;
  $3465 = $block;
  $3466 = (($3465) + 8|0);
  $3467 = HEAP32[$3466>>2]|0;
  $3468 = $3464 ^ $3467;
  $3469 = $block;
  $3470 = HEAP32[$3469>>2]|0;
  $3471 = $3468 ^ $3470;
  $3472 = $3471 >>> 31;
  $3473 = $3457 | $3472;
  $3474 = $block;
  HEAP32[$3474>>2] = $3473;
  $3475 = (($3442) + ($3473))|0;
  $3476 = (($3475) + -899497514)|0;
  $3477 = $b;
  $3478 = $3477 << 5;
  $3479 = $b;
  $3480 = $3479 >>> 27;
  $3481 = $3478 | $3480;
  $3482 = (($3476) + ($3481))|0;
  $3483 = $a;
  $3484 = (($3483) + ($3482))|0;
  $a = $3484;
  $3485 = $c;
  $3486 = $3485 << 30;
  $3487 = $c;
  $3488 = $3487 >>> 2;
  $3489 = $3486 | $3488;
  $c = $3489;
  $3490 = $b;
  $3491 = $c;
  $3492 = $3490 ^ $3491;
  $3493 = $d;
  $3494 = $3492 ^ $3493;
  $3495 = $block;
  $3496 = (($3495) + 56|0);
  $3497 = HEAP32[$3496>>2]|0;
  $3498 = $block;
  $3499 = (($3498) + 36|0);
  $3500 = HEAP32[$3499>>2]|0;
  $3501 = $3497 ^ $3500;
  $3502 = $block;
  $3503 = (($3502) + 12|0);
  $3504 = HEAP32[$3503>>2]|0;
  $3505 = $3501 ^ $3504;
  $3506 = $block;
  $3507 = (($3506) + 4|0);
  $3508 = HEAP32[$3507>>2]|0;
  $3509 = $3505 ^ $3508;
  $3510 = $3509 << 1;
  $3511 = $block;
  $3512 = (($3511) + 56|0);
  $3513 = HEAP32[$3512>>2]|0;
  $3514 = $block;
  $3515 = (($3514) + 36|0);
  $3516 = HEAP32[$3515>>2]|0;
  $3517 = $3513 ^ $3516;
  $3518 = $block;
  $3519 = (($3518) + 12|0);
  $3520 = HEAP32[$3519>>2]|0;
  $3521 = $3517 ^ $3520;
  $3522 = $block;
  $3523 = (($3522) + 4|0);
  $3524 = HEAP32[$3523>>2]|0;
  $3525 = $3521 ^ $3524;
  $3526 = $3525 >>> 31;
  $3527 = $3510 | $3526;
  $3528 = $block;
  $3529 = (($3528) + 4|0);
  HEAP32[$3529>>2] = $3527;
  $3530 = (($3494) + ($3527))|0;
  $3531 = (($3530) + -899497514)|0;
  $3532 = $a;
  $3533 = $3532 << 5;
  $3534 = $a;
  $3535 = $3534 >>> 27;
  $3536 = $3533 | $3535;
  $3537 = (($3531) + ($3536))|0;
  $3538 = $e;
  $3539 = (($3538) + ($3537))|0;
  $e = $3539;
  $3540 = $b;
  $3541 = $3540 << 30;
  $3542 = $b;
  $3543 = $3542 >>> 2;
  $3544 = $3541 | $3543;
  $b = $3544;
  $3545 = $a;
  $3546 = $b;
  $3547 = $3545 ^ $3546;
  $3548 = $c;
  $3549 = $3547 ^ $3548;
  $3550 = $block;
  $3551 = (($3550) + 60|0);
  $3552 = HEAP32[$3551>>2]|0;
  $3553 = $block;
  $3554 = (($3553) + 40|0);
  $3555 = HEAP32[$3554>>2]|0;
  $3556 = $3552 ^ $3555;
  $3557 = $block;
  $3558 = (($3557) + 16|0);
  $3559 = HEAP32[$3558>>2]|0;
  $3560 = $3556 ^ $3559;
  $3561 = $block;
  $3562 = (($3561) + 8|0);
  $3563 = HEAP32[$3562>>2]|0;
  $3564 = $3560 ^ $3563;
  $3565 = $3564 << 1;
  $3566 = $block;
  $3567 = (($3566) + 60|0);
  $3568 = HEAP32[$3567>>2]|0;
  $3569 = $block;
  $3570 = (($3569) + 40|0);
  $3571 = HEAP32[$3570>>2]|0;
  $3572 = $3568 ^ $3571;
  $3573 = $block;
  $3574 = (($3573) + 16|0);
  $3575 = HEAP32[$3574>>2]|0;
  $3576 = $3572 ^ $3575;
  $3577 = $block;
  $3578 = (($3577) + 8|0);
  $3579 = HEAP32[$3578>>2]|0;
  $3580 = $3576 ^ $3579;
  $3581 = $3580 >>> 31;
  $3582 = $3565 | $3581;
  $3583 = $block;
  $3584 = (($3583) + 8|0);
  HEAP32[$3584>>2] = $3582;
  $3585 = (($3549) + ($3582))|0;
  $3586 = (($3585) + -899497514)|0;
  $3587 = $e;
  $3588 = $3587 << 5;
  $3589 = $e;
  $3590 = $3589 >>> 27;
  $3591 = $3588 | $3590;
  $3592 = (($3586) + ($3591))|0;
  $3593 = $d;
  $3594 = (($3593) + ($3592))|0;
  $d = $3594;
  $3595 = $a;
  $3596 = $3595 << 30;
  $3597 = $a;
  $3598 = $3597 >>> 2;
  $3599 = $3596 | $3598;
  $a = $3599;
  $3600 = $e;
  $3601 = $a;
  $3602 = $3600 ^ $3601;
  $3603 = $b;
  $3604 = $3602 ^ $3603;
  $3605 = $block;
  $3606 = HEAP32[$3605>>2]|0;
  $3607 = $block;
  $3608 = (($3607) + 44|0);
  $3609 = HEAP32[$3608>>2]|0;
  $3610 = $3606 ^ $3609;
  $3611 = $block;
  $3612 = (($3611) + 20|0);
  $3613 = HEAP32[$3612>>2]|0;
  $3614 = $3610 ^ $3613;
  $3615 = $block;
  $3616 = (($3615) + 12|0);
  $3617 = HEAP32[$3616>>2]|0;
  $3618 = $3614 ^ $3617;
  $3619 = $3618 << 1;
  $3620 = $block;
  $3621 = HEAP32[$3620>>2]|0;
  $3622 = $block;
  $3623 = (($3622) + 44|0);
  $3624 = HEAP32[$3623>>2]|0;
  $3625 = $3621 ^ $3624;
  $3626 = $block;
  $3627 = (($3626) + 20|0);
  $3628 = HEAP32[$3627>>2]|0;
  $3629 = $3625 ^ $3628;
  $3630 = $block;
  $3631 = (($3630) + 12|0);
  $3632 = HEAP32[$3631>>2]|0;
  $3633 = $3629 ^ $3632;
  $3634 = $3633 >>> 31;
  $3635 = $3619 | $3634;
  $3636 = $block;
  $3637 = (($3636) + 12|0);
  HEAP32[$3637>>2] = $3635;
  $3638 = (($3604) + ($3635))|0;
  $3639 = (($3638) + -899497514)|0;
  $3640 = $d;
  $3641 = $3640 << 5;
  $3642 = $d;
  $3643 = $3642 >>> 27;
  $3644 = $3641 | $3643;
  $3645 = (($3639) + ($3644))|0;
  $3646 = $c;
  $3647 = (($3646) + ($3645))|0;
  $c = $3647;
  $3648 = $e;
  $3649 = $3648 << 30;
  $3650 = $e;
  $3651 = $3650 >>> 2;
  $3652 = $3649 | $3651;
  $e = $3652;
  $3653 = $d;
  $3654 = $e;
  $3655 = $3653 ^ $3654;
  $3656 = $a;
  $3657 = $3655 ^ $3656;
  $3658 = $block;
  $3659 = (($3658) + 4|0);
  $3660 = HEAP32[$3659>>2]|0;
  $3661 = $block;
  $3662 = (($3661) + 48|0);
  $3663 = HEAP32[$3662>>2]|0;
  $3664 = $3660 ^ $3663;
  $3665 = $block;
  $3666 = (($3665) + 24|0);
  $3667 = HEAP32[$3666>>2]|0;
  $3668 = $3664 ^ $3667;
  $3669 = $block;
  $3670 = (($3669) + 16|0);
  $3671 = HEAP32[$3670>>2]|0;
  $3672 = $3668 ^ $3671;
  $3673 = $3672 << 1;
  $3674 = $block;
  $3675 = (($3674) + 4|0);
  $3676 = HEAP32[$3675>>2]|0;
  $3677 = $block;
  $3678 = (($3677) + 48|0);
  $3679 = HEAP32[$3678>>2]|0;
  $3680 = $3676 ^ $3679;
  $3681 = $block;
  $3682 = (($3681) + 24|0);
  $3683 = HEAP32[$3682>>2]|0;
  $3684 = $3680 ^ $3683;
  $3685 = $block;
  $3686 = (($3685) + 16|0);
  $3687 = HEAP32[$3686>>2]|0;
  $3688 = $3684 ^ $3687;
  $3689 = $3688 >>> 31;
  $3690 = $3673 | $3689;
  $3691 = $block;
  $3692 = (($3691) + 16|0);
  HEAP32[$3692>>2] = $3690;
  $3693 = (($3657) + ($3690))|0;
  $3694 = (($3693) + -899497514)|0;
  $3695 = $c;
  $3696 = $3695 << 5;
  $3697 = $c;
  $3698 = $3697 >>> 27;
  $3699 = $3696 | $3698;
  $3700 = (($3694) + ($3699))|0;
  $3701 = $b;
  $3702 = (($3701) + ($3700))|0;
  $b = $3702;
  $3703 = $d;
  $3704 = $3703 << 30;
  $3705 = $d;
  $3706 = $3705 >>> 2;
  $3707 = $3704 | $3706;
  $d = $3707;
  $3708 = $c;
  $3709 = $d;
  $3710 = $3708 ^ $3709;
  $3711 = $e;
  $3712 = $3710 ^ $3711;
  $3713 = $block;
  $3714 = (($3713) + 8|0);
  $3715 = HEAP32[$3714>>2]|0;
  $3716 = $block;
  $3717 = (($3716) + 52|0);
  $3718 = HEAP32[$3717>>2]|0;
  $3719 = $3715 ^ $3718;
  $3720 = $block;
  $3721 = (($3720) + 28|0);
  $3722 = HEAP32[$3721>>2]|0;
  $3723 = $3719 ^ $3722;
  $3724 = $block;
  $3725 = (($3724) + 20|0);
  $3726 = HEAP32[$3725>>2]|0;
  $3727 = $3723 ^ $3726;
  $3728 = $3727 << 1;
  $3729 = $block;
  $3730 = (($3729) + 8|0);
  $3731 = HEAP32[$3730>>2]|0;
  $3732 = $block;
  $3733 = (($3732) + 52|0);
  $3734 = HEAP32[$3733>>2]|0;
  $3735 = $3731 ^ $3734;
  $3736 = $block;
  $3737 = (($3736) + 28|0);
  $3738 = HEAP32[$3737>>2]|0;
  $3739 = $3735 ^ $3738;
  $3740 = $block;
  $3741 = (($3740) + 20|0);
  $3742 = HEAP32[$3741>>2]|0;
  $3743 = $3739 ^ $3742;
  $3744 = $3743 >>> 31;
  $3745 = $3728 | $3744;
  $3746 = $block;
  $3747 = (($3746) + 20|0);
  HEAP32[$3747>>2] = $3745;
  $3748 = (($3712) + ($3745))|0;
  $3749 = (($3748) + -899497514)|0;
  $3750 = $b;
  $3751 = $3750 << 5;
  $3752 = $b;
  $3753 = $3752 >>> 27;
  $3754 = $3751 | $3753;
  $3755 = (($3749) + ($3754))|0;
  $3756 = $a;
  $3757 = (($3756) + ($3755))|0;
  $a = $3757;
  $3758 = $c;
  $3759 = $3758 << 30;
  $3760 = $c;
  $3761 = $3760 >>> 2;
  $3762 = $3759 | $3761;
  $c = $3762;
  $3763 = $b;
  $3764 = $c;
  $3765 = $3763 ^ $3764;
  $3766 = $d;
  $3767 = $3765 ^ $3766;
  $3768 = $block;
  $3769 = (($3768) + 12|0);
  $3770 = HEAP32[$3769>>2]|0;
  $3771 = $block;
  $3772 = (($3771) + 56|0);
  $3773 = HEAP32[$3772>>2]|0;
  $3774 = $3770 ^ $3773;
  $3775 = $block;
  $3776 = (($3775) + 32|0);
  $3777 = HEAP32[$3776>>2]|0;
  $3778 = $3774 ^ $3777;
  $3779 = $block;
  $3780 = (($3779) + 24|0);
  $3781 = HEAP32[$3780>>2]|0;
  $3782 = $3778 ^ $3781;
  $3783 = $3782 << 1;
  $3784 = $block;
  $3785 = (($3784) + 12|0);
  $3786 = HEAP32[$3785>>2]|0;
  $3787 = $block;
  $3788 = (($3787) + 56|0);
  $3789 = HEAP32[$3788>>2]|0;
  $3790 = $3786 ^ $3789;
  $3791 = $block;
  $3792 = (($3791) + 32|0);
  $3793 = HEAP32[$3792>>2]|0;
  $3794 = $3790 ^ $3793;
  $3795 = $block;
  $3796 = (($3795) + 24|0);
  $3797 = HEAP32[$3796>>2]|0;
  $3798 = $3794 ^ $3797;
  $3799 = $3798 >>> 31;
  $3800 = $3783 | $3799;
  $3801 = $block;
  $3802 = (($3801) + 24|0);
  HEAP32[$3802>>2] = $3800;
  $3803 = (($3767) + ($3800))|0;
  $3804 = (($3803) + -899497514)|0;
  $3805 = $a;
  $3806 = $3805 << 5;
  $3807 = $a;
  $3808 = $3807 >>> 27;
  $3809 = $3806 | $3808;
  $3810 = (($3804) + ($3809))|0;
  $3811 = $e;
  $3812 = (($3811) + ($3810))|0;
  $e = $3812;
  $3813 = $b;
  $3814 = $3813 << 30;
  $3815 = $b;
  $3816 = $3815 >>> 2;
  $3817 = $3814 | $3816;
  $b = $3817;
  $3818 = $a;
  $3819 = $b;
  $3820 = $3818 ^ $3819;
  $3821 = $c;
  $3822 = $3820 ^ $3821;
  $3823 = $block;
  $3824 = (($3823) + 16|0);
  $3825 = HEAP32[$3824>>2]|0;
  $3826 = $block;
  $3827 = (($3826) + 60|0);
  $3828 = HEAP32[$3827>>2]|0;
  $3829 = $3825 ^ $3828;
  $3830 = $block;
  $3831 = (($3830) + 36|0);
  $3832 = HEAP32[$3831>>2]|0;
  $3833 = $3829 ^ $3832;
  $3834 = $block;
  $3835 = (($3834) + 28|0);
  $3836 = HEAP32[$3835>>2]|0;
  $3837 = $3833 ^ $3836;
  $3838 = $3837 << 1;
  $3839 = $block;
  $3840 = (($3839) + 16|0);
  $3841 = HEAP32[$3840>>2]|0;
  $3842 = $block;
  $3843 = (($3842) + 60|0);
  $3844 = HEAP32[$3843>>2]|0;
  $3845 = $3841 ^ $3844;
  $3846 = $block;
  $3847 = (($3846) + 36|0);
  $3848 = HEAP32[$3847>>2]|0;
  $3849 = $3845 ^ $3848;
  $3850 = $block;
  $3851 = (($3850) + 28|0);
  $3852 = HEAP32[$3851>>2]|0;
  $3853 = $3849 ^ $3852;
  $3854 = $3853 >>> 31;
  $3855 = $3838 | $3854;
  $3856 = $block;
  $3857 = (($3856) + 28|0);
  HEAP32[$3857>>2] = $3855;
  $3858 = (($3822) + ($3855))|0;
  $3859 = (($3858) + -899497514)|0;
  $3860 = $e;
  $3861 = $3860 << 5;
  $3862 = $e;
  $3863 = $3862 >>> 27;
  $3864 = $3861 | $3863;
  $3865 = (($3859) + ($3864))|0;
  $3866 = $d;
  $3867 = (($3866) + ($3865))|0;
  $d = $3867;
  $3868 = $a;
  $3869 = $3868 << 30;
  $3870 = $a;
  $3871 = $3870 >>> 2;
  $3872 = $3869 | $3871;
  $a = $3872;
  $3873 = $e;
  $3874 = $a;
  $3875 = $3873 ^ $3874;
  $3876 = $b;
  $3877 = $3875 ^ $3876;
  $3878 = $block;
  $3879 = (($3878) + 20|0);
  $3880 = HEAP32[$3879>>2]|0;
  $3881 = $block;
  $3882 = HEAP32[$3881>>2]|0;
  $3883 = $3880 ^ $3882;
  $3884 = $block;
  $3885 = (($3884) + 40|0);
  $3886 = HEAP32[$3885>>2]|0;
  $3887 = $3883 ^ $3886;
  $3888 = $block;
  $3889 = (($3888) + 32|0);
  $3890 = HEAP32[$3889>>2]|0;
  $3891 = $3887 ^ $3890;
  $3892 = $3891 << 1;
  $3893 = $block;
  $3894 = (($3893) + 20|0);
  $3895 = HEAP32[$3894>>2]|0;
  $3896 = $block;
  $3897 = HEAP32[$3896>>2]|0;
  $3898 = $3895 ^ $3897;
  $3899 = $block;
  $3900 = (($3899) + 40|0);
  $3901 = HEAP32[$3900>>2]|0;
  $3902 = $3898 ^ $3901;
  $3903 = $block;
  $3904 = (($3903) + 32|0);
  $3905 = HEAP32[$3904>>2]|0;
  $3906 = $3902 ^ $3905;
  $3907 = $3906 >>> 31;
  $3908 = $3892 | $3907;
  $3909 = $block;
  $3910 = (($3909) + 32|0);
  HEAP32[$3910>>2] = $3908;
  $3911 = (($3877) + ($3908))|0;
  $3912 = (($3911) + -899497514)|0;
  $3913 = $d;
  $3914 = $3913 << 5;
  $3915 = $d;
  $3916 = $3915 >>> 27;
  $3917 = $3914 | $3916;
  $3918 = (($3912) + ($3917))|0;
  $3919 = $c;
  $3920 = (($3919) + ($3918))|0;
  $c = $3920;
  $3921 = $e;
  $3922 = $3921 << 30;
  $3923 = $e;
  $3924 = $3923 >>> 2;
  $3925 = $3922 | $3924;
  $e = $3925;
  $3926 = $d;
  $3927 = $e;
  $3928 = $3926 ^ $3927;
  $3929 = $a;
  $3930 = $3928 ^ $3929;
  $3931 = $block;
  $3932 = (($3931) + 24|0);
  $3933 = HEAP32[$3932>>2]|0;
  $3934 = $block;
  $3935 = (($3934) + 4|0);
  $3936 = HEAP32[$3935>>2]|0;
  $3937 = $3933 ^ $3936;
  $3938 = $block;
  $3939 = (($3938) + 44|0);
  $3940 = HEAP32[$3939>>2]|0;
  $3941 = $3937 ^ $3940;
  $3942 = $block;
  $3943 = (($3942) + 36|0);
  $3944 = HEAP32[$3943>>2]|0;
  $3945 = $3941 ^ $3944;
  $3946 = $3945 << 1;
  $3947 = $block;
  $3948 = (($3947) + 24|0);
  $3949 = HEAP32[$3948>>2]|0;
  $3950 = $block;
  $3951 = (($3950) + 4|0);
  $3952 = HEAP32[$3951>>2]|0;
  $3953 = $3949 ^ $3952;
  $3954 = $block;
  $3955 = (($3954) + 44|0);
  $3956 = HEAP32[$3955>>2]|0;
  $3957 = $3953 ^ $3956;
  $3958 = $block;
  $3959 = (($3958) + 36|0);
  $3960 = HEAP32[$3959>>2]|0;
  $3961 = $3957 ^ $3960;
  $3962 = $3961 >>> 31;
  $3963 = $3946 | $3962;
  $3964 = $block;
  $3965 = (($3964) + 36|0);
  HEAP32[$3965>>2] = $3963;
  $3966 = (($3930) + ($3963))|0;
  $3967 = (($3966) + -899497514)|0;
  $3968 = $c;
  $3969 = $3968 << 5;
  $3970 = $c;
  $3971 = $3970 >>> 27;
  $3972 = $3969 | $3971;
  $3973 = (($3967) + ($3972))|0;
  $3974 = $b;
  $3975 = (($3974) + ($3973))|0;
  $b = $3975;
  $3976 = $d;
  $3977 = $3976 << 30;
  $3978 = $d;
  $3979 = $3978 >>> 2;
  $3980 = $3977 | $3979;
  $d = $3980;
  $3981 = $c;
  $3982 = $d;
  $3983 = $3981 ^ $3982;
  $3984 = $e;
  $3985 = $3983 ^ $3984;
  $3986 = $block;
  $3987 = (($3986) + 28|0);
  $3988 = HEAP32[$3987>>2]|0;
  $3989 = $block;
  $3990 = (($3989) + 8|0);
  $3991 = HEAP32[$3990>>2]|0;
  $3992 = $3988 ^ $3991;
  $3993 = $block;
  $3994 = (($3993) + 48|0);
  $3995 = HEAP32[$3994>>2]|0;
  $3996 = $3992 ^ $3995;
  $3997 = $block;
  $3998 = (($3997) + 40|0);
  $3999 = HEAP32[$3998>>2]|0;
  $4000 = $3996 ^ $3999;
  $4001 = $4000 << 1;
  $4002 = $block;
  $4003 = (($4002) + 28|0);
  $4004 = HEAP32[$4003>>2]|0;
  $4005 = $block;
  $4006 = (($4005) + 8|0);
  $4007 = HEAP32[$4006>>2]|0;
  $4008 = $4004 ^ $4007;
  $4009 = $block;
  $4010 = (($4009) + 48|0);
  $4011 = HEAP32[$4010>>2]|0;
  $4012 = $4008 ^ $4011;
  $4013 = $block;
  $4014 = (($4013) + 40|0);
  $4015 = HEAP32[$4014>>2]|0;
  $4016 = $4012 ^ $4015;
  $4017 = $4016 >>> 31;
  $4018 = $4001 | $4017;
  $4019 = $block;
  $4020 = (($4019) + 40|0);
  HEAP32[$4020>>2] = $4018;
  $4021 = (($3985) + ($4018))|0;
  $4022 = (($4021) + -899497514)|0;
  $4023 = $b;
  $4024 = $4023 << 5;
  $4025 = $b;
  $4026 = $4025 >>> 27;
  $4027 = $4024 | $4026;
  $4028 = (($4022) + ($4027))|0;
  $4029 = $a;
  $4030 = (($4029) + ($4028))|0;
  $a = $4030;
  $4031 = $c;
  $4032 = $4031 << 30;
  $4033 = $c;
  $4034 = $4033 >>> 2;
  $4035 = $4032 | $4034;
  $c = $4035;
  $4036 = $b;
  $4037 = $c;
  $4038 = $4036 ^ $4037;
  $4039 = $d;
  $4040 = $4038 ^ $4039;
  $4041 = $block;
  $4042 = (($4041) + 32|0);
  $4043 = HEAP32[$4042>>2]|0;
  $4044 = $block;
  $4045 = (($4044) + 12|0);
  $4046 = HEAP32[$4045>>2]|0;
  $4047 = $4043 ^ $4046;
  $4048 = $block;
  $4049 = (($4048) + 52|0);
  $4050 = HEAP32[$4049>>2]|0;
  $4051 = $4047 ^ $4050;
  $4052 = $block;
  $4053 = (($4052) + 44|0);
  $4054 = HEAP32[$4053>>2]|0;
  $4055 = $4051 ^ $4054;
  $4056 = $4055 << 1;
  $4057 = $block;
  $4058 = (($4057) + 32|0);
  $4059 = HEAP32[$4058>>2]|0;
  $4060 = $block;
  $4061 = (($4060) + 12|0);
  $4062 = HEAP32[$4061>>2]|0;
  $4063 = $4059 ^ $4062;
  $4064 = $block;
  $4065 = (($4064) + 52|0);
  $4066 = HEAP32[$4065>>2]|0;
  $4067 = $4063 ^ $4066;
  $4068 = $block;
  $4069 = (($4068) + 44|0);
  $4070 = HEAP32[$4069>>2]|0;
  $4071 = $4067 ^ $4070;
  $4072 = $4071 >>> 31;
  $4073 = $4056 | $4072;
  $4074 = $block;
  $4075 = (($4074) + 44|0);
  HEAP32[$4075>>2] = $4073;
  $4076 = (($4040) + ($4073))|0;
  $4077 = (($4076) + -899497514)|0;
  $4078 = $a;
  $4079 = $4078 << 5;
  $4080 = $a;
  $4081 = $4080 >>> 27;
  $4082 = $4079 | $4081;
  $4083 = (($4077) + ($4082))|0;
  $4084 = $e;
  $4085 = (($4084) + ($4083))|0;
  $e = $4085;
  $4086 = $b;
  $4087 = $4086 << 30;
  $4088 = $b;
  $4089 = $4088 >>> 2;
  $4090 = $4087 | $4089;
  $b = $4090;
  $4091 = $a;
  $4092 = $b;
  $4093 = $4091 ^ $4092;
  $4094 = $c;
  $4095 = $4093 ^ $4094;
  $4096 = $block;
  $4097 = (($4096) + 36|0);
  $4098 = HEAP32[$4097>>2]|0;
  $4099 = $block;
  $4100 = (($4099) + 16|0);
  $4101 = HEAP32[$4100>>2]|0;
  $4102 = $4098 ^ $4101;
  $4103 = $block;
  $4104 = (($4103) + 56|0);
  $4105 = HEAP32[$4104>>2]|0;
  $4106 = $4102 ^ $4105;
  $4107 = $block;
  $4108 = (($4107) + 48|0);
  $4109 = HEAP32[$4108>>2]|0;
  $4110 = $4106 ^ $4109;
  $4111 = $4110 << 1;
  $4112 = $block;
  $4113 = (($4112) + 36|0);
  $4114 = HEAP32[$4113>>2]|0;
  $4115 = $block;
  $4116 = (($4115) + 16|0);
  $4117 = HEAP32[$4116>>2]|0;
  $4118 = $4114 ^ $4117;
  $4119 = $block;
  $4120 = (($4119) + 56|0);
  $4121 = HEAP32[$4120>>2]|0;
  $4122 = $4118 ^ $4121;
  $4123 = $block;
  $4124 = (($4123) + 48|0);
  $4125 = HEAP32[$4124>>2]|0;
  $4126 = $4122 ^ $4125;
  $4127 = $4126 >>> 31;
  $4128 = $4111 | $4127;
  $4129 = $block;
  $4130 = (($4129) + 48|0);
  HEAP32[$4130>>2] = $4128;
  $4131 = (($4095) + ($4128))|0;
  $4132 = (($4131) + -899497514)|0;
  $4133 = $e;
  $4134 = $4133 << 5;
  $4135 = $e;
  $4136 = $4135 >>> 27;
  $4137 = $4134 | $4136;
  $4138 = (($4132) + ($4137))|0;
  $4139 = $d;
  $4140 = (($4139) + ($4138))|0;
  $d = $4140;
  $4141 = $a;
  $4142 = $4141 << 30;
  $4143 = $a;
  $4144 = $4143 >>> 2;
  $4145 = $4142 | $4144;
  $a = $4145;
  $4146 = $e;
  $4147 = $a;
  $4148 = $4146 ^ $4147;
  $4149 = $b;
  $4150 = $4148 ^ $4149;
  $4151 = $block;
  $4152 = (($4151) + 40|0);
  $4153 = HEAP32[$4152>>2]|0;
  $4154 = $block;
  $4155 = (($4154) + 20|0);
  $4156 = HEAP32[$4155>>2]|0;
  $4157 = $4153 ^ $4156;
  $4158 = $block;
  $4159 = (($4158) + 60|0);
  $4160 = HEAP32[$4159>>2]|0;
  $4161 = $4157 ^ $4160;
  $4162 = $block;
  $4163 = (($4162) + 52|0);
  $4164 = HEAP32[$4163>>2]|0;
  $4165 = $4161 ^ $4164;
  $4166 = $4165 << 1;
  $4167 = $block;
  $4168 = (($4167) + 40|0);
  $4169 = HEAP32[$4168>>2]|0;
  $4170 = $block;
  $4171 = (($4170) + 20|0);
  $4172 = HEAP32[$4171>>2]|0;
  $4173 = $4169 ^ $4172;
  $4174 = $block;
  $4175 = (($4174) + 60|0);
  $4176 = HEAP32[$4175>>2]|0;
  $4177 = $4173 ^ $4176;
  $4178 = $block;
  $4179 = (($4178) + 52|0);
  $4180 = HEAP32[$4179>>2]|0;
  $4181 = $4177 ^ $4180;
  $4182 = $4181 >>> 31;
  $4183 = $4166 | $4182;
  $4184 = $block;
  $4185 = (($4184) + 52|0);
  HEAP32[$4185>>2] = $4183;
  $4186 = (($4150) + ($4183))|0;
  $4187 = (($4186) + -899497514)|0;
  $4188 = $d;
  $4189 = $4188 << 5;
  $4190 = $d;
  $4191 = $4190 >>> 27;
  $4192 = $4189 | $4191;
  $4193 = (($4187) + ($4192))|0;
  $4194 = $c;
  $4195 = (($4194) + ($4193))|0;
  $c = $4195;
  $4196 = $e;
  $4197 = $4196 << 30;
  $4198 = $e;
  $4199 = $4198 >>> 2;
  $4200 = $4197 | $4199;
  $e = $4200;
  $4201 = $d;
  $4202 = $e;
  $4203 = $4201 ^ $4202;
  $4204 = $a;
  $4205 = $4203 ^ $4204;
  $4206 = $block;
  $4207 = (($4206) + 44|0);
  $4208 = HEAP32[$4207>>2]|0;
  $4209 = $block;
  $4210 = (($4209) + 24|0);
  $4211 = HEAP32[$4210>>2]|0;
  $4212 = $4208 ^ $4211;
  $4213 = $block;
  $4214 = HEAP32[$4213>>2]|0;
  $4215 = $4212 ^ $4214;
  $4216 = $block;
  $4217 = (($4216) + 56|0);
  $4218 = HEAP32[$4217>>2]|0;
  $4219 = $4215 ^ $4218;
  $4220 = $4219 << 1;
  $4221 = $block;
  $4222 = (($4221) + 44|0);
  $4223 = HEAP32[$4222>>2]|0;
  $4224 = $block;
  $4225 = (($4224) + 24|0);
  $4226 = HEAP32[$4225>>2]|0;
  $4227 = $4223 ^ $4226;
  $4228 = $block;
  $4229 = HEAP32[$4228>>2]|0;
  $4230 = $4227 ^ $4229;
  $4231 = $block;
  $4232 = (($4231) + 56|0);
  $4233 = HEAP32[$4232>>2]|0;
  $4234 = $4230 ^ $4233;
  $4235 = $4234 >>> 31;
  $4236 = $4220 | $4235;
  $4237 = $block;
  $4238 = (($4237) + 56|0);
  HEAP32[$4238>>2] = $4236;
  $4239 = (($4205) + ($4236))|0;
  $4240 = (($4239) + -899497514)|0;
  $4241 = $c;
  $4242 = $4241 << 5;
  $4243 = $c;
  $4244 = $4243 >>> 27;
  $4245 = $4242 | $4244;
  $4246 = (($4240) + ($4245))|0;
  $4247 = $b;
  $4248 = (($4247) + ($4246))|0;
  $b = $4248;
  $4249 = $d;
  $4250 = $4249 << 30;
  $4251 = $d;
  $4252 = $4251 >>> 2;
  $4253 = $4250 | $4252;
  $d = $4253;
  $4254 = $c;
  $4255 = $d;
  $4256 = $4254 ^ $4255;
  $4257 = $e;
  $4258 = $4256 ^ $4257;
  $4259 = $block;
  $4260 = (($4259) + 48|0);
  $4261 = HEAP32[$4260>>2]|0;
  $4262 = $block;
  $4263 = (($4262) + 28|0);
  $4264 = HEAP32[$4263>>2]|0;
  $4265 = $4261 ^ $4264;
  $4266 = $block;
  $4267 = (($4266) + 4|0);
  $4268 = HEAP32[$4267>>2]|0;
  $4269 = $4265 ^ $4268;
  $4270 = $block;
  $4271 = (($4270) + 60|0);
  $4272 = HEAP32[$4271>>2]|0;
  $4273 = $4269 ^ $4272;
  $4274 = $4273 << 1;
  $4275 = $block;
  $4276 = (($4275) + 48|0);
  $4277 = HEAP32[$4276>>2]|0;
  $4278 = $block;
  $4279 = (($4278) + 28|0);
  $4280 = HEAP32[$4279>>2]|0;
  $4281 = $4277 ^ $4280;
  $4282 = $block;
  $4283 = (($4282) + 4|0);
  $4284 = HEAP32[$4283>>2]|0;
  $4285 = $4281 ^ $4284;
  $4286 = $block;
  $4287 = (($4286) + 60|0);
  $4288 = HEAP32[$4287>>2]|0;
  $4289 = $4285 ^ $4288;
  $4290 = $4289 >>> 31;
  $4291 = $4274 | $4290;
  $4292 = $block;
  $4293 = (($4292) + 60|0);
  HEAP32[$4293>>2] = $4291;
  $4294 = (($4258) + ($4291))|0;
  $4295 = (($4294) + -899497514)|0;
  $4296 = $b;
  $4297 = $4296 << 5;
  $4298 = $b;
  $4299 = $4298 >>> 27;
  $4300 = $4297 | $4299;
  $4301 = (($4295) + ($4300))|0;
  $4302 = $a;
  $4303 = (($4302) + ($4301))|0;
  $a = $4303;
  $4304 = $c;
  $4305 = $4304 << 30;
  $4306 = $c;
  $4307 = $4306 >>> 2;
  $4308 = $4305 | $4307;
  $c = $4308;
  $4309 = $a;
  $4310 = $0;
  $4311 = HEAP32[$4310>>2]|0;
  $4312 = (($4311) + ($4309))|0;
  HEAP32[$4310>>2] = $4312;
  $4313 = $b;
  $4314 = $0;
  $4315 = (($4314) + 4|0);
  $4316 = HEAP32[$4315>>2]|0;
  $4317 = (($4316) + ($4313))|0;
  HEAP32[$4315>>2] = $4317;
  $4318 = $c;
  $4319 = $0;
  $4320 = (($4319) + 8|0);
  $4321 = HEAP32[$4320>>2]|0;
  $4322 = (($4321) + ($4318))|0;
  HEAP32[$4320>>2] = $4322;
  $4323 = $d;
  $4324 = $0;
  $4325 = (($4324) + 12|0);
  $4326 = HEAP32[$4325>>2]|0;
  $4327 = (($4326) + ($4323))|0;
  HEAP32[$4325>>2] = $4327;
  $4328 = $e;
  $4329 = $0;
  $4330 = (($4329) + 16|0);
  $4331 = HEAP32[$4330>>2]|0;
  $4332 = (($4331) + ($4328))|0;
  HEAP32[$4330>>2] = $4332;
  $e = 0;
  $d = 0;
  $c = 0;
  $b = 0;
  $a = 0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((10976|0),(10952|0),135,(10960|0));
  // unreachable;
 }
}
function _SHA1Init($context) {
 $context = $context|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $context;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  HEAP32[$3>>2] = 1732584193;
  $4 = $0;
  $5 = (($4) + 4|0);
  HEAP32[$5>>2] = -271733879;
  $6 = $0;
  $7 = (($6) + 8|0);
  HEAP32[$7>>2] = -1732584194;
  $8 = $0;
  $9 = (($8) + 12|0);
  HEAP32[$9>>2] = 271733878;
  $10 = $0;
  $11 = (($10) + 16|0);
  HEAP32[$11>>2] = -1009589776;
  $12 = $0;
  $13 = (($12) + 20|0);
  $14 = (($13) + 4|0);
  HEAP32[$14>>2] = 0;
  $15 = $0;
  $16 = (($15) + 20|0);
  HEAP32[$16>>2] = 0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((10992|0),(10952|0),199,(11008|0));
  // unreachable;
 }
}
function _SHA1Update($context,$data,$len) {
 $context = $context|0;
 $data = $data|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $context;
 $1 = $data;
 $2 = $len;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((10992|0),(10952|0),221,(11024|0));
  // unreachable;
 }
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((11040|0),(10952|0),222,(11024|0));
  // unreachable;
 }
 $7 = $0;
 $8 = (($7) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $j = $9;
 $10 = $2;
 $11 = $10 << 3;
 $12 = $0;
 $13 = (($12) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($11))|0;
 HEAP32[$13>>2] = $15;
 $16 = $j;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $2;
  $19 = $18 >>> 29;
  $20 = (($19) + 1)|0;
  $21 = $0;
  $22 = (($21) + 20|0);
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($20))|0;
  HEAP32[$23>>2] = $25;
 }
 $26 = $j;
 $27 = $26 >>> 3;
 $28 = $27 & 63;
 $j = $28;
 $29 = $j;
 $30 = $2;
 $31 = (($29) + ($30))|0;
 $32 = ($31>>>0)>(63);
 if (!($32)) {
  $i = 0;
  $53 = $j;
  $54 = $0;
  $55 = (($54) + 28|0);
  $56 = (($55) + ($53)|0);
  $57 = $i;
  $58 = $1;
  $59 = (($58) + ($57)|0);
  $60 = $2;
  $61 = $i;
  $62 = (($60) - ($61))|0;
  _memcpy(($56|0),($59|0),($62|0))|0;
  STACKTOP = sp;return;
 }
 $33 = $j;
 $34 = $0;
 $35 = (($34) + 28|0);
 $36 = (($35) + ($33)|0);
 $37 = $1;
 $38 = $j;
 $39 = (64 - ($38))|0;
 $i = $39;
 _memcpy(($36|0),($37|0),($39|0))|0;
 $40 = $0;
 $41 = $0;
 $42 = (($41) + 28|0);
 _SHA1Transform($40,$42);
 while(1) {
  $43 = $i;
  $44 = (($43) + 63)|0;
  $45 = $2;
  $46 = ($44>>>0)<($45>>>0);
  if (!($46)) {
   break;
  }
  $47 = $0;
  $48 = $i;
  $49 = $1;
  $50 = (($49) + ($48)|0);
  _SHA1Transform($47,$50);
  $51 = $i;
  $52 = (($51) + 64)|0;
  $i = $52;
 }
 $j = 0;
 $53 = $j;
 $54 = $0;
 $55 = (($54) + 28|0);
 $56 = (($55) + ($53)|0);
 $57 = $i;
 $58 = $1;
 $59 = (($58) + ($57)|0);
 $60 = $2;
 $61 = $i;
 $62 = (($60) - ($61))|0;
 _memcpy(($56|0),($59|0),($62|0))|0;
 STACKTOP = sp;return;
}
function _SHA1Final($digest,$context) {
 $digest = $digest|0;
 $context = $context|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $finalcount = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $finalcount = sp + 16|0;
 $0 = $digest;
 $1 = $context;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((11056|0),(10952|0),251,(11072|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((10992|0),(10952|0),252,(11072|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ($6>>>0)<(8);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = ($8>>>0)>=(4);
  $10 = $9 ? 0 : 1;
  $11 = $1;
  $12 = (($11) + 20|0);
  $13 = (($12) + ($10<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $i;
  $16 = $15 & 3;
  $17 = (3 - ($16))|0;
  $18 = $17<<3;
  $19 = $14 >>> $18;
  $20 = $19 & 255;
  $21 = $20&255;
  $22 = $i;
  $23 = (($finalcount) + ($22)|0);
  HEAP8[$23>>0] = $21;
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $26 = $1;
 _SHA1Update($26,11088,1);
 while(1) {
  $27 = $1;
  $28 = (($27) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 & 504;
  $31 = ($30|0)!=(448);
  if (!($31)) {
   break;
  }
  $32 = $1;
  _SHA1Update($32,11096,1);
 }
 $33 = $1;
 _SHA1Update($33,$finalcount,8);
 $34 = $0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $36 = $i;
  $37 = ($36>>>0)<(20);
  if (!($37)) {
   break;
  }
  $38 = $i;
  $39 = $38 >>> 2;
  $40 = $1;
  $41 = (($40) + ($39<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $i;
  $44 = $43 & 3;
  $45 = (3 - ($44))|0;
  $46 = $45<<3;
  $47 = $42 >>> $46;
  $48 = $47 & 255;
  $49 = $48&255;
  $50 = $i;
  $51 = $0;
  $52 = (($51) + ($50)|0);
  HEAP8[$52>>0] = $49;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 STACKTOP = sp;return;
}
function _adler32($adler,$buf,$len) {
 $adler = $adler|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n = 0, $sum2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $adler;
 $2 = $buf;
 $3 = $len;
 $4 = $1;
 $5 = $4 >>> 16;
 $6 = $5 & 65535;
 $sum2 = $6;
 $7 = $1;
 $8 = $7 & 65535;
 $1 = $8;
 $9 = $3;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = $2;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $1;
  $15 = (($14) + ($13))|0;
  $1 = $15;
  $16 = $1;
  $17 = ($16>>>0)>=(65521);
  if ($17) {
   $18 = $1;
   $19 = (($18) - 65521)|0;
   $1 = $19;
  }
  $20 = $1;
  $21 = $sum2;
  $22 = (($21) + ($20))|0;
  $sum2 = $22;
  $23 = $sum2;
  $24 = ($23>>>0)>=(65521);
  if ($24) {
   $25 = $sum2;
   $26 = (($25) - 65521)|0;
   $sum2 = $26;
  }
  $27 = $1;
  $28 = $sum2;
  $29 = $28 << 16;
  $30 = $27 | $29;
  $0 = $30;
  $384 = $0;
  STACKTOP = sp;return ($384|0);
 }
 $31 = $2;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $0 = 1;
  $384 = $0;
  STACKTOP = sp;return ($384|0);
 }
 $33 = $3;
 $34 = ($33>>>0)<(16);
 if ($34) {
  while(1) {
   $35 = $3;
   $36 = (($35) + -1)|0;
   $3 = $36;
   $37 = ($35|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $2;
   $39 = (($38) + 1|0);
   $2 = $39;
   $40 = HEAP8[$38>>0]|0;
   $41 = $40&255;
   $42 = $1;
   $43 = (($42) + ($41))|0;
   $1 = $43;
   $44 = $1;
   $45 = $sum2;
   $46 = (($45) + ($44))|0;
   $sum2 = $46;
  }
  $47 = $1;
  $48 = ($47>>>0)>=(65521);
  if ($48) {
   $49 = $1;
   $50 = (($49) - 65521)|0;
   $1 = $50;
  }
  $51 = $sum2;
  $52 = (($51>>>0) % 65521)&-1;
  $sum2 = $52;
  $53 = $1;
  $54 = $sum2;
  $55 = $54 << 16;
  $56 = $53 | $55;
  $0 = $56;
  $384 = $0;
  STACKTOP = sp;return ($384|0);
 }
 while(1) {
  $57 = $3;
  $58 = ($57>>>0)>=(5552);
  if (!($58)) {
   break;
  }
  $59 = $3;
  $60 = (($59) - 5552)|0;
  $3 = $60;
  $n = 347;
  while(1) {
   $61 = $2;
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $1;
   $65 = (($64) + ($63))|0;
   $1 = $65;
   $66 = $1;
   $67 = $sum2;
   $68 = (($67) + ($66))|0;
   $sum2 = $68;
   $69 = $2;
   $70 = (($69) + 1|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = $1;
   $74 = (($73) + ($72))|0;
   $1 = $74;
   $75 = $1;
   $76 = $sum2;
   $77 = (($76) + ($75))|0;
   $sum2 = $77;
   $78 = $2;
   $79 = (($78) + 2|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $1;
   $83 = (($82) + ($81))|0;
   $1 = $83;
   $84 = $1;
   $85 = $sum2;
   $86 = (($85) + ($84))|0;
   $sum2 = $86;
   $87 = $2;
   $88 = (($87) + 3|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = $1;
   $92 = (($91) + ($90))|0;
   $1 = $92;
   $93 = $1;
   $94 = $sum2;
   $95 = (($94) + ($93))|0;
   $sum2 = $95;
   $96 = $2;
   $97 = (($96) + 4|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = $98&255;
   $100 = $1;
   $101 = (($100) + ($99))|0;
   $1 = $101;
   $102 = $1;
   $103 = $sum2;
   $104 = (($103) + ($102))|0;
   $sum2 = $104;
   $105 = $2;
   $106 = (($105) + 5|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&255;
   $109 = $1;
   $110 = (($109) + ($108))|0;
   $1 = $110;
   $111 = $1;
   $112 = $sum2;
   $113 = (($112) + ($111))|0;
   $sum2 = $113;
   $114 = $2;
   $115 = (($114) + 6|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = $116&255;
   $118 = $1;
   $119 = (($118) + ($117))|0;
   $1 = $119;
   $120 = $1;
   $121 = $sum2;
   $122 = (($121) + ($120))|0;
   $sum2 = $122;
   $123 = $2;
   $124 = (($123) + 7|0);
   $125 = HEAP8[$124>>0]|0;
   $126 = $125&255;
   $127 = $1;
   $128 = (($127) + ($126))|0;
   $1 = $128;
   $129 = $1;
   $130 = $sum2;
   $131 = (($130) + ($129))|0;
   $sum2 = $131;
   $132 = $2;
   $133 = (($132) + 8|0);
   $134 = HEAP8[$133>>0]|0;
   $135 = $134&255;
   $136 = $1;
   $137 = (($136) + ($135))|0;
   $1 = $137;
   $138 = $1;
   $139 = $sum2;
   $140 = (($139) + ($138))|0;
   $sum2 = $140;
   $141 = $2;
   $142 = (($141) + 9|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $143&255;
   $145 = $1;
   $146 = (($145) + ($144))|0;
   $1 = $146;
   $147 = $1;
   $148 = $sum2;
   $149 = (($148) + ($147))|0;
   $sum2 = $149;
   $150 = $2;
   $151 = (($150) + 10|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = $152&255;
   $154 = $1;
   $155 = (($154) + ($153))|0;
   $1 = $155;
   $156 = $1;
   $157 = $sum2;
   $158 = (($157) + ($156))|0;
   $sum2 = $158;
   $159 = $2;
   $160 = (($159) + 11|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = $1;
   $164 = (($163) + ($162))|0;
   $1 = $164;
   $165 = $1;
   $166 = $sum2;
   $167 = (($166) + ($165))|0;
   $sum2 = $167;
   $168 = $2;
   $169 = (($168) + 12|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = $1;
   $173 = (($172) + ($171))|0;
   $1 = $173;
   $174 = $1;
   $175 = $sum2;
   $176 = (($175) + ($174))|0;
   $sum2 = $176;
   $177 = $2;
   $178 = (($177) + 13|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = $1;
   $182 = (($181) + ($180))|0;
   $1 = $182;
   $183 = $1;
   $184 = $sum2;
   $185 = (($184) + ($183))|0;
   $sum2 = $185;
   $186 = $2;
   $187 = (($186) + 14|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $188&255;
   $190 = $1;
   $191 = (($190) + ($189))|0;
   $1 = $191;
   $192 = $1;
   $193 = $sum2;
   $194 = (($193) + ($192))|0;
   $sum2 = $194;
   $195 = $2;
   $196 = (($195) + 15|0);
   $197 = HEAP8[$196>>0]|0;
   $198 = $197&255;
   $199 = $1;
   $200 = (($199) + ($198))|0;
   $1 = $200;
   $201 = $1;
   $202 = $sum2;
   $203 = (($202) + ($201))|0;
   $sum2 = $203;
   $204 = $2;
   $205 = (($204) + 16|0);
   $2 = $205;
   $206 = $n;
   $207 = (($206) + -1)|0;
   $n = $207;
   $208 = ($207|0)!=(0);
   if (!($208)) {
    break;
   }
  }
  $209 = $1;
  $210 = (($209>>>0) % 65521)&-1;
  $1 = $210;
  $211 = $sum2;
  $212 = (($211>>>0) % 65521)&-1;
  $sum2 = $212;
 }
 $213 = $3;
 $214 = ($213|0)!=(0);
 if ($214) {
  while(1) {
   $215 = $3;
   $216 = ($215>>>0)>=(16);
   if (!($216)) {
    break;
   }
   $217 = $3;
   $218 = (($217) - 16)|0;
   $3 = $218;
   $219 = $2;
   $220 = HEAP8[$219>>0]|0;
   $221 = $220&255;
   $222 = $1;
   $223 = (($222) + ($221))|0;
   $1 = $223;
   $224 = $1;
   $225 = $sum2;
   $226 = (($225) + ($224))|0;
   $sum2 = $226;
   $227 = $2;
   $228 = (($227) + 1|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $229&255;
   $231 = $1;
   $232 = (($231) + ($230))|0;
   $1 = $232;
   $233 = $1;
   $234 = $sum2;
   $235 = (($234) + ($233))|0;
   $sum2 = $235;
   $236 = $2;
   $237 = (($236) + 2|0);
   $238 = HEAP8[$237>>0]|0;
   $239 = $238&255;
   $240 = $1;
   $241 = (($240) + ($239))|0;
   $1 = $241;
   $242 = $1;
   $243 = $sum2;
   $244 = (($243) + ($242))|0;
   $sum2 = $244;
   $245 = $2;
   $246 = (($245) + 3|0);
   $247 = HEAP8[$246>>0]|0;
   $248 = $247&255;
   $249 = $1;
   $250 = (($249) + ($248))|0;
   $1 = $250;
   $251 = $1;
   $252 = $sum2;
   $253 = (($252) + ($251))|0;
   $sum2 = $253;
   $254 = $2;
   $255 = (($254) + 4|0);
   $256 = HEAP8[$255>>0]|0;
   $257 = $256&255;
   $258 = $1;
   $259 = (($258) + ($257))|0;
   $1 = $259;
   $260 = $1;
   $261 = $sum2;
   $262 = (($261) + ($260))|0;
   $sum2 = $262;
   $263 = $2;
   $264 = (($263) + 5|0);
   $265 = HEAP8[$264>>0]|0;
   $266 = $265&255;
   $267 = $1;
   $268 = (($267) + ($266))|0;
   $1 = $268;
   $269 = $1;
   $270 = $sum2;
   $271 = (($270) + ($269))|0;
   $sum2 = $271;
   $272 = $2;
   $273 = (($272) + 6|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = $274&255;
   $276 = $1;
   $277 = (($276) + ($275))|0;
   $1 = $277;
   $278 = $1;
   $279 = $sum2;
   $280 = (($279) + ($278))|0;
   $sum2 = $280;
   $281 = $2;
   $282 = (($281) + 7|0);
   $283 = HEAP8[$282>>0]|0;
   $284 = $283&255;
   $285 = $1;
   $286 = (($285) + ($284))|0;
   $1 = $286;
   $287 = $1;
   $288 = $sum2;
   $289 = (($288) + ($287))|0;
   $sum2 = $289;
   $290 = $2;
   $291 = (($290) + 8|0);
   $292 = HEAP8[$291>>0]|0;
   $293 = $292&255;
   $294 = $1;
   $295 = (($294) + ($293))|0;
   $1 = $295;
   $296 = $1;
   $297 = $sum2;
   $298 = (($297) + ($296))|0;
   $sum2 = $298;
   $299 = $2;
   $300 = (($299) + 9|0);
   $301 = HEAP8[$300>>0]|0;
   $302 = $301&255;
   $303 = $1;
   $304 = (($303) + ($302))|0;
   $1 = $304;
   $305 = $1;
   $306 = $sum2;
   $307 = (($306) + ($305))|0;
   $sum2 = $307;
   $308 = $2;
   $309 = (($308) + 10|0);
   $310 = HEAP8[$309>>0]|0;
   $311 = $310&255;
   $312 = $1;
   $313 = (($312) + ($311))|0;
   $1 = $313;
   $314 = $1;
   $315 = $sum2;
   $316 = (($315) + ($314))|0;
   $sum2 = $316;
   $317 = $2;
   $318 = (($317) + 11|0);
   $319 = HEAP8[$318>>0]|0;
   $320 = $319&255;
   $321 = $1;
   $322 = (($321) + ($320))|0;
   $1 = $322;
   $323 = $1;
   $324 = $sum2;
   $325 = (($324) + ($323))|0;
   $sum2 = $325;
   $326 = $2;
   $327 = (($326) + 12|0);
   $328 = HEAP8[$327>>0]|0;
   $329 = $328&255;
   $330 = $1;
   $331 = (($330) + ($329))|0;
   $1 = $331;
   $332 = $1;
   $333 = $sum2;
   $334 = (($333) + ($332))|0;
   $sum2 = $334;
   $335 = $2;
   $336 = (($335) + 13|0);
   $337 = HEAP8[$336>>0]|0;
   $338 = $337&255;
   $339 = $1;
   $340 = (($339) + ($338))|0;
   $1 = $340;
   $341 = $1;
   $342 = $sum2;
   $343 = (($342) + ($341))|0;
   $sum2 = $343;
   $344 = $2;
   $345 = (($344) + 14|0);
   $346 = HEAP8[$345>>0]|0;
   $347 = $346&255;
   $348 = $1;
   $349 = (($348) + ($347))|0;
   $1 = $349;
   $350 = $1;
   $351 = $sum2;
   $352 = (($351) + ($350))|0;
   $sum2 = $352;
   $353 = $2;
   $354 = (($353) + 15|0);
   $355 = HEAP8[$354>>0]|0;
   $356 = $355&255;
   $357 = $1;
   $358 = (($357) + ($356))|0;
   $1 = $358;
   $359 = $1;
   $360 = $sum2;
   $361 = (($360) + ($359))|0;
   $sum2 = $361;
   $362 = $2;
   $363 = (($362) + 16|0);
   $2 = $363;
  }
  while(1) {
   $364 = $3;
   $365 = (($364) + -1)|0;
   $3 = $365;
   $366 = ($364|0)!=(0);
   if (!($366)) {
    break;
   }
   $367 = $2;
   $368 = (($367) + 1|0);
   $2 = $368;
   $369 = HEAP8[$367>>0]|0;
   $370 = $369&255;
   $371 = $1;
   $372 = (($371) + ($370))|0;
   $1 = $372;
   $373 = $1;
   $374 = $sum2;
   $375 = (($374) + ($373))|0;
   $sum2 = $375;
  }
  $376 = $1;
  $377 = (($376>>>0) % 65521)&-1;
  $1 = $377;
  $378 = $sum2;
  $379 = (($378>>>0) % 65521)&-1;
  $sum2 = $379;
 }
 $380 = $1;
 $381 = $sum2;
 $382 = $381 << 16;
 $383 = $380 | $382;
 $0 = $383;
 $384 = $0;
 STACKTOP = sp;return ($384|0);
}
function _crc32($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endian = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $endian = sp;
 $1 = $crc;
 $2 = $buf;
 $3 = $len;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $0 = 0;
  } else {
   HEAP32[$endian>>2] = 1;
   $6 = HEAP8[$endian>>0]|0;
   $7 = ($6<<24>>24)!=(0);
   if ($7) {
    $8 = $1;
    $9 = $2;
    $10 = $3;
    $11 = (_crc32_little($8,$9,$10)|0);
    $0 = $11;
    break;
   } else {
    $12 = $1;
    $13 = $2;
    $14 = $3;
    $15 = (_crc32_big($12,$13,$14)|0);
    $0 = $15;
    break;
   }
  }
 } while(0);
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _crc32_little($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf4 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $crc;
 $1 = $buf;
 $2 = $len;
 $3 = $0;
 $c = $3;
 $4 = $c;
 $5 = $4 ^ -1;
 $c = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = $1;
   $9 = $8;
   $10 = $9 & 3;
   $11 = ($10|0)!=(0);
   $290 = $11;
  } else {
   $290 = 0;
  }
  if (!($290)) {
   break;
  }
  $12 = $c;
  $13 = $1;
  $14 = (($13) + 1|0);
  $1 = $14;
  $15 = HEAP8[$13>>0]|0;
  $16 = $15&255;
  $17 = $12 ^ $16;
  $18 = $17 & 255;
  $19 = (11104 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $c;
  $22 = $21 >>> 8;
  $23 = $20 ^ $22;
  $c = $23;
  $24 = $2;
  $25 = (($24) + -1)|0;
  $2 = $25;
 }
 $26 = $1;
 $buf4 = $26;
 while(1) {
  $27 = $2;
  $28 = ($27>>>0)>=(32);
  if (!($28)) {
   break;
  }
  $29 = $buf4;
  $30 = (($29) + 4|0);
  $buf4 = $30;
  $31 = HEAP32[$29>>2]|0;
  $32 = $c;
  $33 = $32 ^ $31;
  $c = $33;
  $34 = $c;
  $35 = $34 & 255;
  $36 = (((11104 + 3072|0)) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $c;
  $39 = $38 >>> 8;
  $40 = $39 & 255;
  $41 = (((11104 + 2048|0)) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $37 ^ $42;
  $44 = $c;
  $45 = $44 >>> 16;
  $46 = $45 & 255;
  $47 = (((11104 + 1024|0)) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $43 ^ $48;
  $50 = $c;
  $51 = $50 >>> 24;
  $52 = (11104 + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $49 ^ $53;
  $c = $54;
  $55 = $buf4;
  $56 = (($55) + 4|0);
  $buf4 = $56;
  $57 = HEAP32[$55>>2]|0;
  $58 = $c;
  $59 = $58 ^ $57;
  $c = $59;
  $60 = $c;
  $61 = $60 & 255;
  $62 = (((11104 + 3072|0)) + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $c;
  $65 = $64 >>> 8;
  $66 = $65 & 255;
  $67 = (((11104 + 2048|0)) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $63 ^ $68;
  $70 = $c;
  $71 = $70 >>> 16;
  $72 = $71 & 255;
  $73 = (((11104 + 1024|0)) + ($72<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $69 ^ $74;
  $76 = $c;
  $77 = $76 >>> 24;
  $78 = (11104 + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $75 ^ $79;
  $c = $80;
  $81 = $buf4;
  $82 = (($81) + 4|0);
  $buf4 = $82;
  $83 = HEAP32[$81>>2]|0;
  $84 = $c;
  $85 = $84 ^ $83;
  $c = $85;
  $86 = $c;
  $87 = $86 & 255;
  $88 = (((11104 + 3072|0)) + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $c;
  $91 = $90 >>> 8;
  $92 = $91 & 255;
  $93 = (((11104 + 2048|0)) + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $89 ^ $94;
  $96 = $c;
  $97 = $96 >>> 16;
  $98 = $97 & 255;
  $99 = (((11104 + 1024|0)) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $95 ^ $100;
  $102 = $c;
  $103 = $102 >>> 24;
  $104 = (11104 + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $101 ^ $105;
  $c = $106;
  $107 = $buf4;
  $108 = (($107) + 4|0);
  $buf4 = $108;
  $109 = HEAP32[$107>>2]|0;
  $110 = $c;
  $111 = $110 ^ $109;
  $c = $111;
  $112 = $c;
  $113 = $112 & 255;
  $114 = (((11104 + 3072|0)) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $c;
  $117 = $116 >>> 8;
  $118 = $117 & 255;
  $119 = (((11104 + 2048|0)) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $115 ^ $120;
  $122 = $c;
  $123 = $122 >>> 16;
  $124 = $123 & 255;
  $125 = (((11104 + 1024|0)) + ($124<<2)|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $121 ^ $126;
  $128 = $c;
  $129 = $128 >>> 24;
  $130 = (11104 + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $127 ^ $131;
  $c = $132;
  $133 = $buf4;
  $134 = (($133) + 4|0);
  $buf4 = $134;
  $135 = HEAP32[$133>>2]|0;
  $136 = $c;
  $137 = $136 ^ $135;
  $c = $137;
  $138 = $c;
  $139 = $138 & 255;
  $140 = (((11104 + 3072|0)) + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $c;
  $143 = $142 >>> 8;
  $144 = $143 & 255;
  $145 = (((11104 + 2048|0)) + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $141 ^ $146;
  $148 = $c;
  $149 = $148 >>> 16;
  $150 = $149 & 255;
  $151 = (((11104 + 1024|0)) + ($150<<2)|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $147 ^ $152;
  $154 = $c;
  $155 = $154 >>> 24;
  $156 = (11104 + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $153 ^ $157;
  $c = $158;
  $159 = $buf4;
  $160 = (($159) + 4|0);
  $buf4 = $160;
  $161 = HEAP32[$159>>2]|0;
  $162 = $c;
  $163 = $162 ^ $161;
  $c = $163;
  $164 = $c;
  $165 = $164 & 255;
  $166 = (((11104 + 3072|0)) + ($165<<2)|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $c;
  $169 = $168 >>> 8;
  $170 = $169 & 255;
  $171 = (((11104 + 2048|0)) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $167 ^ $172;
  $174 = $c;
  $175 = $174 >>> 16;
  $176 = $175 & 255;
  $177 = (((11104 + 1024|0)) + ($176<<2)|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = $173 ^ $178;
  $180 = $c;
  $181 = $180 >>> 24;
  $182 = (11104 + ($181<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $179 ^ $183;
  $c = $184;
  $185 = $buf4;
  $186 = (($185) + 4|0);
  $buf4 = $186;
  $187 = HEAP32[$185>>2]|0;
  $188 = $c;
  $189 = $188 ^ $187;
  $c = $189;
  $190 = $c;
  $191 = $190 & 255;
  $192 = (((11104 + 3072|0)) + ($191<<2)|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $c;
  $195 = $194 >>> 8;
  $196 = $195 & 255;
  $197 = (((11104 + 2048|0)) + ($196<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $193 ^ $198;
  $200 = $c;
  $201 = $200 >>> 16;
  $202 = $201 & 255;
  $203 = (((11104 + 1024|0)) + ($202<<2)|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = $199 ^ $204;
  $206 = $c;
  $207 = $206 >>> 24;
  $208 = (11104 + ($207<<2)|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $205 ^ $209;
  $c = $210;
  $211 = $buf4;
  $212 = (($211) + 4|0);
  $buf4 = $212;
  $213 = HEAP32[$211>>2]|0;
  $214 = $c;
  $215 = $214 ^ $213;
  $c = $215;
  $216 = $c;
  $217 = $216 & 255;
  $218 = (((11104 + 3072|0)) + ($217<<2)|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = $c;
  $221 = $220 >>> 8;
  $222 = $221 & 255;
  $223 = (((11104 + 2048|0)) + ($222<<2)|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = $219 ^ $224;
  $226 = $c;
  $227 = $226 >>> 16;
  $228 = $227 & 255;
  $229 = (((11104 + 1024|0)) + ($228<<2)|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $225 ^ $230;
  $232 = $c;
  $233 = $232 >>> 24;
  $234 = (11104 + ($233<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $231 ^ $235;
  $c = $236;
  $237 = $2;
  $238 = (($237) - 32)|0;
  $2 = $238;
 }
 while(1) {
  $239 = $2;
  $240 = ($239>>>0)>=(4);
  if (!($240)) {
   break;
  }
  $241 = $buf4;
  $242 = (($241) + 4|0);
  $buf4 = $242;
  $243 = HEAP32[$241>>2]|0;
  $244 = $c;
  $245 = $244 ^ $243;
  $c = $245;
  $246 = $c;
  $247 = $246 & 255;
  $248 = (((11104 + 3072|0)) + ($247<<2)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = $c;
  $251 = $250 >>> 8;
  $252 = $251 & 255;
  $253 = (((11104 + 2048|0)) + ($252<<2)|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $249 ^ $254;
  $256 = $c;
  $257 = $256 >>> 16;
  $258 = $257 & 255;
  $259 = (((11104 + 1024|0)) + ($258<<2)|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $255 ^ $260;
  $262 = $c;
  $263 = $262 >>> 24;
  $264 = (11104 + ($263<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $261 ^ $265;
  $c = $266;
  $267 = $2;
  $268 = (($267) - 4)|0;
  $2 = $268;
 }
 $269 = $buf4;
 $1 = $269;
 $270 = $2;
 $271 = ($270|0)!=(0);
 if (!($271)) {
  $287 = $c;
  $288 = $287 ^ -1;
  $c = $288;
  $289 = $c;
  STACKTOP = sp;return ($289|0);
 }
 while(1) {
  $272 = $c;
  $273 = $1;
  $274 = (($273) + 1|0);
  $1 = $274;
  $275 = HEAP8[$273>>0]|0;
  $276 = $275&255;
  $277 = $272 ^ $276;
  $278 = $277 & 255;
  $279 = (11104 + ($278<<2)|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = $c;
  $282 = $281 >>> 8;
  $283 = $280 ^ $282;
  $c = $283;
  $284 = $2;
  $285 = (($284) + -1)|0;
  $2 = $285;
  $286 = ($285|0)!=(0);
  if (!($286)) {
   break;
  }
 }
 $287 = $c;
 $288 = $287 ^ -1;
 $c = $288;
 $289 = $c;
 STACKTOP = sp;return ($289|0);
}
function _crc32_big($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buf4 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $crc;
 $1 = $buf;
 $2 = $len;
 $3 = $0;
 $4 = $3 >>> 24;
 $5 = $4 & 255;
 $6 = $0;
 $7 = $6 >>> 8;
 $8 = $7 & 65280;
 $9 = (($5) + ($8))|0;
 $10 = $0;
 $11 = $10 & 65280;
 $12 = $11 << 8;
 $13 = (($9) + ($12))|0;
 $14 = $0;
 $15 = $14 & 255;
 $16 = $15 << 24;
 $17 = (($13) + ($16))|0;
 $c = $17;
 $18 = $c;
 $19 = $18 ^ -1;
 $c = $19;
 while(1) {
  $20 = $2;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $1;
   $23 = $22;
   $24 = $23 & 3;
   $25 = ($24|0)!=(0);
   $322 = $25;
  } else {
   $322 = 0;
  }
  if (!($322)) {
   break;
  }
  $26 = $c;
  $27 = $26 >>> 24;
  $28 = $1;
  $29 = (($28) + 1|0);
  $1 = $29;
  $30 = HEAP8[$28>>0]|0;
  $31 = $30&255;
  $32 = $27 ^ $31;
  $33 = (((11104 + 4096|0)) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $c;
  $36 = $35 << 8;
  $37 = $34 ^ $36;
  $c = $37;
  $38 = $2;
  $39 = (($38) + -1)|0;
  $2 = $39;
 }
 $40 = $1;
 $buf4 = $40;
 $41 = $buf4;
 $42 = (($41) + -4|0);
 $buf4 = $42;
 while(1) {
  $43 = $2;
  $44 = ($43>>>0)>=(32);
  if (!($44)) {
   break;
  }
  $45 = $buf4;
  $46 = (($45) + 4|0);
  $buf4 = $46;
  $47 = HEAP32[$46>>2]|0;
  $48 = $c;
  $49 = $48 ^ $47;
  $c = $49;
  $50 = $c;
  $51 = $50 & 255;
  $52 = (((11104 + 4096|0)) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $c;
  $55 = $54 >>> 8;
  $56 = $55 & 255;
  $57 = (((11104 + 5120|0)) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $53 ^ $58;
  $60 = $c;
  $61 = $60 >>> 16;
  $62 = $61 & 255;
  $63 = (((11104 + 6144|0)) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $59 ^ $64;
  $66 = $c;
  $67 = $66 >>> 24;
  $68 = (((11104 + 7168|0)) + ($67<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $65 ^ $69;
  $c = $70;
  $71 = $buf4;
  $72 = (($71) + 4|0);
  $buf4 = $72;
  $73 = HEAP32[$72>>2]|0;
  $74 = $c;
  $75 = $74 ^ $73;
  $c = $75;
  $76 = $c;
  $77 = $76 & 255;
  $78 = (((11104 + 4096|0)) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $c;
  $81 = $80 >>> 8;
  $82 = $81 & 255;
  $83 = (((11104 + 5120|0)) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $79 ^ $84;
  $86 = $c;
  $87 = $86 >>> 16;
  $88 = $87 & 255;
  $89 = (((11104 + 6144|0)) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $85 ^ $90;
  $92 = $c;
  $93 = $92 >>> 24;
  $94 = (((11104 + 7168|0)) + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $91 ^ $95;
  $c = $96;
  $97 = $buf4;
  $98 = (($97) + 4|0);
  $buf4 = $98;
  $99 = HEAP32[$98>>2]|0;
  $100 = $c;
  $101 = $100 ^ $99;
  $c = $101;
  $102 = $c;
  $103 = $102 & 255;
  $104 = (((11104 + 4096|0)) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $c;
  $107 = $106 >>> 8;
  $108 = $107 & 255;
  $109 = (((11104 + 5120|0)) + ($108<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $105 ^ $110;
  $112 = $c;
  $113 = $112 >>> 16;
  $114 = $113 & 255;
  $115 = (((11104 + 6144|0)) + ($114<<2)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $111 ^ $116;
  $118 = $c;
  $119 = $118 >>> 24;
  $120 = (((11104 + 7168|0)) + ($119<<2)|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $117 ^ $121;
  $c = $122;
  $123 = $buf4;
  $124 = (($123) + 4|0);
  $buf4 = $124;
  $125 = HEAP32[$124>>2]|0;
  $126 = $c;
  $127 = $126 ^ $125;
  $c = $127;
  $128 = $c;
  $129 = $128 & 255;
  $130 = (((11104 + 4096|0)) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $c;
  $133 = $132 >>> 8;
  $134 = $133 & 255;
  $135 = (((11104 + 5120|0)) + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $131 ^ $136;
  $138 = $c;
  $139 = $138 >>> 16;
  $140 = $139 & 255;
  $141 = (((11104 + 6144|0)) + ($140<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $137 ^ $142;
  $144 = $c;
  $145 = $144 >>> 24;
  $146 = (((11104 + 7168|0)) + ($145<<2)|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $143 ^ $147;
  $c = $148;
  $149 = $buf4;
  $150 = (($149) + 4|0);
  $buf4 = $150;
  $151 = HEAP32[$150>>2]|0;
  $152 = $c;
  $153 = $152 ^ $151;
  $c = $153;
  $154 = $c;
  $155 = $154 & 255;
  $156 = (((11104 + 4096|0)) + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $c;
  $159 = $158 >>> 8;
  $160 = $159 & 255;
  $161 = (((11104 + 5120|0)) + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $157 ^ $162;
  $164 = $c;
  $165 = $164 >>> 16;
  $166 = $165 & 255;
  $167 = (((11104 + 6144|0)) + ($166<<2)|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = $163 ^ $168;
  $170 = $c;
  $171 = $170 >>> 24;
  $172 = (((11104 + 7168|0)) + ($171<<2)|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $169 ^ $173;
  $c = $174;
  $175 = $buf4;
  $176 = (($175) + 4|0);
  $buf4 = $176;
  $177 = HEAP32[$176>>2]|0;
  $178 = $c;
  $179 = $178 ^ $177;
  $c = $179;
  $180 = $c;
  $181 = $180 & 255;
  $182 = (((11104 + 4096|0)) + ($181<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $c;
  $185 = $184 >>> 8;
  $186 = $185 & 255;
  $187 = (((11104 + 5120|0)) + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $183 ^ $188;
  $190 = $c;
  $191 = $190 >>> 16;
  $192 = $191 & 255;
  $193 = (((11104 + 6144|0)) + ($192<<2)|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $189 ^ $194;
  $196 = $c;
  $197 = $196 >>> 24;
  $198 = (((11104 + 7168|0)) + ($197<<2)|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = $195 ^ $199;
  $c = $200;
  $201 = $buf4;
  $202 = (($201) + 4|0);
  $buf4 = $202;
  $203 = HEAP32[$202>>2]|0;
  $204 = $c;
  $205 = $204 ^ $203;
  $c = $205;
  $206 = $c;
  $207 = $206 & 255;
  $208 = (((11104 + 4096|0)) + ($207<<2)|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $c;
  $211 = $210 >>> 8;
  $212 = $211 & 255;
  $213 = (((11104 + 5120|0)) + ($212<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $209 ^ $214;
  $216 = $c;
  $217 = $216 >>> 16;
  $218 = $217 & 255;
  $219 = (((11104 + 6144|0)) + ($218<<2)|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $215 ^ $220;
  $222 = $c;
  $223 = $222 >>> 24;
  $224 = (((11104 + 7168|0)) + ($223<<2)|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $221 ^ $225;
  $c = $226;
  $227 = $buf4;
  $228 = (($227) + 4|0);
  $buf4 = $228;
  $229 = HEAP32[$228>>2]|0;
  $230 = $c;
  $231 = $230 ^ $229;
  $c = $231;
  $232 = $c;
  $233 = $232 & 255;
  $234 = (((11104 + 4096|0)) + ($233<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $c;
  $237 = $236 >>> 8;
  $238 = $237 & 255;
  $239 = (((11104 + 5120|0)) + ($238<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $235 ^ $240;
  $242 = $c;
  $243 = $242 >>> 16;
  $244 = $243 & 255;
  $245 = (((11104 + 6144|0)) + ($244<<2)|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $241 ^ $246;
  $248 = $c;
  $249 = $248 >>> 24;
  $250 = (((11104 + 7168|0)) + ($249<<2)|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = $247 ^ $251;
  $c = $252;
  $253 = $2;
  $254 = (($253) - 32)|0;
  $2 = $254;
 }
 while(1) {
  $255 = $2;
  $256 = ($255>>>0)>=(4);
  if (!($256)) {
   break;
  }
  $257 = $buf4;
  $258 = (($257) + 4|0);
  $buf4 = $258;
  $259 = HEAP32[$258>>2]|0;
  $260 = $c;
  $261 = $260 ^ $259;
  $c = $261;
  $262 = $c;
  $263 = $262 & 255;
  $264 = (((11104 + 4096|0)) + ($263<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $c;
  $267 = $266 >>> 8;
  $268 = $267 & 255;
  $269 = (((11104 + 5120|0)) + ($268<<2)|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $265 ^ $270;
  $272 = $c;
  $273 = $272 >>> 16;
  $274 = $273 & 255;
  $275 = (((11104 + 6144|0)) + ($274<<2)|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = $271 ^ $276;
  $278 = $c;
  $279 = $278 >>> 24;
  $280 = (((11104 + 7168|0)) + ($279<<2)|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = $277 ^ $281;
  $c = $282;
  $283 = $2;
  $284 = (($283) - 4)|0;
  $2 = $284;
 }
 $285 = $buf4;
 $286 = (($285) + 4|0);
 $buf4 = $286;
 $287 = $buf4;
 $1 = $287;
 $288 = $2;
 $289 = ($288|0)!=(0);
 if (!($289)) {
  $305 = $c;
  $306 = $305 ^ -1;
  $c = $306;
  $307 = $c;
  $308 = $307 >>> 24;
  $309 = $308 & 255;
  $310 = $c;
  $311 = $310 >>> 8;
  $312 = $311 & 65280;
  $313 = (($309) + ($312))|0;
  $314 = $c;
  $315 = $314 & 65280;
  $316 = $315 << 8;
  $317 = (($313) + ($316))|0;
  $318 = $c;
  $319 = $318 & 255;
  $320 = $319 << 24;
  $321 = (($317) + ($320))|0;
  STACKTOP = sp;return ($321|0);
 }
 while(1) {
  $290 = $c;
  $291 = $290 >>> 24;
  $292 = $1;
  $293 = (($292) + 1|0);
  $1 = $293;
  $294 = HEAP8[$292>>0]|0;
  $295 = $294&255;
  $296 = $291 ^ $295;
  $297 = (((11104 + 4096|0)) + ($296<<2)|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $c;
  $300 = $299 << 8;
  $301 = $298 ^ $300;
  $c = $301;
  $302 = $2;
  $303 = (($302) + -1)|0;
  $2 = $303;
  $304 = ($303|0)!=(0);
  if (!($304)) {
   break;
  }
 }
 $305 = $c;
 $306 = $305 ^ -1;
 $c = $306;
 $307 = $c;
 $308 = $307 >>> 24;
 $309 = $308 & 255;
 $310 = $c;
 $311 = $310 >>> 8;
 $312 = $311 & 65280;
 $313 = (($309) + ($312))|0;
 $314 = $c;
 $315 = $314 & 65280;
 $316 = $315 << 8;
 $317 = (($313) + ($316))|0;
 $318 = $c;
 $319 = $318 & 255;
 $320 = $319 << 24;
 $321 = (($317) + ($320))|0;
 STACKTOP = sp;return ($321|0);
}
function _deflateInit2_($strm,$level,$method,$windowBits,$memLevel,$strategy,$version,$stream_size) {
 $strm = $strm|0;
 $level = $level|0;
 $method = $method|0;
 $windowBits = $windowBits|0;
 $memLevel = $memLevel|0;
 $strategy = $strategy|0;
 $version = $version|0;
 $stream_size = $stream_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $overlay = 0, $s = 0, $wrap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $level;
 $3 = $method;
 $4 = $windowBits;
 $5 = $memLevel;
 $6 = $strategy;
 $7 = $version;
 $8 = $stream_size;
 $wrap = 1;
 $9 = $7;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = $7;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = HEAP8[19544>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($13|0)!=($15|0);
  if (!($16)) {
   $17 = $8;
   $18 = ($17|0)!=(56);
   if (!($18)) {
    $19 = $1;
    $20 = ($19|0)==(0|0);
    if ($20) {
     $0 = -2;
     $239 = $0;
     STACKTOP = sp;return ($239|0);
    }
    $21 = $1;
    $22 = (($21) + 24|0);
    HEAP32[$22>>2] = 0;
    $23 = $1;
    $24 = (($23) + 32|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     $27 = $1;
     $28 = (($27) + 32|0);
     HEAP32[$28>>2] = 61;
     $29 = $1;
     $30 = (($29) + 40|0);
     HEAP32[$30>>2] = 0;
    }
    $31 = $1;
    $32 = (($31) + 36|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0|0);
    if ($34) {
     $35 = $1;
     $36 = (($35) + 36|0);
     HEAP32[$36>>2] = 62;
    }
    $37 = $2;
    $38 = ($37|0)==(-1);
    if ($38) {
     $2 = 6;
    }
    $39 = $4;
    $40 = ($39|0)<(0);
    if ($40) {
     $wrap = 0;
     $41 = $4;
     $42 = (0 - ($41))|0;
     $4 = $42;
    } else {
     $43 = $4;
     $44 = ($43|0)>(15);
     if ($44) {
      $wrap = 2;
      $45 = $4;
      $46 = (($45) - 16)|0;
      $4 = $46;
     }
    }
    $47 = $5;
    $48 = ($47|0)<(1);
    if (!($48)) {
     $49 = $5;
     $50 = ($49|0)>(9);
     if (!($50)) {
      $51 = $3;
      $52 = ($51|0)!=(8);
      if (!($52)) {
       $53 = $4;
       $54 = ($53|0)<(8);
       if (!($54)) {
        $55 = $4;
        $56 = ($55|0)>(15);
        if (!($56)) {
         $57 = $2;
         $58 = ($57|0)<(0);
         if (!($58)) {
          $59 = $2;
          $60 = ($59|0)>(9);
          if (!($60)) {
           $61 = $6;
           $62 = ($61|0)<(0);
           if (!($62)) {
            $63 = $6;
            $64 = ($63|0)>(4);
            if (!($64)) {
             $65 = $4;
             $66 = ($65|0)==(8);
             if ($66) {
              $4 = 9;
             }
             $67 = $1;
             $68 = (($67) + 32|0);
             $69 = HEAP32[$68>>2]|0;
             $70 = $1;
             $71 = (($70) + 40|0);
             $72 = HEAP32[$71>>2]|0;
             $73 = (FUNCTION_TABLE_iiii[$69 & 63]($72,1,5828)|0);
             $s = $73;
             $74 = $s;
             $75 = ($74|0)==(0|0);
             if ($75) {
              $0 = -4;
              $239 = $0;
              STACKTOP = sp;return ($239|0);
             }
             $76 = $s;
             $77 = $1;
             $78 = (($77) + 28|0);
             HEAP32[$78>>2] = $76;
             $79 = $1;
             $80 = $s;
             HEAP32[$80>>2] = $79;
             $81 = $wrap;
             $82 = $s;
             $83 = (($82) + 24|0);
             HEAP32[$83>>2] = $81;
             $84 = $s;
             $85 = (($84) + 28|0);
             HEAP32[$85>>2] = 0;
             $86 = $4;
             $87 = $s;
             $88 = (($87) + 48|0);
             HEAP32[$88>>2] = $86;
             $89 = $s;
             $90 = (($89) + 48|0);
             $91 = HEAP32[$90>>2]|0;
             $92 = 1 << $91;
             $93 = $s;
             $94 = (($93) + 44|0);
             HEAP32[$94>>2] = $92;
             $95 = $s;
             $96 = (($95) + 44|0);
             $97 = HEAP32[$96>>2]|0;
             $98 = (($97) - 1)|0;
             $99 = $s;
             $100 = (($99) + 52|0);
             HEAP32[$100>>2] = $98;
             $101 = $5;
             $102 = (($101) + 7)|0;
             $103 = $s;
             $104 = (($103) + 80|0);
             HEAP32[$104>>2] = $102;
             $105 = $s;
             $106 = (($105) + 80|0);
             $107 = HEAP32[$106>>2]|0;
             $108 = 1 << $107;
             $109 = $s;
             $110 = (($109) + 76|0);
             HEAP32[$110>>2] = $108;
             $111 = $s;
             $112 = (($111) + 76|0);
             $113 = HEAP32[$112>>2]|0;
             $114 = (($113) - 1)|0;
             $115 = $s;
             $116 = (($115) + 84|0);
             HEAP32[$116>>2] = $114;
             $117 = $s;
             $118 = (($117) + 80|0);
             $119 = HEAP32[$118>>2]|0;
             $120 = (($119) + 3)|0;
             $121 = (($120) - 1)|0;
             $122 = (($121>>>0) / 3)&-1;
             $123 = $s;
             $124 = (($123) + 88|0);
             HEAP32[$124>>2] = $122;
             $125 = $1;
             $126 = (($125) + 32|0);
             $127 = HEAP32[$126>>2]|0;
             $128 = $1;
             $129 = (($128) + 40|0);
             $130 = HEAP32[$129>>2]|0;
             $131 = $s;
             $132 = (($131) + 44|0);
             $133 = HEAP32[$132>>2]|0;
             $134 = (FUNCTION_TABLE_iiii[$127 & 63]($130,$133,2)|0);
             $135 = $s;
             $136 = (($135) + 56|0);
             HEAP32[$136>>2] = $134;
             $137 = $1;
             $138 = (($137) + 32|0);
             $139 = HEAP32[$138>>2]|0;
             $140 = $1;
             $141 = (($140) + 40|0);
             $142 = HEAP32[$141>>2]|0;
             $143 = $s;
             $144 = (($143) + 44|0);
             $145 = HEAP32[$144>>2]|0;
             $146 = (FUNCTION_TABLE_iiii[$139 & 63]($142,$145,2)|0);
             $147 = $s;
             $148 = (($147) + 64|0);
             HEAP32[$148>>2] = $146;
             $149 = $1;
             $150 = (($149) + 32|0);
             $151 = HEAP32[$150>>2]|0;
             $152 = $1;
             $153 = (($152) + 40|0);
             $154 = HEAP32[$153>>2]|0;
             $155 = $s;
             $156 = (($155) + 76|0);
             $157 = HEAP32[$156>>2]|0;
             $158 = (FUNCTION_TABLE_iiii[$151 & 63]($154,$157,2)|0);
             $159 = $s;
             $160 = (($159) + 68|0);
             HEAP32[$160>>2] = $158;
             $161 = $s;
             $162 = (($161) + 5824|0);
             HEAP32[$162>>2] = 0;
             $163 = $5;
             $164 = (($163) + 6)|0;
             $165 = 1 << $164;
             $166 = $s;
             $167 = (($166) + 5788|0);
             HEAP32[$167>>2] = $165;
             $168 = $1;
             $169 = (($168) + 32|0);
             $170 = HEAP32[$169>>2]|0;
             $171 = $1;
             $172 = (($171) + 40|0);
             $173 = HEAP32[$172>>2]|0;
             $174 = $s;
             $175 = (($174) + 5788|0);
             $176 = HEAP32[$175>>2]|0;
             $177 = (FUNCTION_TABLE_iiii[$170 & 63]($173,$176,4)|0);
             $overlay = $177;
             $178 = $overlay;
             $179 = $s;
             $180 = (($179) + 8|0);
             HEAP32[$180>>2] = $178;
             $181 = $s;
             $182 = (($181) + 5788|0);
             $183 = HEAP32[$182>>2]|0;
             $184 = $183<<2;
             $185 = $s;
             $186 = (($185) + 12|0);
             HEAP32[$186>>2] = $184;
             $187 = $s;
             $188 = (($187) + 56|0);
             $189 = HEAP32[$188>>2]|0;
             $190 = ($189|0)==(0|0);
             do {
              if (!($190)) {
               $191 = $s;
               $192 = (($191) + 64|0);
               $193 = HEAP32[$192>>2]|0;
               $194 = ($193|0)==(0|0);
               if ($194) {
                break;
               }
               $195 = $s;
               $196 = (($195) + 68|0);
               $197 = HEAP32[$196>>2]|0;
               $198 = ($197|0)==(0|0);
               if ($198) {
                break;
               }
               $199 = $s;
               $200 = (($199) + 8|0);
               $201 = HEAP32[$200>>2]|0;
               $202 = ($201|0)==(0|0);
               if ($202) {
                break;
               }
               $209 = $overlay;
               $210 = $s;
               $211 = (($210) + 5788|0);
               $212 = HEAP32[$211>>2]|0;
               $213 = (($212>>>0) / 2)&-1;
               $214 = (($209) + ($213<<1)|0);
               $215 = $s;
               $216 = (($215) + 5796|0);
               HEAP32[$216>>2] = $214;
               $217 = $s;
               $218 = (($217) + 8|0);
               $219 = HEAP32[$218>>2]|0;
               $220 = $s;
               $221 = (($220) + 5788|0);
               $222 = HEAP32[$221>>2]|0;
               $223 = ($222*3)|0;
               $224 = (($219) + ($223)|0);
               $225 = $s;
               $226 = (($225) + 5784|0);
               HEAP32[$226>>2] = $224;
               $227 = $2;
               $228 = $s;
               $229 = (($228) + 132|0);
               HEAP32[$229>>2] = $227;
               $230 = $6;
               $231 = $s;
               $232 = (($231) + 136|0);
               HEAP32[$232>>2] = $230;
               $233 = $3;
               $234 = $233&255;
               $235 = $s;
               $236 = (($235) + 36|0);
               HEAP8[$236>>0] = $234;
               $237 = $1;
               $238 = (_deflateReset($237)|0);
               $0 = $238;
               $239 = $0;
               STACKTOP = sp;return ($239|0);
              }
             } while(0);
             $203 = $s;
             $204 = (($203) + 4|0);
             HEAP32[$204>>2] = 666;
             $205 = HEAP32[((22424 + 24|0))>>2]|0;
             $206 = $1;
             $207 = (($206) + 24|0);
             HEAP32[$207>>2] = $205;
             $208 = $1;
             (_deflateEnd($208)|0);
             $0 = -4;
             $239 = $0;
             STACKTOP = sp;return ($239|0);
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $0 = -2;
    $239 = $0;
    STACKTOP = sp;return ($239|0);
   }
  }
 }
 $0 = -6;
 $239 = $0;
 STACKTOP = sp;return ($239|0);
}
function _deflateEnd($strm) {
 $strm = $strm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = $1;
  $5 = (($4) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = $1;
   $9 = (($8) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $status = $12;
   $13 = $status;
   $14 = ($13|0)!=(42);
   if ($14) {
    $15 = $status;
    $16 = ($15|0)!=(69);
    if ($16) {
     $17 = $status;
     $18 = ($17|0)!=(73);
     if ($18) {
      $19 = $status;
      $20 = ($19|0)!=(91);
      if ($20) {
       $21 = $status;
       $22 = ($21|0)!=(103);
       if ($22) {
        $23 = $status;
        $24 = ($23|0)!=(113);
        if ($24) {
         $25 = $status;
         $26 = ($25|0)!=(666);
         if ($26) {
          $0 = -2;
          $109 = $0;
          STACKTOP = sp;return ($109|0);
         }
        }
       }
      }
     }
    }
   }
   $27 = $1;
   $28 = (($27) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $33 = $1;
    $34 = (($33) + 36|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $1;
    $37 = (($36) + 40|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $1;
    $40 = (($39) + 28|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    FUNCTION_TABLE_vii[$35 & 63]($38,$43);
   }
   $44 = $1;
   $45 = (($44) + 28|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 68|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)!=(0|0);
   if ($49) {
    $50 = $1;
    $51 = (($50) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $1;
    $54 = (($53) + 40|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $1;
    $57 = (($56) + 28|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($58) + 68|0);
    $60 = HEAP32[$59>>2]|0;
    FUNCTION_TABLE_vii[$52 & 63]($55,$60);
   }
   $61 = $1;
   $62 = (($61) + 28|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + 64|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)!=(0|0);
   if ($66) {
    $67 = $1;
    $68 = (($67) + 36|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $1;
    $71 = (($70) + 40|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $1;
    $74 = (($73) + 28|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + 64|0);
    $77 = HEAP32[$76>>2]|0;
    FUNCTION_TABLE_vii[$69 & 63]($72,$77);
   }
   $78 = $1;
   $79 = (($78) + 28|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + 56|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)!=(0|0);
   if ($83) {
    $84 = $1;
    $85 = (($84) + 36|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $1;
    $88 = (($87) + 40|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $1;
    $91 = (($90) + 28|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + 56|0);
    $94 = HEAP32[$93>>2]|0;
    FUNCTION_TABLE_vii[$86 & 63]($89,$94);
   }
   $95 = $1;
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $1;
   $99 = (($98) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $1;
   $102 = (($101) + 28|0);
   $103 = HEAP32[$102>>2]|0;
   FUNCTION_TABLE_vii[$97 & 63]($100,$103);
   $104 = $1;
   $105 = (($104) + 28|0);
   HEAP32[$105>>2] = 0;
   $106 = $status;
   $107 = ($106|0)==(113);
   $108 = $107 ? -3 : 0;
   $0 = $108;
   $109 = $0;
   STACKTOP = sp;return ($109|0);
  }
 }
 $0 = -2;
 $109 = $0;
 STACKTOP = sp;return ($109|0);
}
function _deflateReset($strm) {
 $strm = $strm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $strm;
 $1 = $0;
 $2 = (_deflateResetKeep($1)|0);
 $ret = $2;
 $3 = $ret;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  _lm_init($7);
 }
 $8 = $ret;
 STACKTOP = sp;return ($8|0);
}
function _deflateResetKeep($strm) {
 $strm = $strm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = $1;
  $5 = (($4) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = $1;
   $9 = (($8) + 32|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $12 = $1;
    $13 = (($12) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = $1;
     $17 = (($16) + 20|0);
     HEAP32[$17>>2] = 0;
     $18 = $1;
     $19 = (($18) + 8|0);
     HEAP32[$19>>2] = 0;
     $20 = $1;
     $21 = (($20) + 24|0);
     HEAP32[$21>>2] = 0;
     $22 = $1;
     $23 = (($22) + 44|0);
     HEAP32[$23>>2] = 2;
     $24 = $1;
     $25 = (($24) + 28|0);
     $26 = HEAP32[$25>>2]|0;
     $s = $26;
     $27 = $s;
     $28 = (($27) + 20|0);
     HEAP32[$28>>2] = 0;
     $29 = $s;
     $30 = (($29) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = $s;
     $33 = (($32) + 16|0);
     HEAP32[$33>>2] = $31;
     $34 = $s;
     $35 = (($34) + 24|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)<(0);
     if ($37) {
      $38 = $s;
      $39 = (($38) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (0 - ($40))|0;
      $42 = $s;
      $43 = (($42) + 24|0);
      HEAP32[$43>>2] = $41;
     }
     $44 = $s;
     $45 = (($44) + 24|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)!=(0);
     $48 = $47 ? 42 : 113;
     $49 = $s;
     $50 = (($49) + 4|0);
     HEAP32[$50>>2] = $48;
     $51 = $s;
     $52 = (($51) + 24|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(2);
     if ($54) {
      $55 = (_crc32(0,0,0)|0);
      $59 = $55;
     } else {
      $56 = (_adler32(0,0,0)|0);
      $59 = $56;
     }
     $57 = $1;
     $58 = (($57) + 48|0);
     HEAP32[$58>>2] = $59;
     $60 = $s;
     $61 = (($60) + 40|0);
     HEAP32[$61>>2] = 0;
     $62 = $s;
     __tr_init($62);
     $0 = 0;
     $63 = $0;
     STACKTOP = sp;return ($63|0);
    }
   }
  }
 }
 $0 = -2;
 $63 = $0;
 STACKTOP = sp;return ($63|0);
}
function _deflate($strm,$flush) {
 $strm = $strm|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $beg = 0, $beg1 = 0, $beg2 = 0, $bstate = 0, $header = 0, $level_flags = 0, $old_flush = 0, $s = 0, $val = 0, $val3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $flush;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = $1;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = $2;
   $10 = ($9|0)>(5);
   if (!($10)) {
    $11 = $2;
    $12 = ($11|0)<(0);
    if (!($12)) {
     $13 = $1;
     $14 = (($13) + 28|0);
     $15 = HEAP32[$14>>2]|0;
     $s = $15;
     $16 = $1;
     $17 = (($16) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0|0);
     do {
      if (!($19)) {
       $20 = $1;
       $21 = HEAP32[$20>>2]|0;
       $22 = ($21|0)==(0|0);
       if ($22) {
        $23 = $1;
        $24 = (($23) + 4|0);
        $25 = HEAP32[$24>>2]|0;
        $26 = ($25|0)!=(0);
        if ($26) {
         break;
        }
       }
       $27 = $s;
       $28 = (($27) + 4|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($29|0)==(666);
       if ($30) {
        $31 = $2;
        $32 = ($31|0)!=(4);
        if ($32) {
         break;
        }
       }
       $36 = $1;
       $37 = (($36) + 16|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(0);
       if ($39) {
        $40 = HEAP32[((22424 + 28|0))>>2]|0;
        $41 = $1;
        $42 = (($41) + 24|0);
        HEAP32[$42>>2] = $40;
        $0 = -5;
        $1143 = $0;
        STACKTOP = sp;return ($1143|0);
       }
       $43 = $1;
       $44 = $s;
       HEAP32[$44>>2] = $43;
       $45 = $s;
       $46 = (($45) + 40|0);
       $47 = HEAP32[$46>>2]|0;
       $old_flush = $47;
       $48 = $2;
       $49 = $s;
       $50 = (($49) + 40|0);
       HEAP32[$50>>2] = $48;
       $51 = $s;
       $52 = (($51) + 4|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ($53|0)==(42);
       if ($54) {
        $55 = $s;
        $56 = (($55) + 24|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = ($57|0)==(2);
        if ($58) {
         $59 = (_crc32(0,0,0)|0);
         $60 = $1;
         $61 = (($60) + 48|0);
         HEAP32[$61>>2] = $59;
         $62 = $s;
         $63 = (($62) + 20|0);
         $64 = HEAP32[$63>>2]|0;
         $65 = (($64) + 1)|0;
         HEAP32[$63>>2] = $65;
         $66 = $s;
         $67 = (($66) + 8|0);
         $68 = HEAP32[$67>>2]|0;
         $69 = (($68) + ($64)|0);
         HEAP8[$69>>0] = 31;
         $70 = $s;
         $71 = (($70) + 20|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (($72) + 1)|0;
         HEAP32[$71>>2] = $73;
         $74 = $s;
         $75 = (($74) + 8|0);
         $76 = HEAP32[$75>>2]|0;
         $77 = (($76) + ($72)|0);
         HEAP8[$77>>0] = -117;
         $78 = $s;
         $79 = (($78) + 20|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = (($80) + 1)|0;
         HEAP32[$79>>2] = $81;
         $82 = $s;
         $83 = (($82) + 8|0);
         $84 = HEAP32[$83>>2]|0;
         $85 = (($84) + ($80)|0);
         HEAP8[$85>>0] = 8;
         $86 = $s;
         $87 = (($86) + 28|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = ($88|0)==(0|0);
         if ($89) {
          $90 = $s;
          $91 = (($90) + 20|0);
          $92 = HEAP32[$91>>2]|0;
          $93 = (($92) + 1)|0;
          HEAP32[$91>>2] = $93;
          $94 = $s;
          $95 = (($94) + 8|0);
          $96 = HEAP32[$95>>2]|0;
          $97 = (($96) + ($92)|0);
          HEAP8[$97>>0] = 0;
          $98 = $s;
          $99 = (($98) + 20|0);
          $100 = HEAP32[$99>>2]|0;
          $101 = (($100) + 1)|0;
          HEAP32[$99>>2] = $101;
          $102 = $s;
          $103 = (($102) + 8|0);
          $104 = HEAP32[$103>>2]|0;
          $105 = (($104) + ($100)|0);
          HEAP8[$105>>0] = 0;
          $106 = $s;
          $107 = (($106) + 20|0);
          $108 = HEAP32[$107>>2]|0;
          $109 = (($108) + 1)|0;
          HEAP32[$107>>2] = $109;
          $110 = $s;
          $111 = (($110) + 8|0);
          $112 = HEAP32[$111>>2]|0;
          $113 = (($112) + ($108)|0);
          HEAP8[$113>>0] = 0;
          $114 = $s;
          $115 = (($114) + 20|0);
          $116 = HEAP32[$115>>2]|0;
          $117 = (($116) + 1)|0;
          HEAP32[$115>>2] = $117;
          $118 = $s;
          $119 = (($118) + 8|0);
          $120 = HEAP32[$119>>2]|0;
          $121 = (($120) + ($116)|0);
          HEAP8[$121>>0] = 0;
          $122 = $s;
          $123 = (($122) + 20|0);
          $124 = HEAP32[$123>>2]|0;
          $125 = (($124) + 1)|0;
          HEAP32[$123>>2] = $125;
          $126 = $s;
          $127 = (($126) + 8|0);
          $128 = HEAP32[$127>>2]|0;
          $129 = (($128) + ($124)|0);
          HEAP8[$129>>0] = 0;
          $130 = $s;
          $131 = (($130) + 132|0);
          $132 = HEAP32[$131>>2]|0;
          $133 = ($132|0)==(9);
          if ($133) {
           $145 = 2;
          } else {
           $134 = $s;
           $135 = (($134) + 136|0);
           $136 = HEAP32[$135>>2]|0;
           $137 = ($136|0)>=(2);
           if ($137) {
            $142 = 1;
           } else {
            $138 = $s;
            $139 = (($138) + 132|0);
            $140 = HEAP32[$139>>2]|0;
            $141 = ($140|0)<(2);
            $142 = $141;
           }
           $143 = $142 ? 4 : 0;
           $145 = $143;
          }
          $144 = $145&255;
          $146 = $s;
          $147 = (($146) + 20|0);
          $148 = HEAP32[$147>>2]|0;
          $149 = (($148) + 1)|0;
          HEAP32[$147>>2] = $149;
          $150 = $s;
          $151 = (($150) + 8|0);
          $152 = HEAP32[$151>>2]|0;
          $153 = (($152) + ($148)|0);
          HEAP8[$153>>0] = $144;
          $154 = $s;
          $155 = (($154) + 20|0);
          $156 = HEAP32[$155>>2]|0;
          $157 = (($156) + 1)|0;
          HEAP32[$155>>2] = $157;
          $158 = $s;
          $159 = (($158) + 8|0);
          $160 = HEAP32[$159>>2]|0;
          $161 = (($160) + ($156)|0);
          HEAP8[$161>>0] = 3;
          $162 = $s;
          $163 = (($162) + 4|0);
          HEAP32[$163>>2] = 113;
         } else {
          $164 = $s;
          $165 = (($164) + 28|0);
          $166 = HEAP32[$165>>2]|0;
          $167 = HEAP32[$166>>2]|0;
          $168 = ($167|0)!=(0);
          $169 = $168 ? 1 : 0;
          $170 = $s;
          $171 = (($170) + 28|0);
          $172 = HEAP32[$171>>2]|0;
          $173 = (($172) + 44|0);
          $174 = HEAP32[$173>>2]|0;
          $175 = ($174|0)!=(0);
          $176 = $175 ? 2 : 0;
          $177 = (($169) + ($176))|0;
          $178 = $s;
          $179 = (($178) + 28|0);
          $180 = HEAP32[$179>>2]|0;
          $181 = (($180) + 16|0);
          $182 = HEAP32[$181>>2]|0;
          $183 = ($182|0)==(0|0);
          $184 = $183 ? 0 : 4;
          $185 = (($177) + ($184))|0;
          $186 = $s;
          $187 = (($186) + 28|0);
          $188 = HEAP32[$187>>2]|0;
          $189 = (($188) + 28|0);
          $190 = HEAP32[$189>>2]|0;
          $191 = ($190|0)==(0|0);
          $192 = $191 ? 0 : 8;
          $193 = (($185) + ($192))|0;
          $194 = $s;
          $195 = (($194) + 28|0);
          $196 = HEAP32[$195>>2]|0;
          $197 = (($196) + 36|0);
          $198 = HEAP32[$197>>2]|0;
          $199 = ($198|0)==(0|0);
          $200 = $199 ? 0 : 16;
          $201 = (($193) + ($200))|0;
          $202 = $201&255;
          $203 = $s;
          $204 = (($203) + 20|0);
          $205 = HEAP32[$204>>2]|0;
          $206 = (($205) + 1)|0;
          HEAP32[$204>>2] = $206;
          $207 = $s;
          $208 = (($207) + 8|0);
          $209 = HEAP32[$208>>2]|0;
          $210 = (($209) + ($205)|0);
          HEAP8[$210>>0] = $202;
          $211 = $s;
          $212 = (($211) + 28|0);
          $213 = HEAP32[$212>>2]|0;
          $214 = (($213) + 4|0);
          $215 = HEAP32[$214>>2]|0;
          $216 = $215 & 255;
          $217 = $216&255;
          $218 = $s;
          $219 = (($218) + 20|0);
          $220 = HEAP32[$219>>2]|0;
          $221 = (($220) + 1)|0;
          HEAP32[$219>>2] = $221;
          $222 = $s;
          $223 = (($222) + 8|0);
          $224 = HEAP32[$223>>2]|0;
          $225 = (($224) + ($220)|0);
          HEAP8[$225>>0] = $217;
          $226 = $s;
          $227 = (($226) + 28|0);
          $228 = HEAP32[$227>>2]|0;
          $229 = (($228) + 4|0);
          $230 = HEAP32[$229>>2]|0;
          $231 = $230 >>> 8;
          $232 = $231 & 255;
          $233 = $232&255;
          $234 = $s;
          $235 = (($234) + 20|0);
          $236 = HEAP32[$235>>2]|0;
          $237 = (($236) + 1)|0;
          HEAP32[$235>>2] = $237;
          $238 = $s;
          $239 = (($238) + 8|0);
          $240 = HEAP32[$239>>2]|0;
          $241 = (($240) + ($236)|0);
          HEAP8[$241>>0] = $233;
          $242 = $s;
          $243 = (($242) + 28|0);
          $244 = HEAP32[$243>>2]|0;
          $245 = (($244) + 4|0);
          $246 = HEAP32[$245>>2]|0;
          $247 = $246 >>> 16;
          $248 = $247 & 255;
          $249 = $248&255;
          $250 = $s;
          $251 = (($250) + 20|0);
          $252 = HEAP32[$251>>2]|0;
          $253 = (($252) + 1)|0;
          HEAP32[$251>>2] = $253;
          $254 = $s;
          $255 = (($254) + 8|0);
          $256 = HEAP32[$255>>2]|0;
          $257 = (($256) + ($252)|0);
          HEAP8[$257>>0] = $249;
          $258 = $s;
          $259 = (($258) + 28|0);
          $260 = HEAP32[$259>>2]|0;
          $261 = (($260) + 4|0);
          $262 = HEAP32[$261>>2]|0;
          $263 = $262 >>> 24;
          $264 = $263 & 255;
          $265 = $264&255;
          $266 = $s;
          $267 = (($266) + 20|0);
          $268 = HEAP32[$267>>2]|0;
          $269 = (($268) + 1)|0;
          HEAP32[$267>>2] = $269;
          $270 = $s;
          $271 = (($270) + 8|0);
          $272 = HEAP32[$271>>2]|0;
          $273 = (($272) + ($268)|0);
          HEAP8[$273>>0] = $265;
          $274 = $s;
          $275 = (($274) + 132|0);
          $276 = HEAP32[$275>>2]|0;
          $277 = ($276|0)==(9);
          if ($277) {
           $289 = 2;
          } else {
           $278 = $s;
           $279 = (($278) + 136|0);
           $280 = HEAP32[$279>>2]|0;
           $281 = ($280|0)>=(2);
           if ($281) {
            $286 = 1;
           } else {
            $282 = $s;
            $283 = (($282) + 132|0);
            $284 = HEAP32[$283>>2]|0;
            $285 = ($284|0)<(2);
            $286 = $285;
           }
           $287 = $286 ? 4 : 0;
           $289 = $287;
          }
          $288 = $289&255;
          $290 = $s;
          $291 = (($290) + 20|0);
          $292 = HEAP32[$291>>2]|0;
          $293 = (($292) + 1)|0;
          HEAP32[$291>>2] = $293;
          $294 = $s;
          $295 = (($294) + 8|0);
          $296 = HEAP32[$295>>2]|0;
          $297 = (($296) + ($292)|0);
          HEAP8[$297>>0] = $288;
          $298 = $s;
          $299 = (($298) + 28|0);
          $300 = HEAP32[$299>>2]|0;
          $301 = (($300) + 12|0);
          $302 = HEAP32[$301>>2]|0;
          $303 = $302 & 255;
          $304 = $303&255;
          $305 = $s;
          $306 = (($305) + 20|0);
          $307 = HEAP32[$306>>2]|0;
          $308 = (($307) + 1)|0;
          HEAP32[$306>>2] = $308;
          $309 = $s;
          $310 = (($309) + 8|0);
          $311 = HEAP32[$310>>2]|0;
          $312 = (($311) + ($307)|0);
          HEAP8[$312>>0] = $304;
          $313 = $s;
          $314 = (($313) + 28|0);
          $315 = HEAP32[$314>>2]|0;
          $316 = (($315) + 16|0);
          $317 = HEAP32[$316>>2]|0;
          $318 = ($317|0)!=(0|0);
          if ($318) {
           $319 = $s;
           $320 = (($319) + 28|0);
           $321 = HEAP32[$320>>2]|0;
           $322 = (($321) + 20|0);
           $323 = HEAP32[$322>>2]|0;
           $324 = $323 & 255;
           $325 = $324&255;
           $326 = $s;
           $327 = (($326) + 20|0);
           $328 = HEAP32[$327>>2]|0;
           $329 = (($328) + 1)|0;
           HEAP32[$327>>2] = $329;
           $330 = $s;
           $331 = (($330) + 8|0);
           $332 = HEAP32[$331>>2]|0;
           $333 = (($332) + ($328)|0);
           HEAP8[$333>>0] = $325;
           $334 = $s;
           $335 = (($334) + 28|0);
           $336 = HEAP32[$335>>2]|0;
           $337 = (($336) + 20|0);
           $338 = HEAP32[$337>>2]|0;
           $339 = $338 >>> 8;
           $340 = $339 & 255;
           $341 = $340&255;
           $342 = $s;
           $343 = (($342) + 20|0);
           $344 = HEAP32[$343>>2]|0;
           $345 = (($344) + 1)|0;
           HEAP32[$343>>2] = $345;
           $346 = $s;
           $347 = (($346) + 8|0);
           $348 = HEAP32[$347>>2]|0;
           $349 = (($348) + ($344)|0);
           HEAP8[$349>>0] = $341;
          }
          $350 = $s;
          $351 = (($350) + 28|0);
          $352 = HEAP32[$351>>2]|0;
          $353 = (($352) + 44|0);
          $354 = HEAP32[$353>>2]|0;
          $355 = ($354|0)!=(0);
          if ($355) {
           $356 = $1;
           $357 = (($356) + 48|0);
           $358 = HEAP32[$357>>2]|0;
           $359 = $s;
           $360 = (($359) + 8|0);
           $361 = HEAP32[$360>>2]|0;
           $362 = $s;
           $363 = (($362) + 20|0);
           $364 = HEAP32[$363>>2]|0;
           $365 = (_crc32($358,$361,$364)|0);
           $366 = $1;
           $367 = (($366) + 48|0);
           HEAP32[$367>>2] = $365;
          }
          $368 = $s;
          $369 = (($368) + 32|0);
          HEAP32[$369>>2] = 0;
          $370 = $s;
          $371 = (($370) + 4|0);
          HEAP32[$371>>2] = 69;
         }
        } else {
         $372 = $s;
         $373 = (($372) + 48|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = (($374) - 8)|0;
         $376 = $375 << 4;
         $377 = (8 + ($376))|0;
         $378 = $377 << 8;
         $header = $378;
         $379 = $s;
         $380 = (($379) + 136|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($381|0)>=(2);
         if ($382) {
          label = 36;
         } else {
          $383 = $s;
          $384 = (($383) + 132|0);
          $385 = HEAP32[$384>>2]|0;
          $386 = ($385|0)<(2);
          if ($386) {
           label = 36;
          } else {
           $387 = $s;
           $388 = (($387) + 132|0);
           $389 = HEAP32[$388>>2]|0;
           $390 = ($389|0)<(6);
           if ($390) {
            $level_flags = 1;
           } else {
            $391 = $s;
            $392 = (($391) + 132|0);
            $393 = HEAP32[$392>>2]|0;
            $394 = ($393|0)==(6);
            if ($394) {
             $level_flags = 2;
            } else {
             $level_flags = 3;
            }
           }
          }
         }
         if ((label|0) == 36) {
          $level_flags = 0;
         }
         $395 = $level_flags;
         $396 = $395 << 6;
         $397 = $header;
         $398 = $397 | $396;
         $header = $398;
         $399 = $s;
         $400 = (($399) + 108|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)!=(0);
         if ($402) {
          $403 = $header;
          $404 = $403 | 32;
          $header = $404;
         }
         $405 = $header;
         $406 = (($405>>>0) % 31)&-1;
         $407 = (31 - ($406))|0;
         $408 = $header;
         $409 = (($408) + ($407))|0;
         $header = $409;
         $410 = $s;
         $411 = (($410) + 4|0);
         HEAP32[$411>>2] = 113;
         $412 = $s;
         $413 = $header;
         _putShortMSB($412,$413);
         $414 = $s;
         $415 = (($414) + 108|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = ($416|0)!=(0);
         if ($417) {
          $418 = $s;
          $419 = $1;
          $420 = (($419) + 48|0);
          $421 = HEAP32[$420>>2]|0;
          $422 = $421 >>> 16;
          _putShortMSB($418,$422);
          $423 = $s;
          $424 = $1;
          $425 = (($424) + 48|0);
          $426 = HEAP32[$425>>2]|0;
          $427 = $426 & 65535;
          _putShortMSB($423,$427);
         }
         $428 = (_adler32(0,0,0)|0);
         $429 = $1;
         $430 = (($429) + 48|0);
         HEAP32[$430>>2] = $428;
        }
       }
       $431 = $s;
       $432 = (($431) + 4|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = ($433|0)==(69);
       if ($434) {
        $435 = $s;
        $436 = (($435) + 28|0);
        $437 = HEAP32[$436>>2]|0;
        $438 = (($437) + 16|0);
        $439 = HEAP32[$438>>2]|0;
        $440 = ($439|0)!=(0|0);
        if ($440) {
         $441 = $s;
         $442 = (($441) + 20|0);
         $443 = HEAP32[$442>>2]|0;
         $beg = $443;
         while(1) {
          $444 = $s;
          $445 = (($444) + 32|0);
          $446 = HEAP32[$445>>2]|0;
          $447 = $s;
          $448 = (($447) + 28|0);
          $449 = HEAP32[$448>>2]|0;
          $450 = (($449) + 20|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = $451 & 65535;
          $453 = ($446>>>0)<($452>>>0);
          if (!($453)) {
           break;
          }
          $454 = $s;
          $455 = (($454) + 20|0);
          $456 = HEAP32[$455>>2]|0;
          $457 = $s;
          $458 = (($457) + 12|0);
          $459 = HEAP32[$458>>2]|0;
          $460 = ($456|0)==($459|0);
          if ($460) {
           $461 = $s;
           $462 = (($461) + 28|0);
           $463 = HEAP32[$462>>2]|0;
           $464 = (($463) + 44|0);
           $465 = HEAP32[$464>>2]|0;
           $466 = ($465|0)!=(0);
           do {
            if ($466) {
             $467 = $s;
             $468 = (($467) + 20|0);
             $469 = HEAP32[$468>>2]|0;
             $470 = $beg;
             $471 = ($469>>>0)>($470>>>0);
             if (!($471)) {
              break;
             }
             $472 = $1;
             $473 = (($472) + 48|0);
             $474 = HEAP32[$473>>2]|0;
             $475 = $s;
             $476 = (($475) + 8|0);
             $477 = HEAP32[$476>>2]|0;
             $478 = $beg;
             $479 = (($477) + ($478)|0);
             $480 = $s;
             $481 = (($480) + 20|0);
             $482 = HEAP32[$481>>2]|0;
             $483 = $beg;
             $484 = (($482) - ($483))|0;
             $485 = (_crc32($474,$479,$484)|0);
             $486 = $1;
             $487 = (($486) + 48|0);
             HEAP32[$487>>2] = $485;
            }
           } while(0);
           $488 = $1;
           _flush_pending($488);
           $489 = $s;
           $490 = (($489) + 20|0);
           $491 = HEAP32[$490>>2]|0;
           $beg = $491;
           $492 = $s;
           $493 = (($492) + 20|0);
           $494 = HEAP32[$493>>2]|0;
           $495 = $s;
           $496 = (($495) + 12|0);
           $497 = HEAP32[$496>>2]|0;
           $498 = ($494|0)==($497|0);
           if ($498) {
            label = 59;
            break;
           }
          }
          $499 = $s;
          $500 = (($499) + 32|0);
          $501 = HEAP32[$500>>2]|0;
          $502 = $s;
          $503 = (($502) + 28|0);
          $504 = HEAP32[$503>>2]|0;
          $505 = (($504) + 16|0);
          $506 = HEAP32[$505>>2]|0;
          $507 = (($506) + ($501)|0);
          $508 = HEAP8[$507>>0]|0;
          $509 = $s;
          $510 = (($509) + 20|0);
          $511 = HEAP32[$510>>2]|0;
          $512 = (($511) + 1)|0;
          HEAP32[$510>>2] = $512;
          $513 = $s;
          $514 = (($513) + 8|0);
          $515 = HEAP32[$514>>2]|0;
          $516 = (($515) + ($511)|0);
          HEAP8[$516>>0] = $508;
          $517 = $s;
          $518 = (($517) + 32|0);
          $519 = HEAP32[$518>>2]|0;
          $520 = (($519) + 1)|0;
          HEAP32[$518>>2] = $520;
         }
         if ((label|0) == 59) {
         }
         $521 = $s;
         $522 = (($521) + 28|0);
         $523 = HEAP32[$522>>2]|0;
         $524 = (($523) + 44|0);
         $525 = HEAP32[$524>>2]|0;
         $526 = ($525|0)!=(0);
         if ($526) {
          $527 = $s;
          $528 = (($527) + 20|0);
          $529 = HEAP32[$528>>2]|0;
          $530 = $beg;
          $531 = ($529>>>0)>($530>>>0);
          if ($531) {
           $532 = $1;
           $533 = (($532) + 48|0);
           $534 = HEAP32[$533>>2]|0;
           $535 = $s;
           $536 = (($535) + 8|0);
           $537 = HEAP32[$536>>2]|0;
           $538 = $beg;
           $539 = (($537) + ($538)|0);
           $540 = $s;
           $541 = (($540) + 20|0);
           $542 = HEAP32[$541>>2]|0;
           $543 = $beg;
           $544 = (($542) - ($543))|0;
           $545 = (_crc32($534,$539,$544)|0);
           $546 = $1;
           $547 = (($546) + 48|0);
           HEAP32[$547>>2] = $545;
          }
         }
         $548 = $s;
         $549 = (($548) + 32|0);
         $550 = HEAP32[$549>>2]|0;
         $551 = $s;
         $552 = (($551) + 28|0);
         $553 = HEAP32[$552>>2]|0;
         $554 = (($553) + 20|0);
         $555 = HEAP32[$554>>2]|0;
         $556 = ($550|0)==($555|0);
         if ($556) {
          $557 = $s;
          $558 = (($557) + 32|0);
          HEAP32[$558>>2] = 0;
          $559 = $s;
          $560 = (($559) + 4|0);
          HEAP32[$560>>2] = 73;
         }
        } else {
         $561 = $s;
         $562 = (($561) + 4|0);
         HEAP32[$562>>2] = 73;
        }
       }
       $563 = $s;
       $564 = (($563) + 4|0);
       $565 = HEAP32[$564>>2]|0;
       $566 = ($565|0)==(73);
       if ($566) {
        $567 = $s;
        $568 = (($567) + 28|0);
        $569 = HEAP32[$568>>2]|0;
        $570 = (($569) + 28|0);
        $571 = HEAP32[$570>>2]|0;
        $572 = ($571|0)!=(0|0);
        if ($572) {
         $573 = $s;
         $574 = (($573) + 20|0);
         $575 = HEAP32[$574>>2]|0;
         $beg1 = $575;
         while(1) {
          $576 = $s;
          $577 = (($576) + 20|0);
          $578 = HEAP32[$577>>2]|0;
          $579 = $s;
          $580 = (($579) + 12|0);
          $581 = HEAP32[$580>>2]|0;
          $582 = ($578|0)==($581|0);
          if ($582) {
           $583 = $s;
           $584 = (($583) + 28|0);
           $585 = HEAP32[$584>>2]|0;
           $586 = (($585) + 44|0);
           $587 = HEAP32[$586>>2]|0;
           $588 = ($587|0)!=(0);
           do {
            if ($588) {
             $589 = $s;
             $590 = (($589) + 20|0);
             $591 = HEAP32[$590>>2]|0;
             $592 = $beg1;
             $593 = ($591>>>0)>($592>>>0);
             if (!($593)) {
              break;
             }
             $594 = $1;
             $595 = (($594) + 48|0);
             $596 = HEAP32[$595>>2]|0;
             $597 = $s;
             $598 = (($597) + 8|0);
             $599 = HEAP32[$598>>2]|0;
             $600 = $beg1;
             $601 = (($599) + ($600)|0);
             $602 = $s;
             $603 = (($602) + 20|0);
             $604 = HEAP32[$603>>2]|0;
             $605 = $beg1;
             $606 = (($604) - ($605))|0;
             $607 = (_crc32($596,$601,$606)|0);
             $608 = $1;
             $609 = (($608) + 48|0);
             HEAP32[$609>>2] = $607;
            }
           } while(0);
           $610 = $1;
           _flush_pending($610);
           $611 = $s;
           $612 = (($611) + 20|0);
           $613 = HEAP32[$612>>2]|0;
           $beg1 = $613;
           $614 = $s;
           $615 = (($614) + 20|0);
           $616 = HEAP32[$615>>2]|0;
           $617 = $s;
           $618 = (($617) + 12|0);
           $619 = HEAP32[$618>>2]|0;
           $620 = ($616|0)==($619|0);
           if ($620) {
            label = 78;
            break;
           }
          }
          $621 = $s;
          $622 = (($621) + 32|0);
          $623 = HEAP32[$622>>2]|0;
          $624 = (($623) + 1)|0;
          HEAP32[$622>>2] = $624;
          $625 = $s;
          $626 = (($625) + 28|0);
          $627 = HEAP32[$626>>2]|0;
          $628 = (($627) + 28|0);
          $629 = HEAP32[$628>>2]|0;
          $630 = (($629) + ($623)|0);
          $631 = HEAP8[$630>>0]|0;
          $632 = $631&255;
          $val = $632;
          $633 = $val;
          $634 = $633&255;
          $635 = $s;
          $636 = (($635) + 20|0);
          $637 = HEAP32[$636>>2]|0;
          $638 = (($637) + 1)|0;
          HEAP32[$636>>2] = $638;
          $639 = $s;
          $640 = (($639) + 8|0);
          $641 = HEAP32[$640>>2]|0;
          $642 = (($641) + ($637)|0);
          HEAP8[$642>>0] = $634;
          $643 = $val;
          $644 = ($643|0)!=(0);
          if (!($644)) {
           break;
          }
         }
         if ((label|0) == 78) {
          $val = 1;
         }
         $645 = $s;
         $646 = (($645) + 28|0);
         $647 = HEAP32[$646>>2]|0;
         $648 = (($647) + 44|0);
         $649 = HEAP32[$648>>2]|0;
         $650 = ($649|0)!=(0);
         if ($650) {
          $651 = $s;
          $652 = (($651) + 20|0);
          $653 = HEAP32[$652>>2]|0;
          $654 = $beg1;
          $655 = ($653>>>0)>($654>>>0);
          if ($655) {
           $656 = $1;
           $657 = (($656) + 48|0);
           $658 = HEAP32[$657>>2]|0;
           $659 = $s;
           $660 = (($659) + 8|0);
           $661 = HEAP32[$660>>2]|0;
           $662 = $beg1;
           $663 = (($661) + ($662)|0);
           $664 = $s;
           $665 = (($664) + 20|0);
           $666 = HEAP32[$665>>2]|0;
           $667 = $beg1;
           $668 = (($666) - ($667))|0;
           $669 = (_crc32($658,$663,$668)|0);
           $670 = $1;
           $671 = (($670) + 48|0);
           HEAP32[$671>>2] = $669;
          }
         }
         $672 = $val;
         $673 = ($672|0)==(0);
         if ($673) {
          $674 = $s;
          $675 = (($674) + 32|0);
          HEAP32[$675>>2] = 0;
          $676 = $s;
          $677 = (($676) + 4|0);
          HEAP32[$677>>2] = 91;
         }
        } else {
         $678 = $s;
         $679 = (($678) + 4|0);
         HEAP32[$679>>2] = 91;
        }
       }
       $680 = $s;
       $681 = (($680) + 4|0);
       $682 = HEAP32[$681>>2]|0;
       $683 = ($682|0)==(91);
       if ($683) {
        $684 = $s;
        $685 = (($684) + 28|0);
        $686 = HEAP32[$685>>2]|0;
        $687 = (($686) + 36|0);
        $688 = HEAP32[$687>>2]|0;
        $689 = ($688|0)!=(0|0);
        if ($689) {
         $690 = $s;
         $691 = (($690) + 20|0);
         $692 = HEAP32[$691>>2]|0;
         $beg2 = $692;
         while(1) {
          $693 = $s;
          $694 = (($693) + 20|0);
          $695 = HEAP32[$694>>2]|0;
          $696 = $s;
          $697 = (($696) + 12|0);
          $698 = HEAP32[$697>>2]|0;
          $699 = ($695|0)==($698|0);
          if ($699) {
           $700 = $s;
           $701 = (($700) + 28|0);
           $702 = HEAP32[$701>>2]|0;
           $703 = (($702) + 44|0);
           $704 = HEAP32[$703>>2]|0;
           $705 = ($704|0)!=(0);
           do {
            if ($705) {
             $706 = $s;
             $707 = (($706) + 20|0);
             $708 = HEAP32[$707>>2]|0;
             $709 = $beg2;
             $710 = ($708>>>0)>($709>>>0);
             if (!($710)) {
              break;
             }
             $711 = $1;
             $712 = (($711) + 48|0);
             $713 = HEAP32[$712>>2]|0;
             $714 = $s;
             $715 = (($714) + 8|0);
             $716 = HEAP32[$715>>2]|0;
             $717 = $beg2;
             $718 = (($716) + ($717)|0);
             $719 = $s;
             $720 = (($719) + 20|0);
             $721 = HEAP32[$720>>2]|0;
             $722 = $beg2;
             $723 = (($721) - ($722))|0;
             $724 = (_crc32($713,$718,$723)|0);
             $725 = $1;
             $726 = (($725) + 48|0);
             HEAP32[$726>>2] = $724;
            }
           } while(0);
           $727 = $1;
           _flush_pending($727);
           $728 = $s;
           $729 = (($728) + 20|0);
           $730 = HEAP32[$729>>2]|0;
           $beg2 = $730;
           $731 = $s;
           $732 = (($731) + 20|0);
           $733 = HEAP32[$732>>2]|0;
           $734 = $s;
           $735 = (($734) + 12|0);
           $736 = HEAP32[$735>>2]|0;
           $737 = ($733|0)==($736|0);
           if ($737) {
            label = 98;
            break;
           }
          }
          $738 = $s;
          $739 = (($738) + 32|0);
          $740 = HEAP32[$739>>2]|0;
          $741 = (($740) + 1)|0;
          HEAP32[$739>>2] = $741;
          $742 = $s;
          $743 = (($742) + 28|0);
          $744 = HEAP32[$743>>2]|0;
          $745 = (($744) + 36|0);
          $746 = HEAP32[$745>>2]|0;
          $747 = (($746) + ($740)|0);
          $748 = HEAP8[$747>>0]|0;
          $749 = $748&255;
          $val3 = $749;
          $750 = $val3;
          $751 = $750&255;
          $752 = $s;
          $753 = (($752) + 20|0);
          $754 = HEAP32[$753>>2]|0;
          $755 = (($754) + 1)|0;
          HEAP32[$753>>2] = $755;
          $756 = $s;
          $757 = (($756) + 8|0);
          $758 = HEAP32[$757>>2]|0;
          $759 = (($758) + ($754)|0);
          HEAP8[$759>>0] = $751;
          $760 = $val3;
          $761 = ($760|0)!=(0);
          if (!($761)) {
           break;
          }
         }
         if ((label|0) == 98) {
          $val3 = 1;
         }
         $762 = $s;
         $763 = (($762) + 28|0);
         $764 = HEAP32[$763>>2]|0;
         $765 = (($764) + 44|0);
         $766 = HEAP32[$765>>2]|0;
         $767 = ($766|0)!=(0);
         if ($767) {
          $768 = $s;
          $769 = (($768) + 20|0);
          $770 = HEAP32[$769>>2]|0;
          $771 = $beg2;
          $772 = ($770>>>0)>($771>>>0);
          if ($772) {
           $773 = $1;
           $774 = (($773) + 48|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = $s;
           $777 = (($776) + 8|0);
           $778 = HEAP32[$777>>2]|0;
           $779 = $beg2;
           $780 = (($778) + ($779)|0);
           $781 = $s;
           $782 = (($781) + 20|0);
           $783 = HEAP32[$782>>2]|0;
           $784 = $beg2;
           $785 = (($783) - ($784))|0;
           $786 = (_crc32($775,$780,$785)|0);
           $787 = $1;
           $788 = (($787) + 48|0);
           HEAP32[$788>>2] = $786;
          }
         }
         $789 = $val3;
         $790 = ($789|0)==(0);
         if ($790) {
          $791 = $s;
          $792 = (($791) + 4|0);
          HEAP32[$792>>2] = 103;
         }
        } else {
         $793 = $s;
         $794 = (($793) + 4|0);
         HEAP32[$794>>2] = 103;
        }
       }
       $795 = $s;
       $796 = (($795) + 4|0);
       $797 = HEAP32[$796>>2]|0;
       $798 = ($797|0)==(103);
       if ($798) {
        $799 = $s;
        $800 = (($799) + 28|0);
        $801 = HEAP32[$800>>2]|0;
        $802 = (($801) + 44|0);
        $803 = HEAP32[$802>>2]|0;
        $804 = ($803|0)!=(0);
        if ($804) {
         $805 = $s;
         $806 = (($805) + 20|0);
         $807 = HEAP32[$806>>2]|0;
         $808 = (($807) + 2)|0;
         $809 = $s;
         $810 = (($809) + 12|0);
         $811 = HEAP32[$810>>2]|0;
         $812 = ($808>>>0)>($811>>>0);
         if ($812) {
          $813 = $1;
          _flush_pending($813);
         }
         $814 = $s;
         $815 = (($814) + 20|0);
         $816 = HEAP32[$815>>2]|0;
         $817 = (($816) + 2)|0;
         $818 = $s;
         $819 = (($818) + 12|0);
         $820 = HEAP32[$819>>2]|0;
         $821 = ($817>>>0)<=($820>>>0);
         if ($821) {
          $822 = $1;
          $823 = (($822) + 48|0);
          $824 = HEAP32[$823>>2]|0;
          $825 = $824 & 255;
          $826 = $825&255;
          $827 = $s;
          $828 = (($827) + 20|0);
          $829 = HEAP32[$828>>2]|0;
          $830 = (($829) + 1)|0;
          HEAP32[$828>>2] = $830;
          $831 = $s;
          $832 = (($831) + 8|0);
          $833 = HEAP32[$832>>2]|0;
          $834 = (($833) + ($829)|0);
          HEAP8[$834>>0] = $826;
          $835 = $1;
          $836 = (($835) + 48|0);
          $837 = HEAP32[$836>>2]|0;
          $838 = $837 >>> 8;
          $839 = $838 & 255;
          $840 = $839&255;
          $841 = $s;
          $842 = (($841) + 20|0);
          $843 = HEAP32[$842>>2]|0;
          $844 = (($843) + 1)|0;
          HEAP32[$842>>2] = $844;
          $845 = $s;
          $846 = (($845) + 8|0);
          $847 = HEAP32[$846>>2]|0;
          $848 = (($847) + ($843)|0);
          HEAP8[$848>>0] = $840;
          $849 = (_crc32(0,0,0)|0);
          $850 = $1;
          $851 = (($850) + 48|0);
          HEAP32[$851>>2] = $849;
          $852 = $s;
          $853 = (($852) + 4|0);
          HEAP32[$853>>2] = 113;
         }
        } else {
         $854 = $s;
         $855 = (($854) + 4|0);
         HEAP32[$855>>2] = 113;
        }
       }
       $856 = $s;
       $857 = (($856) + 20|0);
       $858 = HEAP32[$857>>2]|0;
       $859 = ($858|0)!=(0);
       do {
        if ($859) {
         $860 = $1;
         _flush_pending($860);
         $861 = $1;
         $862 = (($861) + 16|0);
         $863 = HEAP32[$862>>2]|0;
         $864 = ($863|0)==(0);
         if (!($864)) {
          break;
         }
         $865 = $s;
         $866 = (($865) + 40|0);
         HEAP32[$866>>2] = -1;
         $0 = 0;
         $1143 = $0;
         STACKTOP = sp;return ($1143|0);
        } else {
         $867 = $1;
         $868 = (($867) + 4|0);
         $869 = HEAP32[$868>>2]|0;
         $870 = ($869|0)==(0);
         do {
          if ($870) {
           $871 = $2;
           $872 = $871 << 1;
           $873 = $2;
           $874 = ($873|0)>(4);
           $875 = $874 ? 9 : 0;
           $876 = (($872) - ($875))|0;
           $877 = $old_flush;
           $878 = $877 << 1;
           $879 = $old_flush;
           $880 = ($879|0)>(4);
           $881 = $880 ? 9 : 0;
           $882 = (($878) - ($881))|0;
           $883 = ($876|0)<=($882|0);
           if ($883) {
            $884 = $2;
            $885 = ($884|0)!=(4);
            if (!($885)) {
             break;
            }
            $886 = HEAP32[((22424 + 28|0))>>2]|0;
            $887 = $1;
            $888 = (($887) + 24|0);
            HEAP32[$888>>2] = $886;
            $0 = -5;
            $1143 = $0;
            STACKTOP = sp;return ($1143|0);
           }
          }
         } while(0);
        }
       } while(0);
       $889 = $s;
       $890 = (($889) + 4|0);
       $891 = HEAP32[$890>>2]|0;
       $892 = ($891|0)==(666);
       if ($892) {
        $893 = $1;
        $894 = (($893) + 4|0);
        $895 = HEAP32[$894>>2]|0;
        $896 = ($895|0)!=(0);
        if ($896) {
         $897 = HEAP32[((22424 + 28|0))>>2]|0;
         $898 = $1;
         $899 = (($898) + 24|0);
         HEAP32[$899>>2] = $897;
         $0 = -5;
         $1143 = $0;
         STACKTOP = sp;return ($1143|0);
        }
       }
       $900 = $1;
       $901 = (($900) + 4|0);
       $902 = HEAP32[$901>>2]|0;
       $903 = ($902|0)!=(0);
       do {
        if ($903) {
         label = 135;
        } else {
         $904 = $s;
         $905 = (($904) + 116|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = ($906|0)!=(0);
         if ($907) {
          label = 135;
         } else {
          $908 = $2;
          $909 = ($908|0)!=(0);
          if (!($909)) {
           break;
          }
          $910 = $s;
          $911 = (($910) + 4|0);
          $912 = HEAP32[$911>>2]|0;
          $913 = ($912|0)!=(666);
          if ($913) {
           label = 135;
          }
         }
        }
       } while(0);
       L189: do {
        if ((label|0) == 135) {
         $914 = $s;
         $915 = (($914) + 136|0);
         $916 = HEAP32[$915>>2]|0;
         $917 = ($916|0)==(2);
         if ($917) {
          $918 = $s;
          $919 = $2;
          $920 = (_deflate_huff($918,$919)|0);
          $937 = $920;
         } else {
          $921 = $s;
          $922 = (($921) + 136|0);
          $923 = HEAP32[$922>>2]|0;
          $924 = ($923|0)==(3);
          if ($924) {
           $925 = $s;
           $926 = $2;
           $927 = (_deflate_rle($925,$926)|0);
           $1144 = $927;
          } else {
           $928 = $s;
           $929 = (($928) + 132|0);
           $930 = HEAP32[$929>>2]|0;
           $931 = (19296 + (($930*12)|0)|0);
           $932 = (($931) + 8|0);
           $933 = HEAP32[$932>>2]|0;
           $934 = $s;
           $935 = $2;
           $936 = (FUNCTION_TABLE_iii[$933 & 63]($934,$935)|0);
           $1144 = $936;
          }
          $937 = $1144;
         }
         $bstate = $937;
         $938 = $bstate;
         $939 = ($938|0)==(2);
         if ($939) {
          label = 143;
         } else {
          $940 = $bstate;
          $941 = ($940|0)==(3);
          if ($941) {
           label = 143;
          }
         }
         if ((label|0) == 143) {
          $942 = $s;
          $943 = (($942) + 4|0);
          HEAP32[$943>>2] = 666;
         }
         $944 = $bstate;
         $945 = ($944|0)==(0);
         do {
          if (!($945)) {
           $946 = $bstate;
           $947 = ($946|0)==(2);
           if ($947) {
            break;
           }
           $954 = $bstate;
           $955 = ($954|0)==(1);
           do {
            if ($955) {
             $956 = $2;
             $957 = ($956|0)==(1);
             if ($957) {
              $958 = $s;
              __tr_align($958);
             } else {
              $959 = $2;
              $960 = ($959|0)!=(5);
              if ($960) {
               $961 = $s;
               __tr_stored_block($961,0,0,0);
               $962 = $2;
               $963 = ($962|0)==(3);
               if ($963) {
                $964 = $s;
                $965 = (($964) + 76|0);
                $966 = HEAP32[$965>>2]|0;
                $967 = (($966) - 1)|0;
                $968 = $s;
                $969 = (($968) + 68|0);
                $970 = HEAP32[$969>>2]|0;
                $971 = (($970) + ($967<<1)|0);
                HEAP16[$971>>1] = 0;
                $972 = $s;
                $973 = (($972) + 68|0);
                $974 = HEAP32[$973>>2]|0;
                $975 = $s;
                $976 = (($975) + 76|0);
                $977 = HEAP32[$976>>2]|0;
                $978 = (($977) - 1)|0;
                $979 = $978<<1;
                _memset(($974|0),0,($979|0))|0;
                $980 = $s;
                $981 = (($980) + 116|0);
                $982 = HEAP32[$981>>2]|0;
                $983 = ($982|0)==(0);
                if ($983) {
                 $984 = $s;
                 $985 = (($984) + 108|0);
                 HEAP32[$985>>2] = 0;
                 $986 = $s;
                 $987 = (($986) + 92|0);
                 HEAP32[$987>>2] = 0;
                 $988 = $s;
                 $989 = (($988) + 5812|0);
                 HEAP32[$989>>2] = 0;
                }
               }
              }
             }
             $990 = $1;
             _flush_pending($990);
             $991 = $1;
             $992 = (($991) + 16|0);
             $993 = HEAP32[$992>>2]|0;
             $994 = ($993|0)==(0);
             if (!($994)) {
              break;
             }
             $995 = $s;
             $996 = (($995) + 40|0);
             HEAP32[$996>>2] = -1;
             $0 = 0;
             $1143 = $0;
             STACKTOP = sp;return ($1143|0);
            }
           } while(0);
           break L189;
          }
         } while(0);
         $948 = $1;
         $949 = (($948) + 16|0);
         $950 = HEAP32[$949>>2]|0;
         $951 = ($950|0)==(0);
         if ($951) {
          $952 = $s;
          $953 = (($952) + 40|0);
          HEAP32[$953>>2] = -1;
         }
         $0 = 0;
         $1143 = $0;
         STACKTOP = sp;return ($1143|0);
        }
       } while(0);
       $997 = $2;
       $998 = ($997|0)!=(4);
       if ($998) {
        $0 = 0;
        $1143 = $0;
        STACKTOP = sp;return ($1143|0);
       }
       $999 = $s;
       $1000 = (($999) + 24|0);
       $1001 = HEAP32[$1000>>2]|0;
       $1002 = ($1001|0)<=(0);
       if ($1002) {
        $0 = 1;
        $1143 = $0;
        STACKTOP = sp;return ($1143|0);
       }
       $1003 = $s;
       $1004 = (($1003) + 24|0);
       $1005 = HEAP32[$1004>>2]|0;
       $1006 = ($1005|0)==(2);
       if ($1006) {
        $1007 = $1;
        $1008 = (($1007) + 48|0);
        $1009 = HEAP32[$1008>>2]|0;
        $1010 = $1009 & 255;
        $1011 = $1010&255;
        $1012 = $s;
        $1013 = (($1012) + 20|0);
        $1014 = HEAP32[$1013>>2]|0;
        $1015 = (($1014) + 1)|0;
        HEAP32[$1013>>2] = $1015;
        $1016 = $s;
        $1017 = (($1016) + 8|0);
        $1018 = HEAP32[$1017>>2]|0;
        $1019 = (($1018) + ($1014)|0);
        HEAP8[$1019>>0] = $1011;
        $1020 = $1;
        $1021 = (($1020) + 48|0);
        $1022 = HEAP32[$1021>>2]|0;
        $1023 = $1022 >>> 8;
        $1024 = $1023 & 255;
        $1025 = $1024&255;
        $1026 = $s;
        $1027 = (($1026) + 20|0);
        $1028 = HEAP32[$1027>>2]|0;
        $1029 = (($1028) + 1)|0;
        HEAP32[$1027>>2] = $1029;
        $1030 = $s;
        $1031 = (($1030) + 8|0);
        $1032 = HEAP32[$1031>>2]|0;
        $1033 = (($1032) + ($1028)|0);
        HEAP8[$1033>>0] = $1025;
        $1034 = $1;
        $1035 = (($1034) + 48|0);
        $1036 = HEAP32[$1035>>2]|0;
        $1037 = $1036 >>> 16;
        $1038 = $1037 & 255;
        $1039 = $1038&255;
        $1040 = $s;
        $1041 = (($1040) + 20|0);
        $1042 = HEAP32[$1041>>2]|0;
        $1043 = (($1042) + 1)|0;
        HEAP32[$1041>>2] = $1043;
        $1044 = $s;
        $1045 = (($1044) + 8|0);
        $1046 = HEAP32[$1045>>2]|0;
        $1047 = (($1046) + ($1042)|0);
        HEAP8[$1047>>0] = $1039;
        $1048 = $1;
        $1049 = (($1048) + 48|0);
        $1050 = HEAP32[$1049>>2]|0;
        $1051 = $1050 >>> 24;
        $1052 = $1051 & 255;
        $1053 = $1052&255;
        $1054 = $s;
        $1055 = (($1054) + 20|0);
        $1056 = HEAP32[$1055>>2]|0;
        $1057 = (($1056) + 1)|0;
        HEAP32[$1055>>2] = $1057;
        $1058 = $s;
        $1059 = (($1058) + 8|0);
        $1060 = HEAP32[$1059>>2]|0;
        $1061 = (($1060) + ($1056)|0);
        HEAP8[$1061>>0] = $1053;
        $1062 = $1;
        $1063 = (($1062) + 8|0);
        $1064 = HEAP32[$1063>>2]|0;
        $1065 = $1064 & 255;
        $1066 = $1065&255;
        $1067 = $s;
        $1068 = (($1067) + 20|0);
        $1069 = HEAP32[$1068>>2]|0;
        $1070 = (($1069) + 1)|0;
        HEAP32[$1068>>2] = $1070;
        $1071 = $s;
        $1072 = (($1071) + 8|0);
        $1073 = HEAP32[$1072>>2]|0;
        $1074 = (($1073) + ($1069)|0);
        HEAP8[$1074>>0] = $1066;
        $1075 = $1;
        $1076 = (($1075) + 8|0);
        $1077 = HEAP32[$1076>>2]|0;
        $1078 = $1077 >>> 8;
        $1079 = $1078 & 255;
        $1080 = $1079&255;
        $1081 = $s;
        $1082 = (($1081) + 20|0);
        $1083 = HEAP32[$1082>>2]|0;
        $1084 = (($1083) + 1)|0;
        HEAP32[$1082>>2] = $1084;
        $1085 = $s;
        $1086 = (($1085) + 8|0);
        $1087 = HEAP32[$1086>>2]|0;
        $1088 = (($1087) + ($1083)|0);
        HEAP8[$1088>>0] = $1080;
        $1089 = $1;
        $1090 = (($1089) + 8|0);
        $1091 = HEAP32[$1090>>2]|0;
        $1092 = $1091 >>> 16;
        $1093 = $1092 & 255;
        $1094 = $1093&255;
        $1095 = $s;
        $1096 = (($1095) + 20|0);
        $1097 = HEAP32[$1096>>2]|0;
        $1098 = (($1097) + 1)|0;
        HEAP32[$1096>>2] = $1098;
        $1099 = $s;
        $1100 = (($1099) + 8|0);
        $1101 = HEAP32[$1100>>2]|0;
        $1102 = (($1101) + ($1097)|0);
        HEAP8[$1102>>0] = $1094;
        $1103 = $1;
        $1104 = (($1103) + 8|0);
        $1105 = HEAP32[$1104>>2]|0;
        $1106 = $1105 >>> 24;
        $1107 = $1106 & 255;
        $1108 = $1107&255;
        $1109 = $s;
        $1110 = (($1109) + 20|0);
        $1111 = HEAP32[$1110>>2]|0;
        $1112 = (($1111) + 1)|0;
        HEAP32[$1110>>2] = $1112;
        $1113 = $s;
        $1114 = (($1113) + 8|0);
        $1115 = HEAP32[$1114>>2]|0;
        $1116 = (($1115) + ($1111)|0);
        HEAP8[$1116>>0] = $1108;
       } else {
        $1117 = $s;
        $1118 = $1;
        $1119 = (($1118) + 48|0);
        $1120 = HEAP32[$1119>>2]|0;
        $1121 = $1120 >>> 16;
        _putShortMSB($1117,$1121);
        $1122 = $s;
        $1123 = $1;
        $1124 = (($1123) + 48|0);
        $1125 = HEAP32[$1124>>2]|0;
        $1126 = $1125 & 65535;
        _putShortMSB($1122,$1126);
       }
       $1127 = $1;
       _flush_pending($1127);
       $1128 = $s;
       $1129 = (($1128) + 24|0);
       $1130 = HEAP32[$1129>>2]|0;
       $1131 = ($1130|0)>(0);
       if ($1131) {
        $1132 = $s;
        $1133 = (($1132) + 24|0);
        $1134 = HEAP32[$1133>>2]|0;
        $1135 = (0 - ($1134))|0;
        $1136 = $s;
        $1137 = (($1136) + 24|0);
        HEAP32[$1137>>2] = $1135;
       }
       $1138 = $s;
       $1139 = (($1138) + 20|0);
       $1140 = HEAP32[$1139>>2]|0;
       $1141 = ($1140|0)!=(0);
       $1142 = $1141 ? 0 : 1;
       $0 = $1142;
       $1143 = $0;
       STACKTOP = sp;return ($1143|0);
      }
     } while(0);
     $33 = HEAP32[((22424 + 16|0))>>2]|0;
     $34 = $1;
     $35 = (($34) + 24|0);
     HEAP32[$35>>2] = $33;
     $0 = -2;
     $1143 = $0;
     STACKTOP = sp;return ($1143|0);
    }
   }
  }
 }
 $0 = -2;
 $1143 = $0;
 STACKTOP = sp;return ($1143|0);
}
function _lm_init($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (($1) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3<<1;
 $5 = $0;
 $6 = (($5) + 60|0);
 HEAP32[$6>>2] = $4;
 $7 = $0;
 $8 = (($7) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - 1)|0;
 $11 = $0;
 $12 = (($11) + 68|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($10<<1)|0);
 HEAP16[$14>>1] = 0;
 $15 = $0;
 $16 = (($15) + 68|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = (($18) + 76|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) - 1)|0;
 $22 = $21<<1;
 _memset(($17|0),0,($22|0))|0;
 $23 = $0;
 $24 = (($23) + 132|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (19296 + (($25*12)|0)|0);
 $27 = (($26) + 2|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = $0;
 $31 = (($30) + 128|0);
 HEAP32[$31>>2] = $29;
 $32 = $0;
 $33 = (($32) + 132|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (19296 + (($34*12)|0)|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = $0;
 $39 = (($38) + 140|0);
 HEAP32[$39>>2] = $37;
 $40 = $0;
 $41 = (($40) + 132|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (19296 + (($42*12)|0)|0);
 $44 = (($43) + 4|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = $0;
 $48 = (($47) + 144|0);
 HEAP32[$48>>2] = $46;
 $49 = $0;
 $50 = (($49) + 132|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (19296 + (($51*12)|0)|0);
 $53 = (($52) + 6|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = $54&65535;
 $56 = $0;
 $57 = (($56) + 124|0);
 HEAP32[$57>>2] = $55;
 $58 = $0;
 $59 = (($58) + 108|0);
 HEAP32[$59>>2] = 0;
 $60 = $0;
 $61 = (($60) + 92|0);
 HEAP32[$61>>2] = 0;
 $62 = $0;
 $63 = (($62) + 116|0);
 HEAP32[$63>>2] = 0;
 $64 = $0;
 $65 = (($64) + 5812|0);
 HEAP32[$65>>2] = 0;
 $66 = $0;
 $67 = (($66) + 120|0);
 HEAP32[$67>>2] = 2;
 $68 = $0;
 $69 = (($68) + 96|0);
 HEAP32[$69>>2] = 2;
 $70 = $0;
 $71 = (($70) + 104|0);
 HEAP32[$71>>2] = 0;
 $72 = $0;
 $73 = (($72) + 72|0);
 HEAP32[$73>>2] = 0;
 STACKTOP = sp;return;
}
function _fill_window($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $init = 0, $m = 0, $more = 0, $n = 0, $p = 0, $str = 0, $wsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (($1) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $wsize = $3;
 while(1) {
  $4 = $0;
  $5 = (($4) + 60|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $0;
  $8 = (($7) + 116|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($6) - ($9))|0;
  $11 = $0;
  $12 = (($11) + 108|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($10) - ($13))|0;
  $more = $14;
  $15 = $0;
  $16 = (($15) + 108|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $wsize;
  $19 = $0;
  $20 = (($19) + 44|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) - 262)|0;
  $23 = (($18) + ($22))|0;
  $24 = ($17>>>0)>=($23>>>0);
  if ($24) {
   $25 = $0;
   $26 = (($25) + 56|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $0;
   $29 = (($28) + 56|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $wsize;
   $32 = (($30) + ($31)|0);
   $33 = $wsize;
   _memcpy(($27|0),($32|0),($33|0))|0;
   $34 = $wsize;
   $35 = $0;
   $36 = (($35) + 112|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - ($34))|0;
   HEAP32[$36>>2] = $38;
   $39 = $wsize;
   $40 = $0;
   $41 = (($40) + 108|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) - ($39))|0;
   HEAP32[$41>>2] = $43;
   $44 = $wsize;
   $45 = $0;
   $46 = (($45) + 92|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) - ($44))|0;
   HEAP32[$46>>2] = $48;
   $49 = $0;
   $50 = (($49) + 76|0);
   $51 = HEAP32[$50>>2]|0;
   $n = $51;
   $52 = $n;
   $53 = $0;
   $54 = (($53) + 68|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + ($52<<1)|0);
   $p = $56;
   while(1) {
    $57 = $p;
    $58 = (($57) + -2|0);
    $p = $58;
    $59 = HEAP16[$58>>1]|0;
    $60 = $59&65535;
    $m = $60;
    $61 = $m;
    $62 = $wsize;
    $63 = ($61>>>0)>=($62>>>0);
    if ($63) {
     $64 = $m;
     $65 = $wsize;
     $66 = (($64) - ($65))|0;
     $68 = $66;
    } else {
     $68 = 0;
    }
    $67 = $68&65535;
    $69 = $p;
    HEAP16[$69>>1] = $67;
    $70 = $n;
    $71 = (($70) + -1)|0;
    $n = $71;
    $72 = ($71|0)!=(0);
    if (!($72)) {
     break;
    }
   }
   $73 = $wsize;
   $n = $73;
   $74 = $n;
   $75 = $0;
   $76 = (($75) + 64|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + ($74<<1)|0);
   $p = $78;
   while(1) {
    $79 = $p;
    $80 = (($79) + -2|0);
    $p = $80;
    $81 = HEAP16[$80>>1]|0;
    $82 = $81&65535;
    $m = $82;
    $83 = $m;
    $84 = $wsize;
    $85 = ($83>>>0)>=($84>>>0);
    if ($85) {
     $86 = $m;
     $87 = $wsize;
     $88 = (($86) - ($87))|0;
     $90 = $88;
    } else {
     $90 = 0;
    }
    $89 = $90&65535;
    $91 = $p;
    HEAP16[$91>>1] = $89;
    $92 = $n;
    $93 = (($92) + -1)|0;
    $n = $93;
    $94 = ($93|0)!=(0);
    if (!($94)) {
     break;
    }
   }
   $95 = $wsize;
   $96 = $more;
   $97 = (($96) + ($95))|0;
   $more = $97;
  }
  $98 = $0;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)==(0);
  if ($102) {
   label = 17;
   break;
  }
  $103 = $0;
  $104 = HEAP32[$103>>2]|0;
  $105 = $0;
  $106 = (($105) + 56|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $0;
  $109 = (($108) + 108|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($107) + ($110)|0);
  $112 = $0;
  $113 = (($112) + 116|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($111) + ($114)|0);
  $116 = $more;
  $117 = (_read_buf($104,$115,$116)|0);
  $n = $117;
  $118 = $n;
  $119 = $0;
  $120 = (($119) + 116|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($121) + ($118))|0;
  HEAP32[$120>>2] = $122;
  $123 = $0;
  $124 = (($123) + 116|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $0;
  $127 = (($126) + 5812|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($125) + ($128))|0;
  $130 = ($129>>>0)>=(3);
  if ($130) {
   $131 = $0;
   $132 = (($131) + 108|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $0;
   $135 = (($134) + 5812|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($133) - ($136))|0;
   $str = $137;
   $138 = $str;
   $139 = $0;
   $140 = (($139) + 56|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (($141) + ($138)|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $143&255;
   $145 = $0;
   $146 = (($145) + 72|0);
   HEAP32[$146>>2] = $144;
   $147 = $0;
   $148 = (($147) + 72|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $0;
   $151 = (($150) + 88|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $149 << $152;
   $154 = $str;
   $155 = (($154) + 1)|0;
   $156 = $0;
   $157 = (($156) + 56|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (($158) + ($155)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = $153 ^ $161;
   $163 = $0;
   $164 = (($163) + 84|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $162 & $165;
   $167 = $0;
   $168 = (($167) + 72|0);
   HEAP32[$168>>2] = $166;
   while(1) {
    $169 = $0;
    $170 = (($169) + 5812|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ($171|0)!=(0);
    if (!($172)) {
     break;
    }
    $173 = $0;
    $174 = (($173) + 72|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $0;
    $177 = (($176) + 88|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = $175 << $178;
    $180 = $str;
    $181 = (($180) + 3)|0;
    $182 = (($181) - 1)|0;
    $183 = $0;
    $184 = (($183) + 56|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (($185) + ($182)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $189 = $179 ^ $188;
    $190 = $0;
    $191 = (($190) + 84|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $189 & $192;
    $194 = $0;
    $195 = (($194) + 72|0);
    HEAP32[$195>>2] = $193;
    $196 = $0;
    $197 = (($196) + 72|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = $0;
    $200 = (($199) + 68|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = (($201) + ($198<<1)|0);
    $203 = HEAP16[$202>>1]|0;
    $204 = $str;
    $205 = $0;
    $206 = (($205) + 52|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $204 & $207;
    $209 = $0;
    $210 = (($209) + 64|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = (($211) + ($208<<1)|0);
    HEAP16[$212>>1] = $203;
    $213 = $str;
    $214 = $213&65535;
    $215 = $0;
    $216 = (($215) + 72|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $0;
    $219 = (($218) + 68|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = (($220) + ($217<<1)|0);
    HEAP16[$221>>1] = $214;
    $222 = $str;
    $223 = (($222) + 1)|0;
    $str = $223;
    $224 = $0;
    $225 = (($224) + 5812|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (($226) + -1)|0;
    HEAP32[$225>>2] = $227;
    $228 = $0;
    $229 = (($228) + 116|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = $0;
    $232 = (($231) + 5812|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = (($230) + ($233))|0;
    $235 = ($234>>>0)<(3);
    if ($235) {
     label = 22;
     break;
    }
   }
   if ((label|0) == 22) {
    label = 0;
   }
  }
  $236 = $0;
  $237 = (($236) + 116|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = ($238>>>0)<(262);
  if ($239) {
   $240 = $0;
   $241 = HEAP32[$240>>2]|0;
   $242 = (($241) + 4|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = ($243|0)!=(0);
   $323 = $244;
  } else {
   $323 = 0;
  }
  if (!($323)) {
   break;
  }
 }
 if ((label|0) == 17) {
 }
 $245 = $0;
 $246 = (($245) + 5824|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = $0;
 $249 = (($248) + 60|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = ($247>>>0)<($250>>>0);
 if (!($251)) {
  STACKTOP = sp;return;
 }
 $252 = $0;
 $253 = (($252) + 108|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = $0;
 $256 = (($255) + 116|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = (($254) + ($257))|0;
 $curr = $258;
 $259 = $0;
 $260 = (($259) + 5824|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = $curr;
 $263 = ($261>>>0)<($262>>>0);
 if ($263) {
  $264 = $0;
  $265 = (($264) + 60|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = $curr;
  $268 = (($266) - ($267))|0;
  $init = $268;
  $269 = $init;
  $270 = ($269>>>0)>(258);
  if ($270) {
   $init = 258;
  }
  $271 = $0;
  $272 = (($271) + 56|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = $curr;
  $275 = (($273) + ($274)|0);
  $276 = $init;
  _memset(($275|0),0,($276|0))|0;
  $277 = $curr;
  $278 = $init;
  $279 = (($277) + ($278))|0;
  $280 = $0;
  $281 = (($280) + 5824|0);
  HEAP32[$281>>2] = $279;
 } else {
  $282 = $0;
  $283 = (($282) + 5824|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $curr;
  $286 = (($285) + 258)|0;
  $287 = ($284>>>0)<($286>>>0);
  if ($287) {
   $288 = $curr;
   $289 = (($288) + 258)|0;
   $290 = $0;
   $291 = (($290) + 5824|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = (($289) - ($292))|0;
   $init = $293;
   $294 = $init;
   $295 = $0;
   $296 = (($295) + 60|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = $0;
   $299 = (($298) + 5824|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = (($297) - ($300))|0;
   $302 = ($294>>>0)>($301>>>0);
   if ($302) {
    $303 = $0;
    $304 = (($303) + 60|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = $0;
    $307 = (($306) + 5824|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = (($305) - ($308))|0;
    $init = $309;
   }
   $310 = $0;
   $311 = (($310) + 56|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = $0;
   $314 = (($313) + 5824|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = (($312) + ($315)|0);
   $317 = $init;
   _memset(($316|0),0,($317|0))|0;
   $318 = $init;
   $319 = $0;
   $320 = (($319) + 5824|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = (($321) + ($318))|0;
   HEAP32[$320>>2] = $322;
  }
 }
 STACKTOP = sp;return;
}
function _putShortMSB($s,$b) {
 $s = $s|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $b;
 $2 = $1;
 $3 = $2 >>> 8;
 $4 = $3&255;
 $5 = $0;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($7)|0);
 HEAP8[$12>>0] = $4;
 $13 = $1;
 $14 = $13 & 255;
 $15 = $14&255;
 $16 = $0;
 $17 = (($16) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[$17>>2] = $19;
 $20 = $0;
 $21 = (($20) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($18)|0);
 HEAP8[$23>>0] = $15;
 STACKTOP = sp;return;
}
function _flush_pending($strm) {
 $strm = $strm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0;
 var $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $strm;
 $1 = $0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $s = $3;
 $4 = $s;
 __tr_flush_bits($4);
 $5 = $s;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $len = $7;
 $8 = $len;
 $9 = $0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)>($11>>>0);
 if ($12) {
  $13 = $0;
  $14 = (($13) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $len = $15;
 }
 $16 = $len;
 $17 = ($16|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = $0;
 $19 = (($18) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $s;
 $22 = (($21) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $len;
 _memcpy(($20|0),($23|0),($24|0))|0;
 $25 = $len;
 $26 = $0;
 $27 = (($26) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25)|0);
 HEAP32[$27>>2] = $29;
 $30 = $len;
 $31 = $s;
 $32 = (($31) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($30)|0);
 HEAP32[$32>>2] = $34;
 $35 = $len;
 $36 = $0;
 $37 = (($36) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($35))|0;
 HEAP32[$37>>2] = $39;
 $40 = $len;
 $41 = $0;
 $42 = (($41) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) - ($40))|0;
 HEAP32[$42>>2] = $44;
 $45 = $len;
 $46 = $s;
 $47 = (($46) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) - ($45))|0;
 HEAP32[$47>>2] = $49;
 $50 = $s;
 $51 = (($50) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 $54 = $s;
 $55 = (($54) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $s;
 $58 = (($57) + 16|0);
 HEAP32[$58>>2] = $56;
 STACKTOP = sp;return;
}
function _deflate_huff($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bflush = 0, $cc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $flush;
 while(1) {
  $3 = $1;
  $4 = (($3) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = $1;
   _fill_window($7);
   $8 = $1;
   $9 = (($8) + 116|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    break;
   }
  }
  $14 = $1;
  $15 = (($14) + 96|0);
  HEAP32[$15>>2] = 0;
  $16 = $1;
  $17 = (($16) + 108|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $1;
  $20 = (($19) + 56|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18)|0);
  $23 = HEAP8[$22>>0]|0;
  $cc = $23;
  $24 = $1;
  $25 = (($24) + 5792|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = (($27) + 5796|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<1)|0);
  HEAP16[$30>>1] = 0;
  $31 = $cc;
  $32 = $1;
  $33 = (($32) + 5792|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$33>>2] = $35;
  $36 = $1;
  $37 = (($36) + 5784|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($34)|0);
  HEAP8[$39>>0] = $31;
  $40 = $cc;
  $41 = $40&255;
  $42 = $1;
  $43 = (($42) + 148|0);
  $44 = (($43) + ($41<<2)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = (($45) + 1)<<16>>16;
  HEAP16[$44>>1] = $46;
  $47 = $1;
  $48 = (($47) + 5792|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $1;
  $51 = (($50) + 5788|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) - 1)|0;
  $54 = ($49|0)==($53|0);
  $55 = $54&1;
  $bflush = $55;
  $56 = $1;
  $57 = (($56) + 116|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + -1)|0;
  HEAP32[$57>>2] = $59;
  $60 = $1;
  $61 = (($60) + 108|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$61>>2] = $63;
  $64 = $bflush;
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = $1;
   $67 = $1;
   $68 = (($67) + 92|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)>=(0);
   if ($70) {
    $71 = $1;
    $72 = (($71) + 92|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $1;
    $75 = (($74) + 56|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + ($73)|0);
    $85 = $77;
   } else {
    $85 = 0;
   }
   $78 = $1;
   $79 = (($78) + 108|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $1;
   $82 = (($81) + 92|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($80) - ($83))|0;
   __tr_flush_block($66,$85,$84,0);
   $86 = $1;
   $87 = (($86) + 108|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $1;
   $90 = (($89) + 92|0);
   HEAP32[$90>>2] = $88;
   $91 = $1;
   $92 = HEAP32[$91>>2]|0;
   _flush_pending($92);
   $93 = $1;
   $94 = HEAP32[$93>>2]|0;
   $95 = (($94) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)==(0);
   if ($97) {
    label = 13;
    break;
   }
  }
 }
 if ((label|0) == 13) {
  $0 = 0;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 $12 = $2;
 $13 = ($12|0)==(0);
 if ($13) {
  $0 = 0;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 $98 = $1;
 $99 = (($98) + 5812|0);
 HEAP32[$99>>2] = 0;
 $100 = $2;
 $101 = ($100|0)==(4);
 if ($101) {
  $102 = $1;
  $103 = $1;
  $104 = (($103) + 92|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)>=(0);
  if ($106) {
   $107 = $1;
   $108 = (($107) + 92|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $1;
   $111 = (($110) + 56|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($112) + ($109)|0);
   $121 = $113;
  } else {
   $121 = 0;
  }
  $114 = $1;
  $115 = (($114) + 108|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $1;
  $118 = (($117) + 92|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($116) - ($119))|0;
  __tr_flush_block($102,$121,$120,1);
  $122 = $1;
  $123 = (($122) + 108|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $1;
  $126 = (($125) + 92|0);
  HEAP32[$126>>2] = $124;
  $127 = $1;
  $128 = HEAP32[$127>>2]|0;
  _flush_pending($128);
  $129 = $1;
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + 16|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($132|0)==(0);
  if ($133) {
   $0 = 2;
   $170 = $0;
   STACKTOP = sp;return ($170|0);
  } else {
   $0 = 3;
   $170 = $0;
   STACKTOP = sp;return ($170|0);
  }
 }
 $134 = $1;
 $135 = (($134) + 5792|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)!=(0);
 do {
  if ($137) {
   $138 = $1;
   $139 = $1;
   $140 = (($139) + 92|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($141|0)>=(0);
   if ($142) {
    $143 = $1;
    $144 = (($143) + 92|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = $1;
    $147 = (($146) + 56|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (($148) + ($145)|0);
    $157 = $149;
   } else {
    $157 = 0;
   }
   $150 = $1;
   $151 = (($150) + 108|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $1;
   $154 = (($153) + 92|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($152) - ($155))|0;
   __tr_flush_block($138,$157,$156,0);
   $158 = $1;
   $159 = (($158) + 108|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $1;
   $162 = (($161) + 92|0);
   HEAP32[$162>>2] = $160;
   $163 = $1;
   $164 = HEAP32[$163>>2]|0;
   _flush_pending($164);
   $165 = $1;
   $166 = HEAP32[$165>>2]|0;
   $167 = (($166) + 16|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ($168|0)==(0);
   if (!($169)) {
    break;
   }
   $0 = 0;
   $170 = $0;
   STACKTOP = sp;return ($170|0);
  }
 } while(0);
 $0 = 1;
 $170 = $0;
 STACKTOP = sp;return ($170|0);
}
function _deflate_rle($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bflush = 0, $cc = 0;
 var $dist = 0, $len = 0, $prev = 0, $scan = 0, $strend = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $flush;
 while(1) {
  $3 = $1;
  $4 = (($3) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5>>>0)<=(258);
  if ($6) {
   $7 = $1;
   _fill_window($7);
   $8 = $1;
   $9 = (($8) + 116|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<=(258);
   if ($11) {
    $12 = $2;
    $13 = ($12|0)==(0);
    if ($13) {
     label = 5;
     break;
    }
   }
   $14 = $1;
   $15 = (($14) + 116|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    label = 7;
    break;
   }
  }
  $18 = $1;
  $19 = (($18) + 96|0);
  HEAP32[$19>>2] = 0;
  $20 = $1;
  $21 = (($20) + 116|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22>>>0)>=(3);
  if ($23) {
   $24 = $1;
   $25 = (($24) + 108|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26>>>0)>(0);
   if ($27) {
    $28 = $1;
    $29 = (($28) + 56|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $1;
    $32 = (($31) + 108|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($30) + ($33)|0);
    $35 = (($34) + -1|0);
    $scan = $35;
    $36 = $scan;
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $prev = $38;
    $39 = $prev;
    $40 = $scan;
    $41 = (($40) + 1|0);
    $scan = $41;
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = ($39|0)==($43|0);
    if ($44) {
     $45 = $prev;
     $46 = $scan;
     $47 = (($46) + 1|0);
     $scan = $47;
     $48 = HEAP8[$47>>0]|0;
     $49 = $48&255;
     $50 = ($45|0)==($49|0);
     if ($50) {
      $51 = $prev;
      $52 = $scan;
      $53 = (($52) + 1|0);
      $scan = $53;
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = ($51|0)==($55|0);
      if ($56) {
       $57 = $1;
       $58 = (($57) + 56|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = $1;
       $61 = (($60) + 108|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($59) + ($62)|0);
       $64 = (($63) + 258|0);
       $strend = $64;
       while(1) {
        $65 = $prev;
        $66 = $scan;
        $67 = (($66) + 1|0);
        $scan = $67;
        $68 = HEAP8[$67>>0]|0;
        $69 = $68&255;
        $70 = ($65|0)==($69|0);
        if ($70) {
         $71 = $prev;
         $72 = $scan;
         $73 = (($72) + 1|0);
         $scan = $73;
         $74 = HEAP8[$73>>0]|0;
         $75 = $74&255;
         $76 = ($71|0)==($75|0);
         if ($76) {
          $77 = $prev;
          $78 = $scan;
          $79 = (($78) + 1|0);
          $scan = $79;
          $80 = HEAP8[$79>>0]|0;
          $81 = $80&255;
          $82 = ($77|0)==($81|0);
          if ($82) {
           $83 = $prev;
           $84 = $scan;
           $85 = (($84) + 1|0);
           $scan = $85;
           $86 = HEAP8[$85>>0]|0;
           $87 = $86&255;
           $88 = ($83|0)==($87|0);
           if ($88) {
            $89 = $prev;
            $90 = $scan;
            $91 = (($90) + 1|0);
            $scan = $91;
            $92 = HEAP8[$91>>0]|0;
            $93 = $92&255;
            $94 = ($89|0)==($93|0);
            if ($94) {
             $95 = $prev;
             $96 = $scan;
             $97 = (($96) + 1|0);
             $scan = $97;
             $98 = HEAP8[$97>>0]|0;
             $99 = $98&255;
             $100 = ($95|0)==($99|0);
             if ($100) {
              $101 = $prev;
              $102 = $scan;
              $103 = (($102) + 1|0);
              $scan = $103;
              $104 = HEAP8[$103>>0]|0;
              $105 = $104&255;
              $106 = ($101|0)==($105|0);
              if ($106) {
               $107 = $prev;
               $108 = $scan;
               $109 = (($108) + 1|0);
               $scan = $109;
               $110 = HEAP8[$109>>0]|0;
               $111 = $110&255;
               $112 = ($107|0)==($111|0);
               if ($112) {
                $113 = $scan;
                $114 = $strend;
                $115 = ($113>>>0)<($114>>>0);
                $377 = $115;
               } else {
                $377 = 0;
               }
              } else {
               $377 = 0;
              }
             } else {
              $377 = 0;
             }
            } else {
             $377 = 0;
            }
           } else {
            $377 = 0;
           }
          } else {
           $377 = 0;
          }
         } else {
          $377 = 0;
         }
        } else {
         $377 = 0;
        }
        if (!($377)) {
         break;
        }
       }
       $116 = $strend;
       $117 = $scan;
       $118 = $116;
       $119 = $117;
       $120 = (($118) - ($119))|0;
       $121 = (258 - ($120))|0;
       $122 = $1;
       $123 = (($122) + 96|0);
       HEAP32[$123>>2] = $121;
       $124 = $1;
       $125 = (($124) + 96|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = $1;
       $128 = (($127) + 116|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = ($126>>>0)>($129>>>0);
       if ($130) {
        $131 = $1;
        $132 = (($131) + 116|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = $1;
        $135 = (($134) + 96|0);
        HEAP32[$135>>2] = $133;
       }
      }
     }
    }
   }
  }
  $136 = $1;
  $137 = (($136) + 96|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138>>>0)>=(3);
  if ($139) {
   $140 = $1;
   $141 = (($140) + 96|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) - 3)|0;
   $144 = $143&255;
   $len = $144;
   $dist = 1;
   $145 = $dist;
   $146 = $1;
   $147 = (($146) + 5792|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $1;
   $150 = (($149) + 5796|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (($151) + ($148<<1)|0);
   HEAP16[$152>>1] = $145;
   $153 = $len;
   $154 = $1;
   $155 = (($154) + 5792|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($156) + 1)|0;
   HEAP32[$155>>2] = $157;
   $158 = $1;
   $159 = (($158) + 5784|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($160) + ($156)|0);
   HEAP8[$161>>0] = $153;
   $162 = $dist;
   $163 = (($162) + -1)<<16>>16;
   $dist = $163;
   $164 = $len;
   $165 = $164&255;
   $166 = (20088 + ($165)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = (($168) + 256)|0;
   $170 = (($169) + 1)|0;
   $171 = $1;
   $172 = (($171) + 148|0);
   $173 = (($172) + ($170<<2)|0);
   $174 = HEAP16[$173>>1]|0;
   $175 = (($174) + 1)<<16>>16;
   HEAP16[$173>>1] = $175;
   $176 = $dist;
   $177 = $176&65535;
   $178 = ($177|0)<(256);
   if ($178) {
    $179 = $dist;
    $180 = $179&65535;
    $181 = (19576 + ($180)|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $182&255;
    $194 = $183;
   } else {
    $184 = $dist;
    $185 = $184&65535;
    $186 = $185 >> 7;
    $187 = (256 + ($186))|0;
    $188 = (19576 + ($187)|0);
    $189 = HEAP8[$188>>0]|0;
    $190 = $189&255;
    $194 = $190;
   }
   $191 = $1;
   $192 = (($191) + 2440|0);
   $193 = (($192) + ($194<<2)|0);
   $195 = HEAP16[$193>>1]|0;
   $196 = (($195) + 1)<<16>>16;
   HEAP16[$193>>1] = $196;
   $197 = $1;
   $198 = (($197) + 5792|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $1;
   $201 = (($200) + 5788|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (($202) - 1)|0;
   $204 = ($199|0)==($203|0);
   $205 = $204&1;
   $bflush = $205;
   $206 = $1;
   $207 = (($206) + 96|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $1;
   $210 = (($209) + 116|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = (($211) - ($208))|0;
   HEAP32[$210>>2] = $212;
   $213 = $1;
   $214 = (($213) + 96|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $1;
   $217 = (($216) + 108|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = (($218) + ($215))|0;
   HEAP32[$217>>2] = $219;
   $220 = $1;
   $221 = (($220) + 96|0);
   HEAP32[$221>>2] = 0;
  } else {
   $222 = $1;
   $223 = (($222) + 108|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = $1;
   $226 = (($225) + 56|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = (($227) + ($224)|0);
   $229 = HEAP8[$228>>0]|0;
   $cc = $229;
   $230 = $1;
   $231 = (($230) + 5792|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $1;
   $234 = (($233) + 5796|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = (($235) + ($232<<1)|0);
   HEAP16[$236>>1] = 0;
   $237 = $cc;
   $238 = $1;
   $239 = (($238) + 5792|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = (($240) + 1)|0;
   HEAP32[$239>>2] = $241;
   $242 = $1;
   $243 = (($242) + 5784|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = (($244) + ($240)|0);
   HEAP8[$245>>0] = $237;
   $246 = $cc;
   $247 = $246&255;
   $248 = $1;
   $249 = (($248) + 148|0);
   $250 = (($249) + ($247<<2)|0);
   $251 = HEAP16[$250>>1]|0;
   $252 = (($251) + 1)<<16>>16;
   HEAP16[$250>>1] = $252;
   $253 = $1;
   $254 = (($253) + 5792|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = $1;
   $257 = (($256) + 5788|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = (($258) - 1)|0;
   $260 = ($255|0)==($259|0);
   $261 = $260&1;
   $bflush = $261;
   $262 = $1;
   $263 = (($262) + 116|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = (($264) + -1)|0;
   HEAP32[$263>>2] = $265;
   $266 = $1;
   $267 = (($266) + 108|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = (($268) + 1)|0;
   HEAP32[$267>>2] = $269;
  }
  $270 = $bflush;
  $271 = ($270|0)!=(0);
  if ($271) {
   $272 = $1;
   $273 = $1;
   $274 = (($273) + 92|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = ($275|0)>=(0);
   if ($276) {
    $277 = $1;
    $278 = (($277) + 92|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = $1;
    $281 = (($280) + 56|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = (($282) + ($279)|0);
    $291 = $283;
   } else {
    $291 = 0;
   }
   $284 = $1;
   $285 = (($284) + 108|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $1;
   $288 = (($287) + 92|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = (($286) - ($289))|0;
   __tr_flush_block($272,$291,$290,0);
   $292 = $1;
   $293 = (($292) + 108|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = $1;
   $296 = (($295) + 92|0);
   HEAP32[$296>>2] = $294;
   $297 = $1;
   $298 = HEAP32[$297>>2]|0;
   _flush_pending($298);
   $299 = $1;
   $300 = HEAP32[$299>>2]|0;
   $301 = (($300) + 16|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = ($302|0)==(0);
   if ($303) {
    label = 41;
    break;
   }
  }
 }
 if ((label|0) == 5) {
  $0 = 0;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 else if ((label|0) == 7) {
  $304 = $1;
  $305 = (($304) + 5812|0);
  HEAP32[$305>>2] = 0;
  $306 = $2;
  $307 = ($306|0)==(4);
  if ($307) {
   $308 = $1;
   $309 = $1;
   $310 = (($309) + 92|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = ($311|0)>=(0);
   if ($312) {
    $313 = $1;
    $314 = (($313) + 92|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = $1;
    $317 = (($316) + 56|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = (($318) + ($315)|0);
    $327 = $319;
   } else {
    $327 = 0;
   }
   $320 = $1;
   $321 = (($320) + 108|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = $1;
   $324 = (($323) + 92|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (($322) - ($325))|0;
   __tr_flush_block($308,$327,$326,1);
   $328 = $1;
   $329 = (($328) + 108|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $1;
   $332 = (($331) + 92|0);
   HEAP32[$332>>2] = $330;
   $333 = $1;
   $334 = HEAP32[$333>>2]|0;
   _flush_pending($334);
   $335 = $1;
   $336 = HEAP32[$335>>2]|0;
   $337 = (($336) + 16|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = ($338|0)==(0);
   if ($339) {
    $0 = 2;
    $376 = $0;
    STACKTOP = sp;return ($376|0);
   } else {
    $0 = 3;
    $376 = $0;
    STACKTOP = sp;return ($376|0);
   }
  }
  $340 = $1;
  $341 = (($340) + 5792|0);
  $342 = HEAP32[$341>>2]|0;
  $343 = ($342|0)!=(0);
  do {
   if ($343) {
    $344 = $1;
    $345 = $1;
    $346 = (($345) + 92|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = ($347|0)>=(0);
    if ($348) {
     $349 = $1;
     $350 = (($349) + 92|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = $1;
     $353 = (($352) + 56|0);
     $354 = HEAP32[$353>>2]|0;
     $355 = (($354) + ($351)|0);
     $363 = $355;
    } else {
     $363 = 0;
    }
    $356 = $1;
    $357 = (($356) + 108|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = $1;
    $360 = (($359) + 92|0);
    $361 = HEAP32[$360>>2]|0;
    $362 = (($358) - ($361))|0;
    __tr_flush_block($344,$363,$362,0);
    $364 = $1;
    $365 = (($364) + 108|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = $1;
    $368 = (($367) + 92|0);
    HEAP32[$368>>2] = $366;
    $369 = $1;
    $370 = HEAP32[$369>>2]|0;
    _flush_pending($370);
    $371 = $1;
    $372 = HEAP32[$371>>2]|0;
    $373 = (($372) + 16|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = ($374|0)==(0);
    if (!($375)) {
     break;
    }
    $0 = 0;
    $376 = $0;
    STACKTOP = sp;return ($376|0);
   }
  } while(0);
  $0 = 1;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 else if ((label|0) == 41) {
  $0 = 0;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 return (0)|0;
}
function _deflate_stored($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $max_block_size = 0, $max_start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $flush;
 $max_block_size = 65535;
 $3 = $max_block_size;
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - 5)|0;
 $8 = ($3>>>0)>($7>>>0);
 if ($8) {
  $9 = $1;
  $10 = (($9) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) - 5)|0;
  $max_block_size = $12;
 }
 while(1) {
  $13 = $1;
  $14 = (($13) + 116|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15>>>0)<=(1);
  if ($16) {
   $17 = $1;
   _fill_window($17);
   $18 = $1;
   $19 = (($18) + 116|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0);
   if ($21) {
    $22 = $2;
    $23 = ($22|0)==(0);
    if ($23) {
     label = 7;
     break;
    }
   }
   $24 = $1;
   $25 = (($24) + 116|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    label = 9;
    break;
   }
  }
  $28 = $1;
  $29 = (($28) + 116|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $1;
  $32 = (($31) + 108|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30))|0;
  HEAP32[$32>>2] = $34;
  $35 = $1;
  $36 = (($35) + 116|0);
  HEAP32[$36>>2] = 0;
  $37 = $1;
  $38 = (($37) + 92|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $max_block_size;
  $41 = (($39) + ($40))|0;
  $max_start = $41;
  $42 = $1;
  $43 = (($42) + 108|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0);
  if ($45) {
   label = 13;
  } else {
   $46 = $1;
   $47 = (($46) + 108|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $max_start;
   $50 = ($48>>>0)>=($49>>>0);
   if ($50) {
    label = 13;
   }
  }
  if ((label|0) == 13) {
   label = 0;
   $51 = $1;
   $52 = (($51) + 108|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $max_start;
   $55 = (($53) - ($54))|0;
   $56 = $1;
   $57 = (($56) + 116|0);
   HEAP32[$57>>2] = $55;
   $58 = $max_start;
   $59 = $1;
   $60 = (($59) + 108|0);
   HEAP32[$60>>2] = $58;
   $61 = $1;
   $62 = $1;
   $63 = (($62) + 92|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)>=(0);
   if ($65) {
    $66 = $1;
    $67 = (($66) + 92|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $1;
    $70 = (($69) + 56|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($68)|0);
    $80 = $72;
   } else {
    $80 = 0;
   }
   $73 = $1;
   $74 = (($73) + 108|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $1;
   $77 = (($76) + 92|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($75) - ($78))|0;
   __tr_flush_block($61,$80,$79,0);
   $81 = $1;
   $82 = (($81) + 108|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $1;
   $85 = (($84) + 92|0);
   HEAP32[$85>>2] = $83;
   $86 = $1;
   $87 = HEAP32[$86>>2]|0;
   _flush_pending($87);
   $88 = $1;
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + 16|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ($91|0)==(0);
   if ($92) {
    label = 17;
    break;
   }
  }
  $93 = $1;
  $94 = (($93) + 108|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $1;
  $97 = (($96) + 92|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($95) - ($98))|0;
  $100 = $1;
  $101 = (($100) + 44|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) - 262)|0;
  $104 = ($99>>>0)>=($103>>>0);
  if ($104) {
   $105 = $1;
   $106 = $1;
   $107 = (($106) + 92|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ($108|0)>=(0);
   if ($109) {
    $110 = $1;
    $111 = (($110) + 92|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $1;
    $114 = (($113) + 56|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($115) + ($112)|0);
    $124 = $116;
   } else {
    $124 = 0;
   }
   $117 = $1;
   $118 = (($117) + 108|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $1;
   $121 = (($120) + 92|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($119) - ($122))|0;
   __tr_flush_block($105,$124,$123,0);
   $125 = $1;
   $126 = (($125) + 108|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $1;
   $129 = (($128) + 92|0);
   HEAP32[$129>>2] = $127;
   $130 = $1;
   $131 = HEAP32[$130>>2]|0;
   _flush_pending($131);
   $132 = $1;
   $133 = HEAP32[$132>>2]|0;
   $134 = (($133) + 16|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($135|0)==(0);
   if ($136) {
    label = 24;
    break;
   }
  }
 }
 if ((label|0) == 7) {
  $0 = 0;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 else if ((label|0) == 9) {
  $137 = $1;
  $138 = (($137) + 5812|0);
  HEAP32[$138>>2] = 0;
  $139 = $2;
  $140 = ($139|0)==(4);
  if ($140) {
   $141 = $1;
   $142 = $1;
   $143 = (($142) + 92|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($144|0)>=(0);
   if ($145) {
    $146 = $1;
    $147 = (($146) + 92|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $1;
    $150 = (($149) + 56|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (($151) + ($148)|0);
    $160 = $152;
   } else {
    $160 = 0;
   }
   $153 = $1;
   $154 = (($153) + 108|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $1;
   $157 = (($156) + 92|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (($155) - ($158))|0;
   __tr_flush_block($141,$160,$159,1);
   $161 = $1;
   $162 = (($161) + 108|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $1;
   $165 = (($164) + 92|0);
   HEAP32[$165>>2] = $163;
   $166 = $1;
   $167 = HEAP32[$166>>2]|0;
   _flush_pending($167);
   $168 = $1;
   $169 = HEAP32[$168>>2]|0;
   $170 = (($169) + 16|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($171|0)==(0);
   if ($172) {
    $0 = 2;
    $212 = $0;
    STACKTOP = sp;return ($212|0);
   } else {
    $0 = 3;
    $212 = $0;
    STACKTOP = sp;return ($212|0);
   }
  }
  $173 = $1;
  $174 = (($173) + 108|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $1;
  $177 = (($176) + 92|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = ($175|0)>($178|0);
  do {
   if ($179) {
    $180 = $1;
    $181 = $1;
    $182 = (($181) + 92|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ($183|0)>=(0);
    if ($184) {
     $185 = $1;
     $186 = (($185) + 92|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = $1;
     $189 = (($188) + 56|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = (($190) + ($187)|0);
     $199 = $191;
    } else {
     $199 = 0;
    }
    $192 = $1;
    $193 = (($192) + 108|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = $1;
    $196 = (($195) + 92|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (($194) - ($197))|0;
    __tr_flush_block($180,$199,$198,0);
    $200 = $1;
    $201 = (($200) + 108|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = $1;
    $204 = (($203) + 92|0);
    HEAP32[$204>>2] = $202;
    $205 = $1;
    $206 = HEAP32[$205>>2]|0;
    _flush_pending($206);
    $207 = $1;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + 16|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = ($210|0)==(0);
    if (!($211)) {
     break;
    }
    $0 = 0;
    $212 = $0;
    STACKTOP = sp;return ($212|0);
   }
  } while(0);
  $0 = 1;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 else if ((label|0) == 17) {
  $0 = 0;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 else if ((label|0) == 24) {
  $0 = 0;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 return (0)|0;
}
function _deflate_fast($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bflush = 0, $cc = 0, $dist = 0, $hash_head = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $flush;
 while(1) {
  $3 = $1;
  $4 = (($3) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5>>>0)<(262);
  if ($6) {
   $7 = $1;
   _fill_window($7);
   $8 = $1;
   $9 = (($8) + 116|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<(262);
   if ($11) {
    $12 = $2;
    $13 = ($12|0)==(0);
    if ($13) {
     label = 5;
     break;
    }
   }
   $14 = $1;
   $15 = (($14) + 116|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    label = 7;
    break;
   }
  }
  $hash_head = 0;
  $18 = $1;
  $19 = (($18) + 116|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20>>>0)>=(3);
  if ($21) {
   $22 = $1;
   $23 = (($22) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $1;
   $26 = (($25) + 88|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $24 << $27;
   $29 = $1;
   $30 = (($29) + 108|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 2)|0;
   $33 = $1;
   $34 = (($33) + 56|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($32)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = $28 ^ $38;
   $40 = $1;
   $41 = (($40) + 84|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $39 & $42;
   $44 = $1;
   $45 = (($44) + 72|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (($46) + 72|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $1;
   $50 = (($49) + 68|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($48<<1)|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $1;
   $55 = (($54) + 108|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 52|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $56 & $59;
   $61 = $1;
   $62 = (($61) + 64|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60<<1)|0);
   HEAP16[$64>>1] = $53;
   $65 = $53&65535;
   $hash_head = $65;
   $66 = $1;
   $67 = (($66) + 108|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68&65535;
   $70 = $1;
   $71 = (($70) + 72|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $1;
   $74 = (($73) + 68|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + ($72<<1)|0);
   HEAP16[$76>>1] = $69;
  }
  $77 = $hash_head;
  $78 = ($77|0)!=(0);
  if ($78) {
   $79 = $1;
   $80 = (($79) + 108|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $hash_head;
   $83 = (($81) - ($82))|0;
   $84 = $1;
   $85 = (($84) + 44|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) - 262)|0;
   $88 = ($83>>>0)<=($87>>>0);
   if ($88) {
    $89 = $1;
    $90 = $hash_head;
    $91 = (_longest_match($89,$90)|0);
    $92 = $1;
    $93 = (($92) + 96|0);
    HEAP32[$93>>2] = $91;
   }
  }
  $94 = $1;
  $95 = (($94) + 96|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($96>>>0)>=(3);
  if ($97) {
   $98 = $1;
   $99 = (($98) + 96|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($100) - 3)|0;
   $102 = $101&255;
   $len = $102;
   $103 = $1;
   $104 = (($103) + 108|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $1;
   $107 = (($106) + 112|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($105) - ($108))|0;
   $110 = $109&65535;
   $dist = $110;
   $111 = $dist;
   $112 = $1;
   $113 = (($112) + 5792|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $1;
   $116 = (($115) + 5796|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + ($114<<1)|0);
   HEAP16[$118>>1] = $111;
   $119 = $len;
   $120 = $1;
   $121 = (($120) + 5792|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($122) + 1)|0;
   HEAP32[$121>>2] = $123;
   $124 = $1;
   $125 = (($124) + 5784|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($126) + ($122)|0);
   HEAP8[$127>>0] = $119;
   $128 = $dist;
   $129 = (($128) + -1)<<16>>16;
   $dist = $129;
   $130 = $len;
   $131 = $130&255;
   $132 = (20088 + ($131)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) + 256)|0;
   $136 = (($135) + 1)|0;
   $137 = $1;
   $138 = (($137) + 148|0);
   $139 = (($138) + ($136<<2)|0);
   $140 = HEAP16[$139>>1]|0;
   $141 = (($140) + 1)<<16>>16;
   HEAP16[$139>>1] = $141;
   $142 = $dist;
   $143 = $142&65535;
   $144 = ($143|0)<(256);
   if ($144) {
    $145 = $dist;
    $146 = $145&65535;
    $147 = (19576 + ($146)|0);
    $148 = HEAP8[$147>>0]|0;
    $149 = $148&255;
    $160 = $149;
   } else {
    $150 = $dist;
    $151 = $150&65535;
    $152 = $151 >> 7;
    $153 = (256 + ($152))|0;
    $154 = (19576 + ($153)|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = $155&255;
    $160 = $156;
   }
   $157 = $1;
   $158 = (($157) + 2440|0);
   $159 = (($158) + ($160<<2)|0);
   $161 = HEAP16[$159>>1]|0;
   $162 = (($161) + 1)<<16>>16;
   HEAP16[$159>>1] = $162;
   $163 = $1;
   $164 = (($163) + 5792|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $1;
   $167 = (($166) + 5788|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) - 1)|0;
   $170 = ($165|0)==($169|0);
   $171 = $170&1;
   $bflush = $171;
   $172 = $1;
   $173 = (($172) + 96|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $1;
   $176 = (($175) + 116|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) - ($174))|0;
   HEAP32[$176>>2] = $178;
   $179 = $1;
   $180 = (($179) + 96|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $1;
   $183 = (($182) + 128|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ($181>>>0)<=($184>>>0);
   if ($185) {
    $186 = $1;
    $187 = (($186) + 116|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ($188>>>0)>=(3);
    if ($189) {
     $190 = $1;
     $191 = (($190) + 96|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = (($192) + -1)|0;
     HEAP32[$191>>2] = $193;
     while(1) {
      $194 = $1;
      $195 = (($194) + 108|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = (($196) + 1)|0;
      HEAP32[$195>>2] = $197;
      $198 = $1;
      $199 = (($198) + 72|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = $1;
      $202 = (($201) + 88|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = $200 << $203;
      $205 = $1;
      $206 = (($205) + 108|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = (($207) + 2)|0;
      $209 = $1;
      $210 = (($209) + 56|0);
      $211 = HEAP32[$210>>2]|0;
      $212 = (($211) + ($208)|0);
      $213 = HEAP8[$212>>0]|0;
      $214 = $213&255;
      $215 = $204 ^ $214;
      $216 = $1;
      $217 = (($216) + 84|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $215 & $218;
      $220 = $1;
      $221 = (($220) + 72|0);
      HEAP32[$221>>2] = $219;
      $222 = $1;
      $223 = (($222) + 72|0);
      $224 = HEAP32[$223>>2]|0;
      $225 = $1;
      $226 = (($225) + 68|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = (($227) + ($224<<1)|0);
      $229 = HEAP16[$228>>1]|0;
      $230 = $1;
      $231 = (($230) + 108|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = $1;
      $234 = (($233) + 52|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = $232 & $235;
      $237 = $1;
      $238 = (($237) + 64|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = (($239) + ($236<<1)|0);
      HEAP16[$240>>1] = $229;
      $241 = $229&65535;
      $hash_head = $241;
      $242 = $1;
      $243 = (($242) + 108|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = $244&65535;
      $246 = $1;
      $247 = (($246) + 72|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = $1;
      $250 = (($249) + 68|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = (($251) + ($248<<1)|0);
      HEAP16[$252>>1] = $245;
      $253 = $1;
      $254 = (($253) + 96|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = (($255) + -1)|0;
      HEAP32[$254>>2] = $256;
      $257 = ($256|0)!=(0);
      if (!($257)) {
       break;
      }
     }
     $258 = $1;
     $259 = (($258) + 108|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = (($260) + 1)|0;
     HEAP32[$259>>2] = $261;
    } else {
     label = 24;
    }
   } else {
    label = 24;
   }
   if ((label|0) == 24) {
    label = 0;
    $262 = $1;
    $263 = (($262) + 96|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = $1;
    $266 = (($265) + 108|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (($267) + ($264))|0;
    HEAP32[$266>>2] = $268;
    $269 = $1;
    $270 = (($269) + 96|0);
    HEAP32[$270>>2] = 0;
    $271 = $1;
    $272 = (($271) + 108|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = $1;
    $275 = (($274) + 56|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = (($276) + ($273)|0);
    $278 = HEAP8[$277>>0]|0;
    $279 = $278&255;
    $280 = $1;
    $281 = (($280) + 72|0);
    HEAP32[$281>>2] = $279;
    $282 = $1;
    $283 = (($282) + 72|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = $1;
    $286 = (($285) + 88|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = $284 << $287;
    $289 = $1;
    $290 = (($289) + 108|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = (($291) + 1)|0;
    $293 = $1;
    $294 = (($293) + 56|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (($295) + ($292)|0);
    $297 = HEAP8[$296>>0]|0;
    $298 = $297&255;
    $299 = $288 ^ $298;
    $300 = $1;
    $301 = (($300) + 84|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = $299 & $302;
    $304 = $1;
    $305 = (($304) + 72|0);
    HEAP32[$305>>2] = $303;
   }
  } else {
   $306 = $1;
   $307 = (($306) + 108|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = $1;
   $310 = (($309) + 56|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = (($311) + ($308)|0);
   $313 = HEAP8[$312>>0]|0;
   $cc = $313;
   $314 = $1;
   $315 = (($314) + 5792|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = $1;
   $318 = (($317) + 5796|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = (($319) + ($316<<1)|0);
   HEAP16[$320>>1] = 0;
   $321 = $cc;
   $322 = $1;
   $323 = (($322) + 5792|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = (($324) + 1)|0;
   HEAP32[$323>>2] = $325;
   $326 = $1;
   $327 = (($326) + 5784|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = (($328) + ($324)|0);
   HEAP8[$329>>0] = $321;
   $330 = $cc;
   $331 = $330&255;
   $332 = $1;
   $333 = (($332) + 148|0);
   $334 = (($333) + ($331<<2)|0);
   $335 = HEAP16[$334>>1]|0;
   $336 = (($335) + 1)<<16>>16;
   HEAP16[$334>>1] = $336;
   $337 = $1;
   $338 = (($337) + 5792|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = $1;
   $341 = (($340) + 5788|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = (($342) - 1)|0;
   $344 = ($339|0)==($343|0);
   $345 = $344&1;
   $bflush = $345;
   $346 = $1;
   $347 = (($346) + 116|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = (($348) + -1)|0;
   HEAP32[$347>>2] = $349;
   $350 = $1;
   $351 = (($350) + 108|0);
   $352 = HEAP32[$351>>2]|0;
   $353 = (($352) + 1)|0;
   HEAP32[$351>>2] = $353;
  }
  $354 = $bflush;
  $355 = ($354|0)!=(0);
  if ($355) {
   $356 = $1;
   $357 = $1;
   $358 = (($357) + 92|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = ($359|0)>=(0);
   if ($360) {
    $361 = $1;
    $362 = (($361) + 92|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = $1;
    $365 = (($364) + 56|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = (($366) + ($363)|0);
    $375 = $367;
   } else {
    $375 = 0;
   }
   $368 = $1;
   $369 = (($368) + 108|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = $1;
   $372 = (($371) + 92|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = (($370) - ($373))|0;
   __tr_flush_block($356,$375,$374,0);
   $376 = $1;
   $377 = (($376) + 108|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = $1;
   $380 = (($379) + 92|0);
   HEAP32[$380>>2] = $378;
   $381 = $1;
   $382 = HEAP32[$381>>2]|0;
   _flush_pending($382);
   $383 = $1;
   $384 = HEAP32[$383>>2]|0;
   $385 = (($384) + 16|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = ($386|0)==(0);
   if ($387) {
    label = 32;
    break;
   }
  }
 }
 if ((label|0) == 5) {
  $0 = 0;
  $468 = $0;
  STACKTOP = sp;return ($468|0);
 }
 else if ((label|0) == 7) {
  $388 = $1;
  $389 = (($388) + 108|0);
  $390 = HEAP32[$389>>2]|0;
  $391 = ($390>>>0)<(2);
  if ($391) {
   $392 = $1;
   $393 = (($392) + 108|0);
   $394 = HEAP32[$393>>2]|0;
   $397 = $394;
  } else {
   $397 = 2;
  }
  $395 = $1;
  $396 = (($395) + 5812|0);
  HEAP32[$396>>2] = $397;
  $398 = $2;
  $399 = ($398|0)==(4);
  if ($399) {
   $400 = $1;
   $401 = $1;
   $402 = (($401) + 92|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = ($403|0)>=(0);
   if ($404) {
    $405 = $1;
    $406 = (($405) + 92|0);
    $407 = HEAP32[$406>>2]|0;
    $408 = $1;
    $409 = (($408) + 56|0);
    $410 = HEAP32[$409>>2]|0;
    $411 = (($410) + ($407)|0);
    $419 = $411;
   } else {
    $419 = 0;
   }
   $412 = $1;
   $413 = (($412) + 108|0);
   $414 = HEAP32[$413>>2]|0;
   $415 = $1;
   $416 = (($415) + 92|0);
   $417 = HEAP32[$416>>2]|0;
   $418 = (($414) - ($417))|0;
   __tr_flush_block($400,$419,$418,1);
   $420 = $1;
   $421 = (($420) + 108|0);
   $422 = HEAP32[$421>>2]|0;
   $423 = $1;
   $424 = (($423) + 92|0);
   HEAP32[$424>>2] = $422;
   $425 = $1;
   $426 = HEAP32[$425>>2]|0;
   _flush_pending($426);
   $427 = $1;
   $428 = HEAP32[$427>>2]|0;
   $429 = (($428) + 16|0);
   $430 = HEAP32[$429>>2]|0;
   $431 = ($430|0)==(0);
   if ($431) {
    $0 = 2;
    $468 = $0;
    STACKTOP = sp;return ($468|0);
   } else {
    $0 = 3;
    $468 = $0;
    STACKTOP = sp;return ($468|0);
   }
  }
  $432 = $1;
  $433 = (($432) + 5792|0);
  $434 = HEAP32[$433>>2]|0;
  $435 = ($434|0)!=(0);
  do {
   if ($435) {
    $436 = $1;
    $437 = $1;
    $438 = (($437) + 92|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = ($439|0)>=(0);
    if ($440) {
     $441 = $1;
     $442 = (($441) + 92|0);
     $443 = HEAP32[$442>>2]|0;
     $444 = $1;
     $445 = (($444) + 56|0);
     $446 = HEAP32[$445>>2]|0;
     $447 = (($446) + ($443)|0);
     $455 = $447;
    } else {
     $455 = 0;
    }
    $448 = $1;
    $449 = (($448) + 108|0);
    $450 = HEAP32[$449>>2]|0;
    $451 = $1;
    $452 = (($451) + 92|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = (($450) - ($453))|0;
    __tr_flush_block($436,$455,$454,0);
    $456 = $1;
    $457 = (($456) + 108|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = $1;
    $460 = (($459) + 92|0);
    HEAP32[$460>>2] = $458;
    $461 = $1;
    $462 = HEAP32[$461>>2]|0;
    _flush_pending($462);
    $463 = $1;
    $464 = HEAP32[$463>>2]|0;
    $465 = (($464) + 16|0);
    $466 = HEAP32[$465>>2]|0;
    $467 = ($466|0)==(0);
    if (!($467)) {
     break;
    }
    $0 = 0;
    $468 = $0;
    STACKTOP = sp;return ($468|0);
   }
  } while(0);
  $0 = 1;
  $468 = $0;
  STACKTOP = sp;return ($468|0);
 }
 else if ((label|0) == 32) {
  $0 = 0;
  $468 = $0;
  STACKTOP = sp;return ($468|0);
 }
 return (0)|0;
}
function _deflate_slow($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bflush = 0, $cc = 0, $cc1 = 0, $dist = 0, $hash_head = 0, $len = 0;
 var $max_insert = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $flush;
 while(1) {
  $3 = $1;
  $4 = (($3) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5>>>0)<(262);
  if ($6) {
   $7 = $1;
   _fill_window($7);
   $8 = $1;
   $9 = (($8) + 116|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<(262);
   if ($11) {
    $12 = $2;
    $13 = ($12|0)==(0);
    if ($13) {
     label = 5;
     break;
    }
   }
   $14 = $1;
   $15 = (($14) + 116|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    label = 7;
    break;
   }
  }
  $hash_head = 0;
  $18 = $1;
  $19 = (($18) + 116|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20>>>0)>=(3);
  if ($21) {
   $22 = $1;
   $23 = (($22) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $1;
   $26 = (($25) + 88|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $24 << $27;
   $29 = $1;
   $30 = (($29) + 108|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 2)|0;
   $33 = $1;
   $34 = (($33) + 56|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($32)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = $28 ^ $38;
   $40 = $1;
   $41 = (($40) + 84|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $39 & $42;
   $44 = $1;
   $45 = (($44) + 72|0);
   HEAP32[$45>>2] = $43;
   $46 = $1;
   $47 = (($46) + 72|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $1;
   $50 = (($49) + 68|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($48<<1)|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $1;
   $55 = (($54) + 108|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 52|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $56 & $59;
   $61 = $1;
   $62 = (($61) + 64|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60<<1)|0);
   HEAP16[$64>>1] = $53;
   $65 = $53&65535;
   $hash_head = $65;
   $66 = $1;
   $67 = (($66) + 108|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68&65535;
   $70 = $1;
   $71 = (($70) + 72|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $1;
   $74 = (($73) + 68|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + ($72<<1)|0);
   HEAP16[$76>>1] = $69;
  }
  $77 = $1;
  $78 = (($77) + 96|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $1;
  $81 = (($80) + 120|0);
  HEAP32[$81>>2] = $79;
  $82 = $1;
  $83 = (($82) + 112|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $1;
  $86 = (($85) + 100|0);
  HEAP32[$86>>2] = $84;
  $87 = $1;
  $88 = (($87) + 96|0);
  HEAP32[$88>>2] = 2;
  $89 = $hash_head;
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = $1;
   $92 = (($91) + 120|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $1;
   $95 = (($94) + 128|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($93>>>0)<($96>>>0);
   if ($97) {
    $98 = $1;
    $99 = (($98) + 108|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $hash_head;
    $102 = (($100) - ($101))|0;
    $103 = $1;
    $104 = (($103) + 44|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) - 262)|0;
    $107 = ($102>>>0)<=($106>>>0);
    if ($107) {
     $108 = $1;
     $109 = $hash_head;
     $110 = (_longest_match($108,$109)|0);
     $111 = $1;
     $112 = (($111) + 96|0);
     HEAP32[$112>>2] = $110;
     $113 = $1;
     $114 = (($113) + 96|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115>>>0)<=(5);
     do {
      if ($116) {
       $117 = $1;
       $118 = (($117) + 136|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(1);
       if (!($120)) {
        $121 = $1;
        $122 = (($121) + 96|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = ($123|0)==(3);
        if (!($124)) {
         break;
        }
        $125 = $1;
        $126 = (($125) + 108|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = $1;
        $129 = (($128) + 112|0);
        $130 = HEAP32[$129>>2]|0;
        $131 = (($127) - ($130))|0;
        $132 = ($131>>>0)>(4096);
        if (!($132)) {
         break;
        }
       }
       $133 = $1;
       $134 = (($133) + 96|0);
       HEAP32[$134>>2] = 2;
      }
     } while(0);
    }
   }
  }
  $135 = $1;
  $136 = (($135) + 120|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ($137>>>0)>=(3);
  if ($138) {
   $139 = $1;
   $140 = (($139) + 96|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $1;
   $143 = (($142) + 120|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($141>>>0)<=($144>>>0);
   if ($145) {
    $146 = $1;
    $147 = (($146) + 108|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $1;
    $150 = (($149) + 116|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (($148) + ($151))|0;
    $153 = (($152) - 3)|0;
    $max_insert = $153;
    $154 = $1;
    $155 = (($154) + 120|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = (($156) - 3)|0;
    $158 = $157&255;
    $len = $158;
    $159 = $1;
    $160 = (($159) + 108|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (($161) - 1)|0;
    $163 = $1;
    $164 = (($163) + 100|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (($162) - ($165))|0;
    $167 = $166&65535;
    $dist = $167;
    $168 = $dist;
    $169 = $1;
    $170 = (($169) + 5792|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $1;
    $173 = (($172) + 5796|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($174) + ($171<<1)|0);
    HEAP16[$175>>1] = $168;
    $176 = $len;
    $177 = $1;
    $178 = (($177) + 5792|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = (($179) + 1)|0;
    HEAP32[$178>>2] = $180;
    $181 = $1;
    $182 = (($181) + 5784|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = (($183) + ($179)|0);
    HEAP8[$184>>0] = $176;
    $185 = $dist;
    $186 = (($185) + -1)<<16>>16;
    $dist = $186;
    $187 = $len;
    $188 = $187&255;
    $189 = (20088 + ($188)|0);
    $190 = HEAP8[$189>>0]|0;
    $191 = $190&255;
    $192 = (($191) + 256)|0;
    $193 = (($192) + 1)|0;
    $194 = $1;
    $195 = (($194) + 148|0);
    $196 = (($195) + ($193<<2)|0);
    $197 = HEAP16[$196>>1]|0;
    $198 = (($197) + 1)<<16>>16;
    HEAP16[$196>>1] = $198;
    $199 = $dist;
    $200 = $199&65535;
    $201 = ($200|0)<(256);
    if ($201) {
     $202 = $dist;
     $203 = $202&65535;
     $204 = (19576 + ($203)|0);
     $205 = HEAP8[$204>>0]|0;
     $206 = $205&255;
     $217 = $206;
    } else {
     $207 = $dist;
     $208 = $207&65535;
     $209 = $208 >> 7;
     $210 = (256 + ($209))|0;
     $211 = (19576 + ($210)|0);
     $212 = HEAP8[$211>>0]|0;
     $213 = $212&255;
     $217 = $213;
    }
    $214 = $1;
    $215 = (($214) + 2440|0);
    $216 = (($215) + ($217<<2)|0);
    $218 = HEAP16[$216>>1]|0;
    $219 = (($218) + 1)<<16>>16;
    HEAP16[$216>>1] = $219;
    $220 = $1;
    $221 = (($220) + 5792|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = $1;
    $224 = (($223) + 5788|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) - 1)|0;
    $227 = ($222|0)==($226|0);
    $228 = $227&1;
    $bflush = $228;
    $229 = $1;
    $230 = (($229) + 120|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = (($231) - 1)|0;
    $233 = $1;
    $234 = (($233) + 116|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = (($235) - ($232))|0;
    HEAP32[$234>>2] = $236;
    $237 = $1;
    $238 = (($237) + 120|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = (($239) - 2)|0;
    HEAP32[$238>>2] = $240;
    while(1) {
     $241 = $1;
     $242 = (($241) + 108|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = (($243) + 1)|0;
     HEAP32[$242>>2] = $244;
     $245 = $max_insert;
     $246 = ($244>>>0)<=($245>>>0);
     if ($246) {
      $247 = $1;
      $248 = (($247) + 72|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = $1;
      $251 = (($250) + 88|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = $249 << $252;
      $254 = $1;
      $255 = (($254) + 108|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = (($256) + 2)|0;
      $258 = $1;
      $259 = (($258) + 56|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = (($260) + ($257)|0);
      $262 = HEAP8[$261>>0]|0;
      $263 = $262&255;
      $264 = $253 ^ $263;
      $265 = $1;
      $266 = (($265) + 84|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = $264 & $267;
      $269 = $1;
      $270 = (($269) + 72|0);
      HEAP32[$270>>2] = $268;
      $271 = $1;
      $272 = (($271) + 72|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = $1;
      $275 = (($274) + 68|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = (($276) + ($273<<1)|0);
      $278 = HEAP16[$277>>1]|0;
      $279 = $1;
      $280 = (($279) + 108|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = $1;
      $283 = (($282) + 52|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = $281 & $284;
      $286 = $1;
      $287 = (($286) + 64|0);
      $288 = HEAP32[$287>>2]|0;
      $289 = (($288) + ($285<<1)|0);
      HEAP16[$289>>1] = $278;
      $290 = $278&65535;
      $hash_head = $290;
      $291 = $1;
      $292 = (($291) + 108|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = $293&65535;
      $295 = $1;
      $296 = (($295) + 72|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = $1;
      $299 = (($298) + 68|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = (($300) + ($297<<1)|0);
      HEAP16[$301>>1] = $294;
     }
     $302 = $1;
     $303 = (($302) + 120|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = (($304) + -1)|0;
     HEAP32[$303>>2] = $305;
     $306 = ($305|0)!=(0);
     if (!($306)) {
      break;
     }
    }
    $307 = $1;
    $308 = (($307) + 104|0);
    HEAP32[$308>>2] = 0;
    $309 = $1;
    $310 = (($309) + 96|0);
    HEAP32[$310>>2] = 2;
    $311 = $1;
    $312 = (($311) + 108|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = (($313) + 1)|0;
    HEAP32[$312>>2] = $314;
    $315 = $bflush;
    $316 = ($315|0)!=(0);
    if ($316) {
     $317 = $1;
     $318 = $1;
     $319 = (($318) + 92|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = ($320|0)>=(0);
     if ($321) {
      $322 = $1;
      $323 = (($322) + 92|0);
      $324 = HEAP32[$323>>2]|0;
      $325 = $1;
      $326 = (($325) + 56|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = (($327) + ($324)|0);
      $336 = $328;
     } else {
      $336 = 0;
     }
     $329 = $1;
     $330 = (($329) + 108|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = $1;
     $333 = (($332) + 92|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = (($331) - ($334))|0;
     __tr_flush_block($317,$336,$335,0);
     $337 = $1;
     $338 = (($337) + 108|0);
     $339 = HEAP32[$338>>2]|0;
     $340 = $1;
     $341 = (($340) + 92|0);
     HEAP32[$341>>2] = $339;
     $342 = $1;
     $343 = HEAP32[$342>>2]|0;
     _flush_pending($343);
     $344 = $1;
     $345 = HEAP32[$344>>2]|0;
     $346 = (($345) + 16|0);
     $347 = HEAP32[$346>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      label = 35;
      break;
     }
    }
   } else {
    label = 38;
   }
  } else {
   label = 38;
  }
  if ((label|0) == 38) {
   label = 0;
   $349 = $1;
   $350 = (($349) + 104|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = ($351|0)!=(0);
   if ($352) {
    $353 = $1;
    $354 = (($353) + 108|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = (($355) - 1)|0;
    $357 = $1;
    $358 = (($357) + 56|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = (($359) + ($356)|0);
    $361 = HEAP8[$360>>0]|0;
    $cc = $361;
    $362 = $1;
    $363 = (($362) + 5792|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = $1;
    $366 = (($365) + 5796|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = (($367) + ($364<<1)|0);
    HEAP16[$368>>1] = 0;
    $369 = $cc;
    $370 = $1;
    $371 = (($370) + 5792|0);
    $372 = HEAP32[$371>>2]|0;
    $373 = (($372) + 1)|0;
    HEAP32[$371>>2] = $373;
    $374 = $1;
    $375 = (($374) + 5784|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = (($376) + ($372)|0);
    HEAP8[$377>>0] = $369;
    $378 = $cc;
    $379 = $378&255;
    $380 = $1;
    $381 = (($380) + 148|0);
    $382 = (($381) + ($379<<2)|0);
    $383 = HEAP16[$382>>1]|0;
    $384 = (($383) + 1)<<16>>16;
    HEAP16[$382>>1] = $384;
    $385 = $1;
    $386 = (($385) + 5792|0);
    $387 = HEAP32[$386>>2]|0;
    $388 = $1;
    $389 = (($388) + 5788|0);
    $390 = HEAP32[$389>>2]|0;
    $391 = (($390) - 1)|0;
    $392 = ($387|0)==($391|0);
    $393 = $392&1;
    $bflush = $393;
    $394 = $bflush;
    $395 = ($394|0)!=(0);
    if ($395) {
     $396 = $1;
     $397 = $1;
     $398 = (($397) + 92|0);
     $399 = HEAP32[$398>>2]|0;
     $400 = ($399|0)>=(0);
     if ($400) {
      $401 = $1;
      $402 = (($401) + 92|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = $1;
      $405 = (($404) + 56|0);
      $406 = HEAP32[$405>>2]|0;
      $407 = (($406) + ($403)|0);
      $415 = $407;
     } else {
      $415 = 0;
     }
     $408 = $1;
     $409 = (($408) + 108|0);
     $410 = HEAP32[$409>>2]|0;
     $411 = $1;
     $412 = (($411) + 92|0);
     $413 = HEAP32[$412>>2]|0;
     $414 = (($410) - ($413))|0;
     __tr_flush_block($396,$415,$414,0);
     $416 = $1;
     $417 = (($416) + 108|0);
     $418 = HEAP32[$417>>2]|0;
     $419 = $1;
     $420 = (($419) + 92|0);
     HEAP32[$420>>2] = $418;
     $421 = $1;
     $422 = HEAP32[$421>>2]|0;
     _flush_pending($422);
    }
    $423 = $1;
    $424 = (($423) + 108|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = (($425) + 1)|0;
    HEAP32[$424>>2] = $426;
    $427 = $1;
    $428 = (($427) + 116|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = (($429) + -1)|0;
    HEAP32[$428>>2] = $430;
    $431 = $1;
    $432 = HEAP32[$431>>2]|0;
    $433 = (($432) + 16|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = ($434|0)==(0);
    if ($435) {
     label = 45;
     break;
    }
   } else {
    $436 = $1;
    $437 = (($436) + 104|0);
    HEAP32[$437>>2] = 1;
    $438 = $1;
    $439 = (($438) + 108|0);
    $440 = HEAP32[$439>>2]|0;
    $441 = (($440) + 1)|0;
    HEAP32[$439>>2] = $441;
    $442 = $1;
    $443 = (($442) + 116|0);
    $444 = HEAP32[$443>>2]|0;
    $445 = (($444) + -1)|0;
    HEAP32[$443>>2] = $445;
   }
  }
 }
 if ((label|0) == 5) {
  $0 = 0;
  $573 = $0;
  STACKTOP = sp;return ($573|0);
 }
 else if ((label|0) == 7) {
  $446 = $1;
  $447 = (($446) + 104|0);
  $448 = HEAP32[$447>>2]|0;
  $449 = ($448|0)!=(0);
  if ($449) {
   $450 = $1;
   $451 = (($450) + 108|0);
   $452 = HEAP32[$451>>2]|0;
   $453 = (($452) - 1)|0;
   $454 = $1;
   $455 = (($454) + 56|0);
   $456 = HEAP32[$455>>2]|0;
   $457 = (($456) + ($453)|0);
   $458 = HEAP8[$457>>0]|0;
   $cc1 = $458;
   $459 = $1;
   $460 = (($459) + 5792|0);
   $461 = HEAP32[$460>>2]|0;
   $462 = $1;
   $463 = (($462) + 5796|0);
   $464 = HEAP32[$463>>2]|0;
   $465 = (($464) + ($461<<1)|0);
   HEAP16[$465>>1] = 0;
   $466 = $cc1;
   $467 = $1;
   $468 = (($467) + 5792|0);
   $469 = HEAP32[$468>>2]|0;
   $470 = (($469) + 1)|0;
   HEAP32[$468>>2] = $470;
   $471 = $1;
   $472 = (($471) + 5784|0);
   $473 = HEAP32[$472>>2]|0;
   $474 = (($473) + ($469)|0);
   HEAP8[$474>>0] = $466;
   $475 = $cc1;
   $476 = $475&255;
   $477 = $1;
   $478 = (($477) + 148|0);
   $479 = (($478) + ($476<<2)|0);
   $480 = HEAP16[$479>>1]|0;
   $481 = (($480) + 1)<<16>>16;
   HEAP16[$479>>1] = $481;
   $482 = $1;
   $483 = (($482) + 5792|0);
   $484 = HEAP32[$483>>2]|0;
   $485 = $1;
   $486 = (($485) + 5788|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = (($487) - 1)|0;
   $489 = ($484|0)==($488|0);
   $490 = $489&1;
   $bflush = $490;
   $491 = $1;
   $492 = (($491) + 104|0);
   HEAP32[$492>>2] = 0;
  }
  $493 = $1;
  $494 = (($493) + 108|0);
  $495 = HEAP32[$494>>2]|0;
  $496 = ($495>>>0)<(2);
  if ($496) {
   $497 = $1;
   $498 = (($497) + 108|0);
   $499 = HEAP32[$498>>2]|0;
   $502 = $499;
  } else {
   $502 = 2;
  }
  $500 = $1;
  $501 = (($500) + 5812|0);
  HEAP32[$501>>2] = $502;
  $503 = $2;
  $504 = ($503|0)==(4);
  if ($504) {
   $505 = $1;
   $506 = $1;
   $507 = (($506) + 92|0);
   $508 = HEAP32[$507>>2]|0;
   $509 = ($508|0)>=(0);
   if ($509) {
    $510 = $1;
    $511 = (($510) + 92|0);
    $512 = HEAP32[$511>>2]|0;
    $513 = $1;
    $514 = (($513) + 56|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = (($515) + ($512)|0);
    $524 = $516;
   } else {
    $524 = 0;
   }
   $517 = $1;
   $518 = (($517) + 108|0);
   $519 = HEAP32[$518>>2]|0;
   $520 = $1;
   $521 = (($520) + 92|0);
   $522 = HEAP32[$521>>2]|0;
   $523 = (($519) - ($522))|0;
   __tr_flush_block($505,$524,$523,1);
   $525 = $1;
   $526 = (($525) + 108|0);
   $527 = HEAP32[$526>>2]|0;
   $528 = $1;
   $529 = (($528) + 92|0);
   HEAP32[$529>>2] = $527;
   $530 = $1;
   $531 = HEAP32[$530>>2]|0;
   _flush_pending($531);
   $532 = $1;
   $533 = HEAP32[$532>>2]|0;
   $534 = (($533) + 16|0);
   $535 = HEAP32[$534>>2]|0;
   $536 = ($535|0)==(0);
   if ($536) {
    $0 = 2;
    $573 = $0;
    STACKTOP = sp;return ($573|0);
   } else {
    $0 = 3;
    $573 = $0;
    STACKTOP = sp;return ($573|0);
   }
  }
  $537 = $1;
  $538 = (($537) + 5792|0);
  $539 = HEAP32[$538>>2]|0;
  $540 = ($539|0)!=(0);
  do {
   if ($540) {
    $541 = $1;
    $542 = $1;
    $543 = (($542) + 92|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = ($544|0)>=(0);
    if ($545) {
     $546 = $1;
     $547 = (($546) + 92|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = $1;
     $550 = (($549) + 56|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = (($551) + ($548)|0);
     $560 = $552;
    } else {
     $560 = 0;
    }
    $553 = $1;
    $554 = (($553) + 108|0);
    $555 = HEAP32[$554>>2]|0;
    $556 = $1;
    $557 = (($556) + 92|0);
    $558 = HEAP32[$557>>2]|0;
    $559 = (($555) - ($558))|0;
    __tr_flush_block($541,$560,$559,0);
    $561 = $1;
    $562 = (($561) + 108|0);
    $563 = HEAP32[$562>>2]|0;
    $564 = $1;
    $565 = (($564) + 92|0);
    HEAP32[$565>>2] = $563;
    $566 = $1;
    $567 = HEAP32[$566>>2]|0;
    _flush_pending($567);
    $568 = $1;
    $569 = HEAP32[$568>>2]|0;
    $570 = (($569) + 16|0);
    $571 = HEAP32[$570>>2]|0;
    $572 = ($571|0)==(0);
    if (!($572)) {
     break;
    }
    $0 = 0;
    $573 = $0;
    STACKTOP = sp;return ($573|0);
   }
  } while(0);
  $0 = 1;
  $573 = $0;
  STACKTOP = sp;return ($573|0);
 }
 else if ((label|0) == 35) {
  $0 = 0;
  $573 = $0;
  STACKTOP = sp;return ($573|0);
 }
 else if ((label|0) == 45) {
  $0 = 0;
  $573 = $0;
  STACKTOP = sp;return ($573|0);
 }
 return (0)|0;
}
function _read_buf($strm,$buf,$size) {
 $strm = $strm|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $buf;
 $3 = $size;
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $len = $6;
 $7 = $len;
 $8 = $3;
 $9 = ($7>>>0)>($8>>>0);
 if ($9) {
  $10 = $3;
  $len = $10;
 }
 $11 = $len;
 $12 = ($11|0)==(0);
 if ($12) {
  $0 = 0;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 $13 = $len;
 $14 = $1;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) - ($13))|0;
 HEAP32[$15>>2] = $17;
 $18 = $2;
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = $len;
 _memcpy(($18|0),($20|0),($21|0))|0;
 $22 = $1;
 $23 = (($22) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(1);
 if ($27) {
  $28 = $1;
  $29 = (($28) + 48|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $2;
  $32 = $len;
  $33 = (_adler32($30,$31,$32)|0);
  $34 = $1;
  $35 = (($34) + 48|0);
  HEAP32[$35>>2] = $33;
 } else {
  $36 = $1;
  $37 = (($36) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 24|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(2);
  if ($41) {
   $42 = $1;
   $43 = (($42) + 48|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $2;
   $46 = $len;
   $47 = (_crc32($44,$45,$46)|0);
   $48 = $1;
   $49 = (($48) + 48|0);
   HEAP32[$49>>2] = $47;
  }
 }
 $50 = $len;
 $51 = $1;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + ($50)|0);
 HEAP32[$51>>2] = $53;
 $54 = $len;
 $55 = $1;
 $56 = (($55) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + ($54))|0;
 HEAP32[$56>>2] = $58;
 $59 = $len;
 $0 = $59;
 $60 = $0;
 STACKTOP = sp;return ($60|0);
}
function _longest_match($s,$cur_match) {
 $s = $s|0;
 $cur_match = $cur_match|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best_len = 0, $chain_length = 0, $len = 0, $limit = 0, $match = 0, $nice_match = 0, $prev = 0, $scan = 0, $scan_end = 0, $scan_end1 = 0, $strend = 0, $wmask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $cur_match;
 $3 = $1;
 $4 = (($3) + 124|0);
 $5 = HEAP32[$4>>2]|0;
 $chain_length = $5;
 $6 = $1;
 $7 = (($6) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8) + ($11)|0);
 $scan = $12;
 $13 = $1;
 $14 = (($13) + 120|0);
 $15 = HEAP32[$14>>2]|0;
 $best_len = $15;
 $16 = $1;
 $17 = (($16) + 144|0);
 $18 = HEAP32[$17>>2]|0;
 $nice_match = $18;
 $19 = $1;
 $20 = (($19) + 108|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = (($22) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) - 262)|0;
 $26 = ($21>>>0)>($25>>>0);
 if ($26) {
  $27 = $1;
  $28 = (($27) + 108|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $1;
  $31 = (($30) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) - 262)|0;
  $34 = (($29) - ($33))|0;
  $35 = $34;
 } else {
  $35 = 0;
 }
 $limit = $35;
 $36 = $1;
 $37 = (($36) + 64|0);
 $38 = HEAP32[$37>>2]|0;
 $prev = $38;
 $39 = $1;
 $40 = (($39) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $wmask = $41;
 $42 = $1;
 $43 = (($42) + 56|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $1;
 $46 = (($45) + 108|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($44) + ($47)|0);
 $49 = (($48) + 258|0);
 $strend = $49;
 $50 = $best_len;
 $51 = (($50) - 1)|0;
 $52 = $scan;
 $53 = (($52) + ($51)|0);
 $54 = HEAP8[$53>>0]|0;
 $scan_end1 = $54;
 $55 = $best_len;
 $56 = $scan;
 $57 = (($56) + ($55)|0);
 $58 = HEAP8[$57>>0]|0;
 $scan_end = $58;
 $59 = $1;
 $60 = (($59) + 120|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $1;
 $63 = (($62) + 140|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($61>>>0)>=($64>>>0);
 if ($65) {
  $66 = $chain_length;
  $67 = $66 >>> 2;
  $chain_length = $67;
 }
 $68 = $nice_match;
 $69 = $1;
 $70 = (($69) + 116|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($68>>>0)>($71>>>0);
 if ($72) {
  $73 = $1;
  $74 = (($73) + 116|0);
  $75 = HEAP32[$74>>2]|0;
  $nice_match = $75;
 }
 while(1) {
  $76 = $1;
  $77 = (($76) + 56|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $2;
  $80 = (($78) + ($79)|0);
  $match = $80;
  $81 = $best_len;
  $82 = $match;
  $83 = (($82) + ($81)|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $scan_end;
  $87 = $86&255;
  $88 = ($85|0)!=($87|0);
  if ($88) {
   label = 13;
  } else {
   $89 = $best_len;
   $90 = (($89) - 1)|0;
   $91 = $match;
   $92 = (($91) + ($90)|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $scan_end1;
   $96 = $95&255;
   $97 = ($94|0)!=($96|0);
   if ($97) {
    label = 13;
   } else {
    $98 = $match;
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = $scan;
    $102 = HEAP8[$101>>0]|0;
    $103 = $102&255;
    $104 = ($100|0)!=($103|0);
    if ($104) {
     label = 13;
    } else {
     $105 = $match;
     $106 = (($105) + 1|0);
     $match = $106;
     $107 = HEAP8[$106>>0]|0;
     $108 = $107&255;
     $109 = $scan;
     $110 = (($109) + 1|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = $111&255;
     $113 = ($108|0)!=($112|0);
     if ($113) {
      label = 13;
     } else {
      $114 = $scan;
      $115 = (($114) + 2|0);
      $scan = $115;
      $116 = $match;
      $117 = (($116) + 1|0);
      $match = $117;
      while(1) {
       $118 = $scan;
       $119 = (($118) + 1|0);
       $scan = $119;
       $120 = HEAP8[$119>>0]|0;
       $121 = $120&255;
       $122 = $match;
       $123 = (($122) + 1|0);
       $match = $123;
       $124 = HEAP8[$123>>0]|0;
       $125 = $124&255;
       $126 = ($121|0)==($125|0);
       if ($126) {
        $127 = $scan;
        $128 = (($127) + 1|0);
        $scan = $128;
        $129 = HEAP8[$128>>0]|0;
        $130 = $129&255;
        $131 = $match;
        $132 = (($131) + 1|0);
        $match = $132;
        $133 = HEAP8[$132>>0]|0;
        $134 = $133&255;
        $135 = ($130|0)==($134|0);
        if ($135) {
         $136 = $scan;
         $137 = (($136) + 1|0);
         $scan = $137;
         $138 = HEAP8[$137>>0]|0;
         $139 = $138&255;
         $140 = $match;
         $141 = (($140) + 1|0);
         $match = $141;
         $142 = HEAP8[$141>>0]|0;
         $143 = $142&255;
         $144 = ($139|0)==($143|0);
         if ($144) {
          $145 = $scan;
          $146 = (($145) + 1|0);
          $scan = $146;
          $147 = HEAP8[$146>>0]|0;
          $148 = $147&255;
          $149 = $match;
          $150 = (($149) + 1|0);
          $match = $150;
          $151 = HEAP8[$150>>0]|0;
          $152 = $151&255;
          $153 = ($148|0)==($152|0);
          if ($153) {
           $154 = $scan;
           $155 = (($154) + 1|0);
           $scan = $155;
           $156 = HEAP8[$155>>0]|0;
           $157 = $156&255;
           $158 = $match;
           $159 = (($158) + 1|0);
           $match = $159;
           $160 = HEAP8[$159>>0]|0;
           $161 = $160&255;
           $162 = ($157|0)==($161|0);
           if ($162) {
            $163 = $scan;
            $164 = (($163) + 1|0);
            $scan = $164;
            $165 = HEAP8[$164>>0]|0;
            $166 = $165&255;
            $167 = $match;
            $168 = (($167) + 1|0);
            $match = $168;
            $169 = HEAP8[$168>>0]|0;
            $170 = $169&255;
            $171 = ($166|0)==($170|0);
            if ($171) {
             $172 = $scan;
             $173 = (($172) + 1|0);
             $scan = $173;
             $174 = HEAP8[$173>>0]|0;
             $175 = $174&255;
             $176 = $match;
             $177 = (($176) + 1|0);
             $match = $177;
             $178 = HEAP8[$177>>0]|0;
             $179 = $178&255;
             $180 = ($175|0)==($179|0);
             if ($180) {
              $181 = $scan;
              $182 = (($181) + 1|0);
              $scan = $182;
              $183 = HEAP8[$182>>0]|0;
              $184 = $183&255;
              $185 = $match;
              $186 = (($185) + 1|0);
              $match = $186;
              $187 = HEAP8[$186>>0]|0;
              $188 = $187&255;
              $189 = ($184|0)==($188|0);
              if ($189) {
               $190 = $scan;
               $191 = $strend;
               $192 = ($190>>>0)<($191>>>0);
               $242 = $192;
              } else {
               $242 = 0;
              }
             } else {
              $242 = 0;
             }
            } else {
             $242 = 0;
            }
           } else {
            $242 = 0;
           }
          } else {
           $242 = 0;
          }
         } else {
          $242 = 0;
         }
        } else {
         $242 = 0;
        }
       } else {
        $242 = 0;
       }
       if (!($242)) {
        break;
       }
      }
      $193 = $strend;
      $194 = $scan;
      $195 = $193;
      $196 = $194;
      $197 = (($195) - ($196))|0;
      $198 = (258 - ($197))|0;
      $len = $198;
      $199 = $strend;
      $200 = (($199) + -258|0);
      $scan = $200;
      $201 = $len;
      $202 = $best_len;
      $203 = ($201|0)>($202|0);
      if ($203) {
       $204 = $2;
       $205 = $1;
       $206 = (($205) + 112|0);
       HEAP32[$206>>2] = $204;
       $207 = $len;
       $best_len = $207;
       $208 = $len;
       $209 = $nice_match;
       $210 = ($208|0)>=($209|0);
       if ($210) {
        label = 28;
        break;
       }
       $211 = $best_len;
       $212 = (($211) - 1)|0;
       $213 = $scan;
       $214 = (($213) + ($212)|0);
       $215 = HEAP8[$214>>0]|0;
       $scan_end1 = $215;
       $216 = $best_len;
       $217 = $scan;
       $218 = (($217) + ($216)|0);
       $219 = HEAP8[$218>>0]|0;
       $scan_end = $219;
      }
     }
    }
   }
  }
  if ((label|0) == 13) {
   label = 0;
  }
  $220 = $2;
  $221 = $wmask;
  $222 = $220 & $221;
  $223 = $prev;
  $224 = (($223) + ($222<<1)|0);
  $225 = HEAP16[$224>>1]|0;
  $226 = $225&65535;
  $2 = $226;
  $227 = $limit;
  $228 = ($226>>>0)>($227>>>0);
  if ($228) {
   $229 = $chain_length;
   $230 = (($229) + -1)|0;
   $chain_length = $230;
   $231 = ($230|0)!=(0);
   $243 = $231;
  } else {
   $243 = 0;
  }
  if (!($243)) {
   break;
  }
 }
 if ((label|0) == 28) {
 }
 $232 = $best_len;
 $233 = $1;
 $234 = (($233) + 116|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = ($232>>>0)<=($235>>>0);
 if ($236) {
  $237 = $best_len;
  $0 = $237;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 } else {
  $238 = $1;
  $239 = (($238) + 116|0);
  $240 = HEAP32[$239>>2]|0;
  $0 = $240;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 return (0)|0;
}
function _gzclose($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = -2;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 $4 = $1;
 $state = $4;
 $5 = $state;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(7247);
 if ($8) {
  $9 = $1;
  $10 = (_gzclose_r($9)|0);
  $13 = $10;
 } else {
  $11 = $1;
  $12 = (_gzclose_w($11)|0);
  $13 = $12;
 }
 $0 = $13;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _gzdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gz = 0, $path = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $fd;
 $2 = $mode;
 $3 = $1;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  $5 = (_malloc(19)|0);
  $path = $5;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = $path;
   $8 = $1;
   HEAP32[$vararg_buffer>>2] = $8;
   (_snprintf($7,19,19416,$vararg_buffer)|0);
   $9 = $path;
   $10 = $1;
   $11 = $2;
   $12 = (_gz_open($9,$10,$11)|0);
   $gz = $12;
   $13 = $path;
   _free($13);
   $14 = $gz;
   $0 = $14;
   $15 = $0;
   STACKTOP = sp;return ($15|0);
  }
 }
 $0 = 0;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _gzrewind($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   $0 = -1;
  } else {
   $4 = $1;
   $state = $4;
   $5 = $state;
   $6 = (($5) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)!=(7247);
   do {
    if (!($8)) {
     $9 = $state;
     $10 = (($9) + 76|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($11|0)!=(0);
     if ($12) {
      $13 = $state;
      $14 = (($13) + 76|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = ($15|0)!=(-5);
      if ($16) {
       break;
      }
     }
     $17 = $state;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = $state;
     $21 = (($20) + 48|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (_lseek(($19|0),($22|0),0)|0);
     $24 = ($23|0)==(-1);
     if ($24) {
      $0 = -1;
      break L1;
     } else {
      $25 = $state;
      _gz_reset($25);
      $0 = 0;
      break L1;
     }
    }
   } while(0);
   $0 = -1;
  }
 } while(0);
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _gzseek64($file,$offset,$whence) {
 $file = $file|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n = 0, $ret = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $offset;
 $3 = $whence;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = -1;
  $148 = $0;
  STACKTOP = sp;return ($148|0);
 }
 $6 = $1;
 $state = $6;
 $7 = $state;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(7247);
 if ($10) {
  $11 = $state;
  $12 = (($11) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(31153);
  if ($14) {
   $0 = -1;
   $148 = $0;
   STACKTOP = sp;return ($148|0);
  }
 }
 $15 = $state;
 $16 = (($15) + 76|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $state;
  $20 = (($19) + 76|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(-5);
  if ($22) {
   $0 = -1;
   $148 = $0;
   STACKTOP = sp;return ($148|0);
  }
 }
 $23 = $3;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $3;
  $26 = ($25|0)!=(1);
  if ($26) {
   $0 = -1;
   $148 = $0;
   STACKTOP = sp;return ($148|0);
  }
 }
 $27 = $3;
 $28 = ($27|0)==(0);
 if ($28) {
  $29 = $state;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $2;
  $33 = (($32) - ($31))|0;
  $2 = $33;
 } else {
  $34 = $state;
  $35 = (($34) + 72|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = $state;
   $39 = (($38) + 68|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $2;
   $42 = (($41) + ($40))|0;
   $2 = $42;
  }
 }
 $43 = $state;
 $44 = (($43) + 72|0);
 HEAP32[$44>>2] = 0;
 $45 = $state;
 $46 = (($45) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(7247);
 if ($48) {
  $49 = $state;
  $50 = (($49) + 44|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(1);
  if ($52) {
   $53 = $state;
   $54 = (($53) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $2;
   $57 = (($55) + ($56))|0;
   $58 = ($57|0)>=(0);
   if ($58) {
    $59 = $state;
    $60 = (($59) + 16|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $2;
    $63 = $state;
    $64 = HEAP32[$63>>2]|0;
    $65 = (($62) - ($64))|0;
    $66 = (_lseek(($61|0),($65|0),1)|0);
    $ret = $66;
    $67 = $ret;
    $68 = ($67|0)==(-1);
    if ($68) {
     $0 = -1;
     $148 = $0;
     STACKTOP = sp;return ($148|0);
    } else {
     $69 = $state;
     HEAP32[$69>>2] = 0;
     $70 = $state;
     $71 = (($70) + 52|0);
     HEAP32[$71>>2] = 0;
     $72 = $state;
     $73 = (($72) + 56|0);
     HEAP32[$73>>2] = 0;
     $74 = $state;
     $75 = (($74) + 72|0);
     HEAP32[$75>>2] = 0;
     $76 = $state;
     _gz_error($76,0,0);
     $77 = $state;
     $78 = (($77) + 84|0);
     $79 = (($78) + 4|0);
     HEAP32[$79>>2] = 0;
     $80 = $2;
     $81 = $state;
     $82 = (($81) + 8|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (($83) + ($80))|0;
     HEAP32[$82>>2] = $84;
     $85 = $state;
     $86 = (($85) + 8|0);
     $87 = HEAP32[$86>>2]|0;
     $0 = $87;
     $148 = $0;
     STACKTOP = sp;return ($148|0);
    }
   }
  }
 }
 $88 = $2;
 $89 = ($88|0)<(0);
 do {
  if ($89) {
   $90 = $state;
   $91 = (($90) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)!=(7247);
   if ($93) {
    $0 = -1;
    $148 = $0;
    STACKTOP = sp;return ($148|0);
   }
   $94 = $state;
   $95 = (($94) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $2;
   $98 = (($97) + ($96))|0;
   $2 = $98;
   $99 = $2;
   $100 = ($99|0)<(0);
   if ($100) {
    $0 = -1;
    $148 = $0;
    STACKTOP = sp;return ($148|0);
   }
   $101 = $1;
   $102 = (_gzrewind($101)|0);
   $103 = ($102|0)==(-1);
   if (!($103)) {
    break;
   }
   $0 = -1;
   $148 = $0;
   STACKTOP = sp;return ($148|0);
  }
 } while(0);
 $104 = $state;
 $105 = (($104) + 12|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)==(7247);
 if ($107) {
  $108 = $state;
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109>>>0)>(2147483647);
  if ($110) {
   label = 34;
  } else {
   $111 = $state;
   $112 = HEAP32[$111>>2]|0;
   $113 = $2;
   $114 = ($112|0)>($113|0);
   if ($114) {
    label = 34;
   } else {
    $116 = $state;
    $117 = HEAP32[$116>>2]|0;
    $118 = $117;
   }
  }
  if ((label|0) == 34) {
   $115 = $2;
   $118 = $115;
  }
  $n = $118;
  $119 = $n;
  $120 = $state;
  $121 = HEAP32[$120>>2]|0;
  $122 = (($121) - ($119))|0;
  HEAP32[$120>>2] = $122;
  $123 = $n;
  $124 = $state;
  $125 = (($124) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($126) + ($123)|0);
  HEAP32[$125>>2] = $127;
  $128 = $n;
  $129 = $state;
  $130 = (($129) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($131) + ($128))|0;
  HEAP32[$130>>2] = $132;
  $133 = $n;
  $134 = $2;
  $135 = (($134) - ($133))|0;
  $2 = $135;
 }
 $136 = $2;
 $137 = ($136|0)!=(0);
 if ($137) {
  $138 = $state;
  $139 = (($138) + 72|0);
  HEAP32[$139>>2] = 1;
  $140 = $2;
  $141 = $state;
  $142 = (($141) + 68|0);
  HEAP32[$142>>2] = $140;
 }
 $143 = $state;
 $144 = (($143) + 8|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $2;
 $147 = (($145) + ($146))|0;
 $0 = $147;
 $148 = $0;
 STACKTOP = sp;return ($148|0);
}
function _gz_error($state,$err,$msg) {
 $state = $state|0;
 $err = $err|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $state;
 $1 = $err;
 $2 = $msg;
 $3 = $0;
 $4 = (($3) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(-4);
  if ($10) {
   $11 = $0;
   $12 = (($11) + 80|0);
   $13 = HEAP32[$12>>2]|0;
   _free($13);
  }
  $14 = $0;
  $15 = (($14) + 80|0);
  HEAP32[$15>>2] = 0;
 }
 $16 = $1;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $1;
  $19 = ($18|0)!=(-5);
  if ($19) {
   $20 = $0;
   HEAP32[$20>>2] = 0;
  }
 }
 $21 = $1;
 $22 = $0;
 $23 = (($22) + 76|0);
 HEAP32[$23>>2] = $21;
 $24 = $2;
 $25 = ($24|0)==(0|0);
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = $1;
 $27 = ($26|0)==(-4);
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = $0;
 $29 = (($28) + 20|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_strlen(($30|0))|0);
 $32 = $2;
 $33 = (_strlen(($32|0))|0);
 $34 = (($31) + ($33))|0;
 $35 = (($34) + 3)|0;
 $36 = (_malloc($35)|0);
 $37 = $0;
 $38 = (($37) + 80|0);
 HEAP32[$38>>2] = $36;
 $39 = ($36|0)==(0|0);
 if ($39) {
  $40 = $0;
  $41 = (($40) + 76|0);
  HEAP32[$41>>2] = -4;
  STACKTOP = sp;return;
 } else {
  $42 = $0;
  $43 = (($42) + 80|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $0;
  $46 = (($45) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (_strlen(($47|0))|0);
  $49 = $2;
  $50 = (_strlen(($49|0))|0);
  $51 = (($48) + ($50))|0;
  $52 = (($51) + 3)|0;
  $53 = $0;
  $54 = (($53) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $2;
  HEAP32[$vararg_buffer>>2] = $55;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 19432;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $56;
  (_snprintf($44,$52,19424,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
}
function _gzseek($file,$offset,$whence) {
 $file = $file|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $offset;
 $2 = $whence;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_gzseek64($3,$4,$5)|0);
 $ret = $6;
 $7 = $ret;
 $8 = $ret;
 $9 = ($7|0)==($8|0);
 if ($9) {
  $10 = $ret;
  $11 = $10;
  STACKTOP = sp;return ($11|0);
 } else {
  $11 = -1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _gztell64($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = -1;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $4 = $1;
 $state = $4;
 $5 = $state;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(7247);
 if ($8) {
  $9 = $state;
  $10 = (($9) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(31153);
  if ($12) {
   $0 = -1;
   $25 = $0;
   STACKTOP = sp;return ($25|0);
  }
 }
 $13 = $state;
 $14 = (($13) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $state;
 $17 = (($16) + 72|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $state;
  $21 = (($20) + 68|0);
  $22 = HEAP32[$21>>2]|0;
  $24 = $22;
 } else {
  $24 = 0;
 }
 $23 = (($15) + ($24))|0;
 $0 = $23;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _gztell($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $0;
 $2 = (_gztell64($1)|0);
 $ret = $2;
 $3 = $ret;
 $4 = $ret;
 $5 = ($3|0)==($4|0);
 if ($5) {
  $6 = $ret;
  $7 = $6;
 } else {
  $7 = -1;
 }
 STACKTOP = sp;return ($7|0);
}
function _gz_open($path,$fd,$mode) {
 $path = $path|0;
 $fd = $fd|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cloexec = 0, $exclusive = 0;
 var $len = 0, $oflag = 0, $state = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $path;
 $2 = $fd;
 $3 = $mode;
 $cloexec = 0;
 $exclusive = 0;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $6 = (_malloc(140)|0);
 $state = $6;
 $7 = $state;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = 0;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $9 = $state;
 $10 = (($9) + 24|0);
 HEAP32[$10>>2] = 0;
 $11 = $state;
 $12 = (($11) + 28|0);
 HEAP32[$12>>2] = 8192;
 $13 = $state;
 $14 = (($13) + 80|0);
 HEAP32[$14>>2] = 0;
 $15 = $state;
 $16 = (($15) + 12|0);
 HEAP32[$16>>2] = 0;
 $17 = $state;
 $18 = (($17) + 60|0);
 HEAP32[$18>>2] = -1;
 $19 = $state;
 $20 = (($19) + 64|0);
 HEAP32[$20>>2] = 0;
 $21 = $state;
 $22 = (($21) + 40|0);
 HEAP32[$22>>2] = 0;
 L9: while(1) {
  $23 = $3;
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)!=(0);
  if (!($25)) {
   break;
  }
  $26 = $3;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)>=(48);
  if ($29) {
   $30 = $3;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 << 24 >> 24;
   $33 = ($32|0)<=(57);
   if ($33) {
    $34 = $3;
    $35 = HEAP8[$34>>0]|0;
    $36 = $35 << 24 >> 24;
    $37 = (($36) - 48)|0;
    $38 = $state;
    $39 = (($38) + 60|0);
    HEAP32[$39>>2] = $37;
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
  if ((label|0) == 10) {
   label = 0;
   $40 = $3;
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   do {
    switch ($42|0) {
    case 82:  {
     $54 = $state;
     $55 = (($54) + 64|0);
     HEAP32[$55>>2] = 3;
     break;
    }
    case 102:  {
     $50 = $state;
     $51 = (($50) + 64|0);
     HEAP32[$51>>2] = 1;
     break;
    }
    case 101:  {
     $cloexec = 1;
     break;
    }
    case 84:  {
     $58 = $state;
     $59 = (($58) + 40|0);
     HEAP32[$59>>2] = 1;
     break;
    }
    case 98:  {
     break;
    }
    case 43:  {
     label = 14;
     break L9;
     break;
    }
    case 104:  {
     $52 = $state;
     $53 = (($52) + 64|0);
     HEAP32[$53>>2] = 2;
     break;
    }
    case 97:  {
     $47 = $state;
     $48 = (($47) + 12|0);
     HEAP32[$48>>2] = 1;
     break;
    }
    case 119:  {
     $45 = $state;
     $46 = (($45) + 12|0);
     HEAP32[$46>>2] = 31153;
     break;
    }
    case 114:  {
     $43 = $state;
     $44 = (($43) + 12|0);
     HEAP32[$44>>2] = 7247;
     break;
    }
    case 70:  {
     $56 = $state;
     $57 = (($56) + 64|0);
     HEAP32[$57>>2] = 4;
     break;
    }
    case 120:  {
     $exclusive = 1;
     break;
    }
    default: {
    }
    }
   } while(0);
  }
  $60 = $3;
  $61 = (($60) + 1|0);
  $3 = $61;
 }
 if ((label|0) == 14) {
  $49 = $state;
  _free($49);
  $0 = 0;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $62 = $state;
 $63 = (($62) + 12|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)==(0);
 if ($65) {
  $66 = $state;
  _free($66);
  $0 = 0;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $67 = $state;
 $68 = (($67) + 12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)==(7247);
 do {
  if ($70) {
   $71 = $state;
   $72 = (($71) + 40|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)!=(0);
   if (!($74)) {
    $76 = $state;
    $77 = (($76) + 40|0);
    HEAP32[$77>>2] = 1;
    break;
   }
   $75 = $state;
   _free($75);
   $0 = 0;
   $157 = $0;
   STACKTOP = sp;return ($157|0);
  }
 } while(0);
 $78 = $1;
 $79 = (_strlen(($78|0))|0);
 $len = $79;
 $80 = $len;
 $81 = (($80) + 1)|0;
 $82 = (_malloc($81)|0);
 $83 = $state;
 $84 = (($83) + 20|0);
 HEAP32[$84>>2] = $82;
 $85 = $state;
 $86 = (($85) + 20|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0|0);
 if ($88) {
  $89 = $state;
  _free($89);
  $0 = 0;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $90 = $state;
 $91 = (($90) + 20|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $len;
 $94 = (($93) + 1)|0;
 $95 = $1;
 HEAP32[$vararg_buffer>>2] = $95;
 (_snprintf($92,$94,19440,$vararg_buffer)|0);
 $96 = $cloexec;
 $97 = ($96|0)!=(0);
 $98 = $97 ? 524288 : 0;
 $99 = 32768 | $98;
 $100 = $state;
 $101 = (($100) + 12|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)==(7247);
 if ($103) {
  $115 = 0;
 } else {
  $104 = $exclusive;
  $105 = ($104|0)!=(0);
  $106 = $105 ? 128 : 0;
  $107 = 65 | $106;
  $108 = $state;
  $109 = (($108) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)==(31153);
  $112 = $111 ? 512 : 1024;
  $113 = $107 | $112;
  $115 = $113;
 }
 $114 = $99 | $115;
 $oflag = $114;
 $116 = $2;
 $117 = ($116|0)>(-1);
 if ($117) {
  $118 = $2;
  $124 = $118;
 } else {
  $119 = $1;
  $120 = $oflag;
  HEAP32[$vararg_buffer1>>2] = 438;
  $121 = (_open(($119|0),($120|0),($vararg_buffer1|0))|0);
  $124 = $121;
 }
 $122 = $state;
 $123 = (($122) + 16|0);
 HEAP32[$123>>2] = $124;
 $125 = $state;
 $126 = (($125) + 16|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)==(-1);
 if ($128) {
  $129 = $state;
  $130 = (($129) + 20|0);
  $131 = HEAP32[$130>>2]|0;
  _free($131);
  $132 = $state;
  _free($132);
  $0 = 0;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $133 = $state;
 $134 = (($133) + 12|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)==(1);
 if ($136) {
  $137 = $state;
  $138 = (($137) + 12|0);
  HEAP32[$138>>2] = 31153;
 }
 $139 = $state;
 $140 = (($139) + 12|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)==(7247);
 if ($142) {
  $143 = $state;
  $144 = (($143) + 16|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (_lseek(($145|0),0,1)|0);
  $147 = $state;
  $148 = (($147) + 48|0);
  HEAP32[$148>>2] = $146;
  $149 = $state;
  $150 = (($149) + 48|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($151|0)==(-1);
  if ($152) {
   $153 = $state;
   $154 = (($153) + 48|0);
   HEAP32[$154>>2] = 0;
  }
 }
 $155 = $state;
 _gz_reset($155);
 $156 = $state;
 $0 = $156;
 $157 = $0;
 STACKTOP = sp;return ($157|0);
}
function _gz_reset($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $state;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = $0;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(7247);
 if ($5) {
  $6 = $0;
  $7 = (($6) + 52|0);
  HEAP32[$7>>2] = 0;
  $8 = $0;
  $9 = (($8) + 56|0);
  HEAP32[$9>>2] = 0;
  $10 = $0;
  $11 = (($10) + 44|0);
  HEAP32[$11>>2] = 0;
 }
 $12 = $0;
 $13 = (($12) + 72|0);
 HEAP32[$13>>2] = 0;
 $14 = $0;
 _gz_error($14,0,0);
 $15 = $0;
 $16 = (($15) + 8|0);
 HEAP32[$16>>2] = 0;
 $17 = $0;
 $18 = (($17) + 84|0);
 $19 = (($18) + 4|0);
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return;
}
function _gzclose_r($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $err = 0, $ret = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = -2;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $4 = $1;
 $state = $4;
 $5 = $state;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(7247);
 if ($8) {
  $0 = -2;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $9 = $state;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $state;
  $14 = (($13) + 84|0);
  (_inflateEnd($14)|0);
  $15 = $state;
  $16 = (($15) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  _free($17);
  $18 = $state;
  $19 = (($18) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  _free($20);
 }
 $21 = $state;
 $22 = (($21) + 76|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(-5);
 $25 = $24 ? -5 : 0;
 $err = $25;
 $26 = $state;
 _gz_error($26,0,0);
 $27 = $state;
 $28 = (($27) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 _free($29);
 $30 = $state;
 $31 = (($30) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_close(($32|0))|0);
 $ret = $33;
 $34 = $state;
 _free($34);
 $35 = $ret;
 $36 = ($35|0)!=(0);
 if ($36) {
  $38 = -1;
 } else {
  $37 = $err;
  $38 = $37;
 }
 $0 = $38;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function _gzwrite($file,$buf,$len) {
 $file = $file|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $copy = 0, $have = 0, $put = 0, $state = 0, $strm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $buf;
 $3 = $len;
 $4 = $3;
 $put = $4;
 $5 = $1;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 0;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $7 = $1;
 $state = $7;
 $8 = $state;
 $9 = (($8) + 84|0);
 $strm = $9;
 $10 = $state;
 $11 = (($10) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(31153);
 if (!($13)) {
  $14 = $state;
  $15 = (($14) + 76|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   $18 = $3;
   $19 = ($18|0)<(0);
   if ($19) {
    $20 = $state;
    _gz_error($20,-3,19448);
    $0 = 0;
    $127 = $0;
    STACKTOP = sp;return ($127|0);
   }
   $21 = $3;
   $22 = ($21|0)==(0);
   if ($22) {
    $0 = 0;
    $127 = $0;
    STACKTOP = sp;return ($127|0);
   }
   $23 = $state;
   $24 = (($23) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    $27 = $state;
    $28 = (_gz_init($27)|0);
    $29 = ($28|0)==(-1);
    if ($29) {
     $0 = 0;
     $127 = $0;
     STACKTOP = sp;return ($127|0);
    }
   }
   $30 = $state;
   $31 = (($30) + 72|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)!=(0);
   do {
    if ($33) {
     $34 = $state;
     $35 = (($34) + 72|0);
     HEAP32[$35>>2] = 0;
     $36 = $state;
     $37 = $state;
     $38 = (($37) + 68|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (_gz_zero($36,$39)|0);
     $41 = ($40|0)==(-1);
     if (!($41)) {
      break;
     }
     $0 = 0;
     $127 = $0;
     STACKTOP = sp;return ($127|0);
    }
   } while(0);
   $42 = $3;
   $43 = $state;
   $44 = (($43) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($42>>>0)<($45>>>0);
   do {
    if ($46) {
     while(1) {
      $47 = $strm;
      $48 = (($47) + 4|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49|0)==(0);
      if ($50) {
       $51 = $state;
       $52 = (($51) + 32|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = $strm;
       HEAP32[$54>>2] = $53;
      }
      $55 = $strm;
      $56 = HEAP32[$55>>2]|0;
      $57 = $strm;
      $58 = (($57) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (($56) + ($59)|0);
      $61 = $state;
      $62 = (($61) + 32|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = $60;
      $65 = $63;
      $66 = (($64) - ($65))|0;
      $have = $66;
      $67 = $state;
      $68 = (($67) + 24|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = $have;
      $71 = (($69) - ($70))|0;
      $copy = $71;
      $72 = $copy;
      $73 = $3;
      $74 = ($72>>>0)>($73>>>0);
      if ($74) {
       $75 = $3;
       $copy = $75;
      }
      $76 = $state;
      $77 = (($76) + 32|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = $have;
      $80 = (($78) + ($79)|0);
      $81 = $2;
      $82 = $copy;
      _memcpy(($80|0),($81|0),($82|0))|0;
      $83 = $copy;
      $84 = $strm;
      $85 = (($84) + 4|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = (($86) + ($83))|0;
      HEAP32[$85>>2] = $87;
      $88 = $copy;
      $89 = $state;
      $90 = (($89) + 8|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = (($91) + ($88))|0;
      HEAP32[$90>>2] = $92;
      $93 = $2;
      $94 = $copy;
      $95 = (($93) + ($94)|0);
      $2 = $95;
      $96 = $copy;
      $97 = $3;
      $98 = (($97) - ($96))|0;
      $3 = $98;
      $99 = $3;
      $100 = ($99|0)!=(0);
      if ($100) {
       $101 = $state;
       $102 = (_gz_comp($101,0)|0);
       $103 = ($102|0)==(-1);
       if ($103) {
        break;
       }
      }
      $104 = $3;
      $105 = ($104|0)!=(0);
      if (!($105)) {
       label = 28;
       break;
      }
     }
     if ((label|0) == 28) {
      break;
     }
     $0 = 0;
     $127 = $0;
     STACKTOP = sp;return ($127|0);
    } else {
     $106 = $strm;
     $107 = (($106) + 4|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)!=(0);
     if ($109) {
      $110 = $state;
      $111 = (_gz_comp($110,0)|0);
      $112 = ($111|0)==(-1);
      if ($112) {
       $0 = 0;
       $127 = $0;
       STACKTOP = sp;return ($127|0);
      }
     }
     $113 = $3;
     $114 = $strm;
     $115 = (($114) + 4|0);
     HEAP32[$115>>2] = $113;
     $116 = $2;
     $117 = $strm;
     HEAP32[$117>>2] = $116;
     $118 = $3;
     $119 = $state;
     $120 = (($119) + 8|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (($121) + ($118))|0;
     HEAP32[$120>>2] = $122;
     $123 = $state;
     $124 = (_gz_comp($123,0)|0);
     $125 = ($124|0)==(-1);
     if (!($125)) {
      break;
     }
     $0 = 0;
     $127 = $0;
     STACKTOP = sp;return ($127|0);
    }
   } while(0);
   $126 = $put;
   $0 = $126;
   $127 = $0;
   STACKTOP = sp;return ($127|0);
  }
 }
 $0 = 0;
 $127 = $0;
 STACKTOP = sp;return ($127|0);
}
function _gzclose_w($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, $state = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $ret = 0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = -2;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $4 = $1;
 $state = $4;
 $5 = $state;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(31153);
 if ($8) {
  $0 = -2;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $9 = $state;
 $10 = (($9) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $state;
  $14 = (($13) + 72|0);
  HEAP32[$14>>2] = 0;
  $15 = $state;
  $16 = $state;
  $17 = (($16) + 68|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_gz_zero($15,$18)|0);
  $20 = ($19|0)==(-1);
  if ($20) {
   $21 = $state;
   $22 = (($21) + 76|0);
   $23 = HEAP32[$22>>2]|0;
   $ret = $23;
  }
 }
 $24 = $state;
 $25 = (_gz_comp($24,4)|0);
 $26 = ($25|0)==(-1);
 if ($26) {
  $27 = $state;
  $28 = (($27) + 76|0);
  $29 = HEAP32[$28>>2]|0;
  $ret = $29;
 }
 $30 = $state;
 $31 = (($30) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $state;
  $35 = (($34) + 40|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)!=(0);
  if (!($37)) {
   $38 = $state;
   $39 = (($38) + 84|0);
   (_deflateEnd($39)|0);
   $40 = $state;
   $41 = (($40) + 36|0);
   $42 = HEAP32[$41>>2]|0;
   _free($42);
  }
  $43 = $state;
  $44 = (($43) + 32|0);
  $45 = HEAP32[$44>>2]|0;
  _free($45);
 }
 $46 = $state;
 _gz_error($46,0,0);
 $47 = $state;
 $48 = (($47) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 _free($49);
 $50 = $state;
 $51 = (($50) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (_close(($52|0))|0);
 $54 = ($53|0)==(-1);
 if ($54) {
  $ret = -1;
 }
 $55 = $state;
 _free($55);
 $56 = $ret;
 $0 = $56;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function _gz_init($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $ret = 0, $strm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $state;
 $2 = $1;
 $3 = (($2) + 84|0);
 $strm = $3;
 $4 = $1;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_malloc($6)|0);
 $8 = $1;
 $9 = (($8) + 32|0);
 HEAP32[$9>>2] = $7;
 $10 = $1;
 $11 = (($10) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $1;
  _gz_error($14,-4,19528);
  $0 = -1;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 $15 = $1;
 $16 = (($15) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 do {
  if (!($18)) {
   $19 = $1;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (_malloc($21)|0);
   $23 = $1;
   $24 = (($23) + 36|0);
   HEAP32[$24>>2] = $22;
   $25 = $1;
   $26 = (($25) + 36|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $29 = $1;
    $30 = (($29) + 32|0);
    $31 = HEAP32[$30>>2]|0;
    _free($31);
    $32 = $1;
    _gz_error($32,-4,19528);
    $0 = -1;
    $80 = $0;
    STACKTOP = sp;return ($80|0);
   }
   $33 = $strm;
   $34 = (($33) + 32|0);
   HEAP32[$34>>2] = 0;
   $35 = $strm;
   $36 = (($35) + 36|0);
   HEAP32[$36>>2] = 0;
   $37 = $strm;
   $38 = (($37) + 40|0);
   HEAP32[$38>>2] = 0;
   $39 = $strm;
   $40 = $1;
   $41 = (($40) + 60|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $1;
   $44 = (($43) + 64|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (_deflateInit2_($39,$42,8,31,8,$45,19544,56)|0);
   $ret = $46;
   $47 = $ret;
   $48 = ($47|0)!=(0);
   if (!($48)) {
    break;
   }
   $49 = $1;
   $50 = (($49) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   _free($51);
   $52 = $1;
   $53 = (($52) + 32|0);
   $54 = HEAP32[$53>>2]|0;
   _free($54);
   $55 = $1;
   _gz_error($55,-4,19528);
   $0 = -1;
   $80 = $0;
   STACKTOP = sp;return ($80|0);
  }
 } while(0);
 $56 = $1;
 $57 = (($56) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $1;
 $60 = (($59) + 24|0);
 HEAP32[$60>>2] = $58;
 $61 = $1;
 $62 = (($61) + 40|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)!=(0);
 if (!($64)) {
  $65 = $1;
  $66 = (($65) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $strm;
  $69 = (($68) + 16|0);
  HEAP32[$69>>2] = $67;
  $70 = $1;
  $71 = (($70) + 36|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $strm;
  $74 = (($73) + 12|0);
  HEAP32[$74>>2] = $72;
  $75 = $strm;
  $76 = (($75) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $1;
  $79 = (($78) + 4|0);
  HEAP32[$79>>2] = $77;
 }
 $0 = 0;
 $80 = $0;
 STACKTOP = sp;return ($80|0);
}
function _gz_zero($state,$len) {
 $state = $state|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $first = 0, $n = 0, $strm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $state;
 $2 = $len;
 $3 = $1;
 $4 = (($3) + 84|0);
 $strm = $4;
 $5 = $strm;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $1;
  $10 = (_gz_comp($9,0)|0);
  $11 = ($10|0)==(-1);
  if ($11) {
   $0 = -1;
   $52 = $0;
   STACKTOP = sp;return ($52|0);
  }
 }
 $first = 1;
 while(1) {
  $12 = $2;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   label = 15;
   break;
  }
  $14 = $1;
  $15 = (($14) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16>>>0)>(2147483647);
  if ($17) {
   label = 8;
  } else {
   $18 = $1;
   $19 = (($18) + 24|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $2;
   $22 = ($20|0)>($21|0);
   if ($22) {
    label = 8;
   } else {
    $24 = $1;
    $25 = (($24) + 24|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $23 = $2;
   $27 = $23;
  }
  $n = $27;
  $28 = $first;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $1;
   $31 = (($30) + 32|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $n;
   _memset(($32|0),0,($33|0))|0;
   $first = 0;
  }
  $34 = $n;
  $35 = $strm;
  $36 = (($35) + 4|0);
  HEAP32[$36>>2] = $34;
  $37 = $1;
  $38 = (($37) + 32|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $strm;
  HEAP32[$40>>2] = $39;
  $41 = $n;
  $42 = $1;
  $43 = (($42) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($41))|0;
  HEAP32[$43>>2] = $45;
  $46 = $1;
  $47 = (_gz_comp($46,0)|0);
  $48 = ($47|0)==(-1);
  if ($48) {
   label = 13;
   break;
  }
  $49 = $n;
  $50 = $2;
  $51 = (($50) - ($49))|0;
  $2 = $51;
 }
 if ((label|0) == 13) {
  $0 = -1;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 else if ((label|0) == 15) {
  $0 = 0;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 return (0)|0;
}
function _gz_comp($state,$flush) {
 $state = $state|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $got = 0, $have = 0, $ret = 0, $strm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $state;
 $2 = $flush;
 $3 = $1;
 $4 = (($3) + 84|0);
 $strm = $4;
 $5 = $1;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $1;
  $10 = (_gz_init($9)|0);
  $11 = ($10|0)==(-1);
  if ($11) {
   $0 = -1;
   $113 = $0;
   STACKTOP = sp;return ($113|0);
  }
 }
 $12 = $1;
 $13 = (($12) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $1;
  $17 = (($16) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $strm;
  $20 = HEAP32[$19>>2]|0;
  $21 = $strm;
  $22 = (($21) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_write(($18|0),($20|0),($23|0))|0);
  $got = $24;
  $25 = $got;
  $26 = ($25|0)<(0);
  if (!($26)) {
   $27 = $got;
   $28 = $strm;
   $29 = (($28) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($27|0)!=($30|0);
   if (!($31)) {
    $36 = $strm;
    $37 = (($36) + 4|0);
    HEAP32[$37>>2] = 0;
    $0 = 0;
    $113 = $0;
    STACKTOP = sp;return ($113|0);
   }
  }
  $32 = $1;
  $33 = (___errno_location()|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_strerror(($34|0))|0);
  _gz_error($32,-1,$35);
  $0 = -1;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $ret = 0;
 while(1) {
  $38 = $strm;
  $39 = (($38) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0);
  if ($41) {
   label = 14;
  } else {
   $42 = $2;
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = $2;
    $45 = ($44|0)!=(4);
    if ($45) {
     label = 14;
    } else {
     $46 = $ret;
     $47 = ($46|0)==(1);
     if ($47) {
      label = 14;
     }
    }
   }
  }
  if ((label|0) == 14) {
   label = 0;
   $48 = $strm;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $1;
   $52 = (($51) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $50;
   $55 = $53;
   $56 = (($54) - ($55))|0;
   $have = $56;
   $57 = $have;
   $58 = ($57|0)!=(0);
   if ($58) {
    $59 = $1;
    $60 = (($59) + 16|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $1;
    $63 = (($62) + 4|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $have;
    $66 = (_write(($61|0),($64|0),($65|0))|0);
    $got = $66;
    $67 = ($66|0)<(0);
    if ($67) {
     label = 17;
     break;
    }
    $68 = $got;
    $69 = $have;
    $70 = ($68|0)!=($69|0);
    if ($70) {
     label = 17;
     break;
    }
   }
   $75 = $strm;
   $76 = (($75) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)==(0);
   if ($78) {
    $79 = $1;
    $80 = (($79) + 24|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $strm;
    $83 = (($82) + 16|0);
    HEAP32[$83>>2] = $81;
    $84 = $1;
    $85 = (($84) + 36|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $strm;
    $88 = (($87) + 12|0);
    HEAP32[$88>>2] = $86;
   }
   $89 = $strm;
   $90 = (($89) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $1;
   $93 = (($92) + 4|0);
   HEAP32[$93>>2] = $91;
  }
  $94 = $strm;
  $95 = (($94) + 16|0);
  $96 = HEAP32[$95>>2]|0;
  $have = $96;
  $97 = $strm;
  $98 = $2;
  $99 = (_deflate($97,$98)|0);
  $ret = $99;
  $100 = $ret;
  $101 = ($100|0)==(-2);
  if ($101) {
   label = 22;
   break;
  }
  $103 = $strm;
  $104 = (($103) + 16|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $have;
  $107 = (($106) - ($105))|0;
  $have = $107;
  $108 = $have;
  $109 = ($108|0)!=(0);
  if (!($109)) {
   label = 25;
   break;
  }
 }
 if ((label|0) == 17) {
  $71 = $1;
  $72 = (___errno_location()|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (_strerror(($73|0))|0);
  _gz_error($71,-1,$74);
  $0 = -1;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 22) {
  $102 = $1;
  _gz_error($102,-2,19488);
  $0 = -1;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 25) {
  $110 = $2;
  $111 = ($110|0)==(4);
  if ($111) {
   $112 = $strm;
   (_deflateReset($112)|0);
  }
  $0 = 0;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 return (0)|0;
}
function _inflateEnd($strm) {
 $strm = $strm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = $1;
  $5 = (($4) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = $1;
   $9 = (($8) + 36|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $12 = $1;
    $13 = (($12) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $state = $14;
    $15 = $state;
    $16 = (($15) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(0|0);
    if ($18) {
     $19 = $1;
     $20 = (($19) + 36|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = $1;
     $23 = (($22) + 40|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $state;
     $26 = (($25) + 52|0);
     $27 = HEAP32[$26>>2]|0;
     FUNCTION_TABLE_vii[$21 & 63]($24,$27);
    }
    $28 = $1;
    $29 = (($28) + 36|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $1;
    $32 = (($31) + 40|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $1;
    $35 = (($34) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vii[$30 & 63]($33,$36);
    $37 = $1;
    $38 = (($37) + 28|0);
    HEAP32[$38>>2] = 0;
    $0 = 0;
    $39 = $0;
    STACKTOP = sp;return ($39|0);
   }
  }
 }
 $0 = -2;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function __tr_init($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 _tr_static_init();
 $1 = $0;
 $2 = (($1) + 148|0);
 $3 = $0;
 $4 = (($3) + 2840|0);
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = (($5) + 2840|0);
 $7 = (($6) + 8|0);
 HEAP32[$7>>2] = 20344;
 $8 = $0;
 $9 = (($8) + 2440|0);
 $10 = $0;
 $11 = (($10) + 2852|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 2852|0);
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 20368;
 $15 = $0;
 $16 = (($15) + 2684|0);
 $17 = $0;
 $18 = (($17) + 2864|0);
 HEAP32[$18>>2] = $16;
 $19 = $0;
 $20 = (($19) + 2864|0);
 $21 = (($20) + 8|0);
 HEAP32[$21>>2] = 20392;
 $22 = $0;
 $23 = (($22) + 5816|0);
 HEAP16[$23>>1] = 0;
 $24 = $0;
 $25 = (($24) + 5820|0);
 HEAP32[$25>>2] = 0;
 $26 = $0;
 _init_block($26);
 STACKTOP = sp;return;
}
function __tr_stored_block($s,$buf,$stored_len,$last) {
 $s = $s|0;
 $buf = $buf|0;
 $stored_len = $stored_len|0;
 $last = $last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $len = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $buf;
 $2 = $stored_len;
 $3 = $last;
 $len = 3;
 $4 = $0;
 $5 = (($4) + 5820|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $len;
 $8 = (16 - ($7))|0;
 $9 = ($6|0)>($8|0);
 if ($9) {
  $10 = $3;
  $11 = (0 + ($10))|0;
  $val = $11;
  $12 = $val;
  $13 = $12&65535;
  $14 = $13&65535;
  $15 = $0;
  $16 = (($15) + 5820|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $14 << $17;
  $19 = $0;
  $20 = (($19) + 5816|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 | $18;
  $24 = $23&65535;
  HEAP16[$20>>1] = $24;
  $25 = $0;
  $26 = (($25) + 5816|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = $28 & 255;
  $30 = $29&255;
  $31 = $0;
  $32 = (($31) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
  $35 = $0;
  $36 = (($35) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($33)|0);
  HEAP8[$38>>0] = $30;
  $39 = $0;
  $40 = (($39) + 5816|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $42 >> 8;
  $44 = $43&255;
  $45 = $0;
  $46 = (($45) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$46>>2] = $48;
  $49 = $0;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($47)|0);
  HEAP8[$52>>0] = $44;
  $53 = $val;
  $54 = $53&65535;
  $55 = $54&65535;
  $56 = $0;
  $57 = (($56) + 5820|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (16 - ($58))|0;
  $60 = $55 >> $59;
  $61 = $60&65535;
  $62 = $0;
  $63 = (($62) + 5816|0);
  HEAP16[$63>>1] = $61;
  $64 = $len;
  $65 = (($64) - 16)|0;
  $66 = $0;
  $67 = (($66) + 5820|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($65))|0;
  HEAP32[$67>>2] = $69;
  $89 = $0;
  $90 = $1;
  $91 = $2;
  _copy_block($89,$90,$91,1);
  STACKTOP = sp;return;
 } else {
  $70 = $3;
  $71 = (0 + ($70))|0;
  $72 = $71&65535;
  $73 = $72&65535;
  $74 = $0;
  $75 = (($74) + 5820|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $73 << $76;
  $78 = $0;
  $79 = (($78) + 5816|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80&65535;
  $82 = $81 | $77;
  $83 = $82&65535;
  HEAP16[$79>>1] = $83;
  $84 = $len;
  $85 = $0;
  $86 = (($85) + 5820|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + ($84))|0;
  HEAP32[$86>>2] = $88;
  $89 = $0;
  $90 = $1;
  $91 = $2;
  _copy_block($89,$90,$91,1);
  STACKTOP = sp;return;
 }
}
function __tr_flush_bits($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 _bi_flush($1);
 STACKTOP = sp;return;
}
function __tr_align($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $len1 = 0, $val = 0, $val2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $len = 3;
 $1 = $0;
 $2 = (($1) + 5820|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $len;
 $5 = (16 - ($4))|0;
 $6 = ($3|0)>($5|0);
 if ($6) {
  $val = 2;
  $7 = $val;
  $8 = $7&65535;
  $9 = $8&65535;
  $10 = $0;
  $11 = (($10) + 5820|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $9 << $12;
  $14 = $0;
  $15 = (($14) + 5816|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = $17 | $13;
  $19 = $18&65535;
  HEAP16[$15>>1] = $19;
  $20 = $0;
  $21 = (($20) + 5816|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = $23 & 255;
  $25 = $24&255;
  $26 = $0;
  $27 = (($26) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$27>>2] = $29;
  $30 = $0;
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($28)|0);
  HEAP8[$33>>0] = $25;
  $34 = $0;
  $35 = (($34) + 5816|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = $37 >> 8;
  $39 = $38&255;
  $40 = $0;
  $41 = (($40) + 20|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[$41>>2] = $43;
  $44 = $0;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + ($42)|0);
  HEAP8[$47>>0] = $39;
  $48 = $val;
  $49 = $48&65535;
  $50 = $49&65535;
  $51 = $0;
  $52 = (($51) + 5820|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (16 - ($53))|0;
  $55 = $50 >> $54;
  $56 = $55&65535;
  $57 = $0;
  $58 = (($57) + 5816|0);
  HEAP16[$58>>1] = $56;
  $59 = $len;
  $60 = (($59) - 16)|0;
  $61 = $0;
  $62 = (($61) + 5820|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($60))|0;
  HEAP32[$62>>2] = $64;
 } else {
  $65 = $0;
  $66 = (($65) + 5820|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = 2 << $67;
  $69 = $0;
  $70 = (($69) + 5816|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71&65535;
  $73 = $72 | $68;
  $74 = $73&65535;
  HEAP16[$70>>1] = $74;
  $75 = $len;
  $76 = $0;
  $77 = (($76) + 5820|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + ($75))|0;
  HEAP32[$77>>2] = $79;
 }
 $80 = HEAP16[((20416 + 1026|0))>>1]|0;
 $81 = $80&65535;
 $len1 = $81;
 $82 = $0;
 $83 = (($82) + 5820|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $len1;
 $86 = (16 - ($85))|0;
 $87 = ($84|0)>($86|0);
 if ($87) {
  $88 = HEAP16[((20416 + 1024|0))>>1]|0;
  $89 = $88&65535;
  $val2 = $89;
  $90 = $val2;
  $91 = $90&65535;
  $92 = $91&65535;
  $93 = $0;
  $94 = (($93) + 5820|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $92 << $95;
  $97 = $0;
  $98 = (($97) + 5816|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = $99&65535;
  $101 = $100 | $96;
  $102 = $101&65535;
  HEAP16[$98>>1] = $102;
  $103 = $0;
  $104 = (($103) + 5816|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105&65535;
  $107 = $106 & 255;
  $108 = $107&255;
  $109 = $0;
  $110 = (($109) + 20|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + 1)|0;
  HEAP32[$110>>2] = $112;
  $113 = $0;
  $114 = (($113) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + ($111)|0);
  HEAP8[$116>>0] = $108;
  $117 = $0;
  $118 = (($117) + 5816|0);
  $119 = HEAP16[$118>>1]|0;
  $120 = $119&65535;
  $121 = $120 >> 8;
  $122 = $121&255;
  $123 = $0;
  $124 = (($123) + 20|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) + 1)|0;
  HEAP32[$124>>2] = $126;
  $127 = $0;
  $128 = (($127) + 8|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + ($125)|0);
  HEAP8[$130>>0] = $122;
  $131 = $val2;
  $132 = $131&65535;
  $133 = $132&65535;
  $134 = $0;
  $135 = (($134) + 5820|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (16 - ($136))|0;
  $138 = $133 >> $137;
  $139 = $138&65535;
  $140 = $0;
  $141 = (($140) + 5816|0);
  HEAP16[$141>>1] = $139;
  $142 = $len1;
  $143 = (($142) - 16)|0;
  $144 = $0;
  $145 = (($144) + 5820|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + ($143))|0;
  HEAP32[$145>>2] = $147;
  $165 = $0;
  _bi_flush($165);
  STACKTOP = sp;return;
 } else {
  $148 = HEAP16[((20416 + 1024|0))>>1]|0;
  $149 = $148&65535;
  $150 = $0;
  $151 = (($150) + 5820|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $149 << $152;
  $154 = $0;
  $155 = (($154) + 5816|0);
  $156 = HEAP16[$155>>1]|0;
  $157 = $156&65535;
  $158 = $157 | $153;
  $159 = $158&65535;
  HEAP16[$155>>1] = $159;
  $160 = $len1;
  $161 = $0;
  $162 = (($161) + 5820|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + ($160))|0;
  HEAP32[$162>>2] = $164;
  $165 = $0;
  _bi_flush($165);
  STACKTOP = sp;return;
 }
}
function __tr_flush_block($s,$buf,$stored_len,$last) {
 $s = $s|0;
 $buf = $buf|0;
 $stored_len = $stored_len|0;
 $last = $last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $len1 = 0, $max_blindex = 0, $opt_lenb = 0, $static_lenb = 0, $val = 0;
 var $val2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $buf;
 $2 = $stored_len;
 $3 = $last;
 $max_blindex = 0;
 $4 = $0;
 $5 = (($4) + 132|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(2);
  if ($12) {
   $13 = $0;
   $14 = (_detect_data_type($13)|0);
   $15 = $0;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + 44|0);
   HEAP32[$17>>2] = $14;
  }
  $18 = $0;
  $19 = $0;
  $20 = (($19) + 2840|0);
  _build_tree($18,$20);
  $21 = $0;
  $22 = $0;
  $23 = (($22) + 2852|0);
  _build_tree($21,$23);
  $24 = $0;
  $25 = (_build_bl_tree($24)|0);
  $max_blindex = $25;
  $26 = $0;
  $27 = (($26) + 5800|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 3)|0;
  $30 = (($29) + 7)|0;
  $31 = $30 >>> 3;
  $opt_lenb = $31;
  $32 = $0;
  $33 = (($32) + 5804|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 3)|0;
  $36 = (($35) + 7)|0;
  $37 = $36 >>> 3;
  $static_lenb = $37;
  $38 = $static_lenb;
  $39 = $opt_lenb;
  $40 = ($38>>>0)<=($39>>>0);
  if ($40) {
   $41 = $static_lenb;
   $opt_lenb = $41;
  }
 } else {
  $42 = $2;
  $43 = (($42) + 5)|0;
  $static_lenb = $43;
  $opt_lenb = $43;
 }
 $44 = $2;
 $45 = (($44) + 4)|0;
 $46 = $opt_lenb;
 $47 = ($45>>>0)<=($46>>>0);
 if ($47) {
  $48 = $1;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = $0;
   $51 = $1;
   $52 = $2;
   $53 = $3;
   __tr_stored_block($50,$51,$52,$53);
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $54 = $0;
  $55 = (($54) + 136|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(4);
  if ($57) {
   label = 13;
  } else {
   $58 = $static_lenb;
   $59 = $opt_lenb;
   $60 = ($58|0)==($59|0);
   if ($60) {
    label = 13;
   } else {
    $len1 = 3;
    $147 = $0;
    $148 = (($147) + 5820|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $len1;
    $151 = (16 - ($150))|0;
    $152 = ($149|0)>($151|0);
    if ($152) {
     $153 = $3;
     $154 = (4 + ($153))|0;
     $val2 = $154;
     $155 = $val2;
     $156 = $155&65535;
     $157 = $156&65535;
     $158 = $0;
     $159 = (($158) + 5820|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = $157 << $160;
     $162 = $0;
     $163 = (($162) + 5816|0);
     $164 = HEAP16[$163>>1]|0;
     $165 = $164&65535;
     $166 = $165 | $161;
     $167 = $166&65535;
     HEAP16[$163>>1] = $167;
     $168 = $0;
     $169 = (($168) + 5816|0);
     $170 = HEAP16[$169>>1]|0;
     $171 = $170&65535;
     $172 = $171 & 255;
     $173 = $172&255;
     $174 = $0;
     $175 = (($174) + 20|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (($176) + 1)|0;
     HEAP32[$175>>2] = $177;
     $178 = $0;
     $179 = (($178) + 8|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($180) + ($176)|0);
     HEAP8[$181>>0] = $173;
     $182 = $0;
     $183 = (($182) + 5816|0);
     $184 = HEAP16[$183>>1]|0;
     $185 = $184&65535;
     $186 = $185 >> 8;
     $187 = $186&255;
     $188 = $0;
     $189 = (($188) + 20|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = (($190) + 1)|0;
     HEAP32[$189>>2] = $191;
     $192 = $0;
     $193 = (($192) + 8|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (($194) + ($190)|0);
     HEAP8[$195>>0] = $187;
     $196 = $val2;
     $197 = $196&65535;
     $198 = $197&65535;
     $199 = $0;
     $200 = (($199) + 5820|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (16 - ($201))|0;
     $203 = $198 >> $202;
     $204 = $203&65535;
     $205 = $0;
     $206 = (($205) + 5816|0);
     HEAP16[$206>>1] = $204;
     $207 = $len1;
     $208 = (($207) - 16)|0;
     $209 = $0;
     $210 = (($209) + 5820|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = (($211) + ($208))|0;
     HEAP32[$210>>2] = $212;
    } else {
     $213 = $3;
     $214 = (4 + ($213))|0;
     $215 = $214&65535;
     $216 = $215&65535;
     $217 = $0;
     $218 = (($217) + 5820|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = $216 << $219;
     $221 = $0;
     $222 = (($221) + 5816|0);
     $223 = HEAP16[$222>>1]|0;
     $224 = $223&65535;
     $225 = $224 | $220;
     $226 = $225&65535;
     HEAP16[$222>>1] = $226;
     $227 = $len1;
     $228 = $0;
     $229 = (($228) + 5820|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = (($230) + ($227))|0;
     HEAP32[$229>>2] = $231;
    }
    $232 = $0;
    $233 = $0;
    $234 = (($233) + 2840|0);
    $235 = (($234) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = (($236) + 1)|0;
    $238 = $0;
    $239 = (($238) + 2852|0);
    $240 = (($239) + 4|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = (($241) + 1)|0;
    $243 = $max_blindex;
    $244 = (($243) + 1)|0;
    _send_all_trees($232,$237,$242,$244);
    $245 = $0;
    $246 = $0;
    $247 = (($246) + 148|0);
    $248 = $0;
    $249 = (($248) + 2440|0);
    _compress_block($245,$247,$249);
   }
  }
  if ((label|0) == 13) {
   $len = 3;
   $61 = $0;
   $62 = (($61) + 5820|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $len;
   $65 = (16 - ($64))|0;
   $66 = ($63|0)>($65|0);
   if ($66) {
    $67 = $3;
    $68 = (2 + ($67))|0;
    $val = $68;
    $69 = $val;
    $70 = $69&65535;
    $71 = $70&65535;
    $72 = $0;
    $73 = (($72) + 5820|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $71 << $74;
    $76 = $0;
    $77 = (($76) + 5816|0);
    $78 = HEAP16[$77>>1]|0;
    $79 = $78&65535;
    $80 = $79 | $75;
    $81 = $80&65535;
    HEAP16[$77>>1] = $81;
    $82 = $0;
    $83 = (($82) + 5816|0);
    $84 = HEAP16[$83>>1]|0;
    $85 = $84&65535;
    $86 = $85 & 255;
    $87 = $86&255;
    $88 = $0;
    $89 = (($88) + 20|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + 1)|0;
    HEAP32[$89>>2] = $91;
    $92 = $0;
    $93 = (($92) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) + ($90)|0);
    HEAP8[$95>>0] = $87;
    $96 = $0;
    $97 = (($96) + 5816|0);
    $98 = HEAP16[$97>>1]|0;
    $99 = $98&65535;
    $100 = $99 >> 8;
    $101 = $100&255;
    $102 = $0;
    $103 = (($102) + 20|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + 1)|0;
    HEAP32[$103>>2] = $105;
    $106 = $0;
    $107 = (($106) + 8|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($108) + ($104)|0);
    HEAP8[$109>>0] = $101;
    $110 = $val;
    $111 = $110&65535;
    $112 = $111&65535;
    $113 = $0;
    $114 = (($113) + 5820|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (16 - ($115))|0;
    $117 = $112 >> $116;
    $118 = $117&65535;
    $119 = $0;
    $120 = (($119) + 5816|0);
    HEAP16[$120>>1] = $118;
    $121 = $len;
    $122 = (($121) - 16)|0;
    $123 = $0;
    $124 = (($123) + 5820|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (($125) + ($122))|0;
    HEAP32[$124>>2] = $126;
   } else {
    $127 = $3;
    $128 = (2 + ($127))|0;
    $129 = $128&65535;
    $130 = $129&65535;
    $131 = $0;
    $132 = (($131) + 5820|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $130 << $133;
    $135 = $0;
    $136 = (($135) + 5816|0);
    $137 = HEAP16[$136>>1]|0;
    $138 = $137&65535;
    $139 = $138 | $134;
    $140 = $139&65535;
    HEAP16[$136>>1] = $140;
    $141 = $len;
    $142 = $0;
    $143 = (($142) + 5820|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (($144) + ($141))|0;
    HEAP32[$143>>2] = $145;
   }
   $146 = $0;
   _compress_block($146,20416,21568);
  }
 }
 $250 = $0;
 _init_block($250);
 $251 = $3;
 $252 = ($251|0)!=(0);
 if (!($252)) {
  STACKTOP = sp;return;
 }
 $253 = $0;
 _bi_windup($253);
 STACKTOP = sp;return;
}
function _tr_static_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _init_block($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $n = 0;
 while(1) {
  $1 = $n;
  $2 = ($1|0)<(286);
  if (!($2)) {
   break;
  }
  $3 = $n;
  $4 = $0;
  $5 = (($4) + 148|0);
  $6 = (($5) + ($3<<2)|0);
  HEAP16[$6>>1] = 0;
  $7 = $n;
  $8 = (($7) + 1)|0;
  $n = $8;
 }
 $n = 0;
 while(1) {
  $9 = $n;
  $10 = ($9|0)<(30);
  if (!($10)) {
   break;
  }
  $11 = $n;
  $12 = $0;
  $13 = (($12) + 2440|0);
  $14 = (($13) + ($11<<2)|0);
  HEAP16[$14>>1] = 0;
  $15 = $n;
  $16 = (($15) + 1)|0;
  $n = $16;
 }
 $n = 0;
 while(1) {
  $17 = $n;
  $18 = ($17|0)<(19);
  if (!($18)) {
   break;
  }
  $19 = $n;
  $20 = $0;
  $21 = (($20) + 2684|0);
  $22 = (($21) + ($19<<2)|0);
  HEAP16[$22>>1] = 0;
  $23 = $n;
  $24 = (($23) + 1)|0;
  $n = $24;
 }
 $25 = $0;
 $26 = (($25) + 148|0);
 $27 = (($26) + 1024|0);
 HEAP16[$27>>1] = 1;
 $28 = $0;
 $29 = (($28) + 5804|0);
 HEAP32[$29>>2] = 0;
 $30 = $0;
 $31 = (($30) + 5800|0);
 HEAP32[$31>>2] = 0;
 $32 = $0;
 $33 = (($32) + 5808|0);
 HEAP32[$33>>2] = 0;
 $34 = $0;
 $35 = (($34) + 5792|0);
 HEAP32[$35>>2] = 0;
 STACKTOP = sp;return;
}
function _copy_block($s,$buf,$len,$header) {
 $s = $s|0;
 $buf = $buf|0;
 $len = $len|0;
 $header = $header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $buf;
 $2 = $len;
 $3 = $header;
 $4 = $0;
 _bi_windup($4);
 $5 = $3;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  $8 = $7&65535;
  $9 = $8&65535;
  $10 = $9 & 255;
  $11 = $10&255;
  $12 = $0;
  $13 = (($12) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = $0;
  $17 = (($16) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($14)|0);
  HEAP8[$19>>0] = $11;
  $20 = $2;
  $21 = $20&65535;
  $22 = $21&65535;
  $23 = $22 >> 8;
  $24 = $23&255;
  $25 = $0;
  $26 = (($25) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  $29 = $0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($27)|0);
  HEAP8[$32>>0] = $24;
  $33 = $2;
  $34 = $33 ^ -1;
  $35 = $34&65535;
  $36 = $35&65535;
  $37 = $36 & 255;
  $38 = $37&255;
  $39 = $0;
  $40 = (($39) + 20|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  $43 = $0;
  $44 = (($43) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($41)|0);
  HEAP8[$46>>0] = $38;
  $47 = $2;
  $48 = $47 ^ -1;
  $49 = $48&65535;
  $50 = $49&65535;
  $51 = $50 >> 8;
  $52 = $51&255;
  $53 = $0;
  $54 = (($53) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 1)|0;
  HEAP32[$54>>2] = $56;
  $57 = $0;
  $58 = (($57) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($55)|0);
  HEAP8[$60>>0] = $52;
 }
 while(1) {
  $61 = $2;
  $62 = (($61) + -1)|0;
  $2 = $62;
  $63 = ($61|0)!=(0);
  if (!($63)) {
   break;
  }
  $64 = $1;
  $65 = (($64) + 1|0);
  $1 = $65;
  $66 = HEAP8[$64>>0]|0;
  $67 = $0;
  $68 = (($67) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + 1)|0;
  HEAP32[$68>>2] = $70;
  $71 = $0;
  $72 = (($71) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($69)|0);
  HEAP8[$74>>0] = $66;
 }
 STACKTOP = sp;return;
}
function _bi_flush($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (($1) + 5820|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(16);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 5816|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = $8 & 255;
  $10 = $9&255;
  $11 = $0;
  $12 = (($11) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = $0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($13)|0);
  HEAP8[$18>>0] = $10;
  $19 = $0;
  $20 = (($19) + 5816|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 >> 8;
  $24 = $23&255;
  $25 = $0;
  $26 = (($25) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  $29 = $0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($27)|0);
  HEAP8[$32>>0] = $24;
  $33 = $0;
  $34 = (($33) + 5816|0);
  HEAP16[$34>>1] = 0;
  $35 = $0;
  $36 = (($35) + 5820|0);
  HEAP32[$36>>2] = 0;
  STACKTOP = sp;return;
 }
 $37 = $0;
 $38 = (($37) + 5820|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)>=(8);
 if ($40) {
  $41 = $0;
  $42 = (($41) + 5816|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43&255;
  $45 = $0;
  $46 = (($45) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$46>>2] = $48;
  $49 = $0;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($47)|0);
  HEAP8[$52>>0] = $44;
  $53 = $0;
  $54 = (($53) + 5816|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $57 = $56 >> 8;
  $58 = $57&65535;
  HEAP16[$54>>1] = $58;
  $59 = $0;
  $60 = (($59) + 5820|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) - 8)|0;
  HEAP32[$60>>2] = $62;
 }
 STACKTOP = sp;return;
}
function _detect_data_type($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $black_mask = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $black_mask = -201342849;
 $n = 0;
 while(1) {
  $2 = $n;
  $3 = ($2|0)<=(31);
  if (!($3)) {
   break;
  }
  $4 = $black_mask;
  $5 = $4 & 1;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $n;
   $8 = $1;
   $9 = (($8) + 148|0);
   $10 = (($9) + ($7<<2)|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = $11&65535;
   $13 = ($12|0)!=(0);
   if ($13) {
    label = 5;
    break;
   }
  }
  $14 = $n;
  $15 = (($14) + 1)|0;
  $n = $15;
  $16 = $black_mask;
  $17 = $16 >>> 1;
  $black_mask = $17;
 }
 if ((label|0) == 5) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $18 = $1;
 $19 = (($18) + 148|0);
 $20 = (($19) + 36|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $24 = $1;
  $25 = (($24) + 148|0);
  $26 = (($25) + 40|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $30 = $1;
   $31 = (($30) + 148|0);
   $32 = (($31) + 52|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33&65535;
   $35 = ($34|0)!=(0);
   if (!($35)) {
    $n = 32;
    while(1) {
     $36 = $n;
     $37 = ($36|0)<(256);
     if (!($37)) {
      label = 18;
      break;
     }
     $38 = $n;
     $39 = $1;
     $40 = (($39) + 148|0);
     $41 = (($40) + ($38<<2)|0);
     $42 = HEAP16[$41>>1]|0;
     $43 = $42&65535;
     $44 = ($43|0)!=(0);
     if ($44) {
      label = 15;
      break;
     }
     $45 = $n;
     $46 = (($45) + 1)|0;
     $n = $46;
    }
    if ((label|0) == 15) {
     $0 = 1;
     $47 = $0;
     STACKTOP = sp;return ($47|0);
    }
    else if ((label|0) == 18) {
     $0 = 0;
     $47 = $0;
     STACKTOP = sp;return ($47|0);
    }
   }
  }
 }
 $0 = 1;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _build_tree($s,$desc) {
 $s = $s|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $elems = 0, $m = 0, $max_code = 0, $n = 0, $node = 0, $stree = 0, $tree = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $desc;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $tree = $3;
 $4 = $1;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $stree = $7;
 $8 = $1;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $elems = $12;
 $max_code = -1;
 $13 = $0;
 $14 = (($13) + 5200|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = (($15) + 5204|0);
 HEAP32[$16>>2] = 573;
 $n = 0;
 while(1) {
  $17 = $n;
  $18 = $elems;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $n;
  $21 = $tree;
  $22 = (($21) + ($20<<2)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $n;
   $max_code = $26;
   $27 = $0;
   $28 = (($27) + 5200|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[$28>>2] = $30;
   $31 = $0;
   $32 = (($31) + 2908|0);
   $33 = (($32) + ($30<<2)|0);
   HEAP32[$33>>2] = $26;
   $34 = $n;
   $35 = $0;
   $36 = (($35) + 5208|0);
   $37 = (($36) + ($34)|0);
   HEAP8[$37>>0] = 0;
  } else {
   $38 = $n;
   $39 = $tree;
   $40 = (($39) + ($38<<2)|0);
   $41 = (($40) + 2|0);
   HEAP16[$41>>1] = 0;
  }
  $42 = $n;
  $43 = (($42) + 1)|0;
  $n = $43;
 }
 while(1) {
  $44 = $0;
  $45 = (($44) + 5200|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)<(2);
  if (!($47)) {
   break;
  }
  $48 = $max_code;
  $49 = ($48|0)<(2);
  if ($49) {
   $50 = $max_code;
   $51 = (($50) + 1)|0;
   $max_code = $51;
   $59 = $51;
  } else {
   $59 = 0;
  }
  $52 = $0;
  $53 = (($52) + 5200|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 1)|0;
  HEAP32[$53>>2] = $55;
  $56 = $0;
  $57 = (($56) + 2908|0);
  $58 = (($57) + ($55<<2)|0);
  HEAP32[$58>>2] = $59;
  $node = $59;
  $60 = $node;
  $61 = $tree;
  $62 = (($61) + ($60<<2)|0);
  HEAP16[$62>>1] = 1;
  $63 = $node;
  $64 = $0;
  $65 = (($64) + 5208|0);
  $66 = (($65) + ($63)|0);
  HEAP8[$66>>0] = 0;
  $67 = $0;
  $68 = (($67) + 5800|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + -1)|0;
  HEAP32[$68>>2] = $70;
  $71 = $stree;
  $72 = ($71|0)!=(0|0);
  if ($72) {
   $73 = $node;
   $74 = $stree;
   $75 = (($74) + ($73<<2)|0);
   $76 = (($75) + 2|0);
   $77 = HEAP16[$76>>1]|0;
   $78 = $77&65535;
   $79 = $0;
   $80 = (($79) + 5804|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) - ($78))|0;
   HEAP32[$80>>2] = $82;
  }
 }
 $83 = $max_code;
 $84 = $1;
 $85 = (($84) + 4|0);
 HEAP32[$85>>2] = $83;
 $86 = $0;
 $87 = (($86) + 5200|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88|0) / 2)&-1;
 $n = $89;
 while(1) {
  $90 = $n;
  $91 = ($90|0)>=(1);
  if (!($91)) {
   break;
  }
  $92 = $0;
  $93 = $tree;
  $94 = $n;
  _pqdownheap($92,$93,$94);
  $95 = $n;
  $96 = (($95) + -1)|0;
  $n = $96;
 }
 $97 = $elems;
 $node = $97;
 while(1) {
  $98 = $0;
  $99 = (($98) + 2908|0);
  $100 = (($99) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $n = $101;
  $102 = $0;
  $103 = (($102) + 5200|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + -1)|0;
  HEAP32[$103>>2] = $105;
  $106 = $0;
  $107 = (($106) + 2908|0);
  $108 = (($107) + ($104<<2)|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $0;
  $111 = (($110) + 2908|0);
  $112 = (($111) + 4|0);
  HEAP32[$112>>2] = $109;
  $113 = $0;
  $114 = $tree;
  _pqdownheap($113,$114,1);
  $115 = $0;
  $116 = (($115) + 2908|0);
  $117 = (($116) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  $m = $118;
  $119 = $n;
  $120 = $0;
  $121 = (($120) + 5204|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + -1)|0;
  HEAP32[$121>>2] = $123;
  $124 = $0;
  $125 = (($124) + 2908|0);
  $126 = (($125) + ($123<<2)|0);
  HEAP32[$126>>2] = $119;
  $127 = $m;
  $128 = $0;
  $129 = (($128) + 5204|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + -1)|0;
  HEAP32[$129>>2] = $131;
  $132 = $0;
  $133 = (($132) + 2908|0);
  $134 = (($133) + ($131<<2)|0);
  HEAP32[$134>>2] = $127;
  $135 = $n;
  $136 = $tree;
  $137 = (($136) + ($135<<2)|0);
  $138 = HEAP16[$137>>1]|0;
  $139 = $138&65535;
  $140 = $m;
  $141 = $tree;
  $142 = (($141) + ($140<<2)|0);
  $143 = HEAP16[$142>>1]|0;
  $144 = $143&65535;
  $145 = (($139) + ($144))|0;
  $146 = $145&65535;
  $147 = $node;
  $148 = $tree;
  $149 = (($148) + ($147<<2)|0);
  HEAP16[$149>>1] = $146;
  $150 = $n;
  $151 = $0;
  $152 = (($151) + 5208|0);
  $153 = (($152) + ($150)|0);
  $154 = HEAP8[$153>>0]|0;
  $155 = $154&255;
  $156 = $m;
  $157 = $0;
  $158 = (($157) + 5208|0);
  $159 = (($158) + ($156)|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $160&255;
  $162 = ($155|0)>=($161|0);
  if ($162) {
   $163 = $n;
   $164 = $0;
   $165 = (($164) + 5208|0);
   $166 = (($165) + ($163)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $176 = $168;
  } else {
   $169 = $m;
   $170 = $0;
   $171 = (($170) + 5208|0);
   $172 = (($171) + ($169)|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $176 = $174;
  }
  $175 = (($176) + 1)|0;
  $177 = $175&255;
  $178 = $node;
  $179 = $0;
  $180 = (($179) + 5208|0);
  $181 = (($180) + ($178)|0);
  HEAP8[$181>>0] = $177;
  $182 = $node;
  $183 = $182&65535;
  $184 = $m;
  $185 = $tree;
  $186 = (($185) + ($184<<2)|0);
  $187 = (($186) + 2|0);
  HEAP16[$187>>1] = $183;
  $188 = $n;
  $189 = $tree;
  $190 = (($189) + ($188<<2)|0);
  $191 = (($190) + 2|0);
  HEAP16[$191>>1] = $183;
  $192 = $node;
  $193 = (($192) + 1)|0;
  $node = $193;
  $194 = $0;
  $195 = (($194) + 2908|0);
  $196 = (($195) + 4|0);
  HEAP32[$196>>2] = $192;
  $197 = $0;
  $198 = $tree;
  _pqdownheap($197,$198,1);
  $199 = $0;
  $200 = (($199) + 5200|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($201|0)>=(2);
  if (!($202)) {
   break;
  }
 }
 $203 = $0;
 $204 = (($203) + 2908|0);
 $205 = (($204) + 4|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = $0;
 $208 = (($207) + 5204|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = (($209) + -1)|0;
 HEAP32[$208>>2] = $210;
 $211 = $0;
 $212 = (($211) + 2908|0);
 $213 = (($212) + ($210<<2)|0);
 HEAP32[$213>>2] = $206;
 $214 = $0;
 $215 = $1;
 _gen_bitlen($214,$215);
 $216 = $tree;
 $217 = $max_code;
 $218 = $0;
 $219 = (($218) + 2876|0);
 _gen_codes($216,$217,$219);
 STACKTOP = sp;return;
}
function _build_bl_tree($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max_blindex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 148|0);
 $4 = $0;
 $5 = (($4) + 2840|0);
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _scan_tree($1,$3,$7);
 $8 = $0;
 $9 = $0;
 $10 = (($9) + 2440|0);
 $11 = $0;
 $12 = (($11) + 2852|0);
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 _scan_tree($8,$10,$14);
 $15 = $0;
 $16 = $0;
 $17 = (($16) + 2864|0);
 _build_tree($15,$17);
 $max_blindex = 18;
 while(1) {
  $18 = $max_blindex;
  $19 = ($18|0)>=(3);
  if (!($19)) {
   break;
  }
  $20 = $max_blindex;
  $21 = (22168 + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $0;
  $25 = (($24) + 2684|0);
  $26 = (($25) + ($23<<2)|0);
  $27 = (($26) + 2|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  $30 = ($29|0)!=(0);
  if ($30) {
   label = 4;
   break;
  }
  $31 = $max_blindex;
  $32 = (($31) + -1)|0;
  $max_blindex = $32;
 }
 if ((label|0) == 4) {
 }
 $33 = $max_blindex;
 $34 = (($33) + 1)|0;
 $35 = ($34*3)|0;
 $36 = (($35) + 5)|0;
 $37 = (($36) + 5)|0;
 $38 = (($37) + 4)|0;
 $39 = $0;
 $40 = (($39) + 5800|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($38))|0;
 HEAP32[$40>>2] = $42;
 $43 = $max_blindex;
 STACKTOP = sp;return ($43|0);
}
function _compress_block($s,$ltree,$dtree) {
 $s = $s|0;
 $ltree = $ltree|0;
 $dtree = $dtree|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code = 0;
 var $dist = 0, $extra = 0, $lc = 0, $len = 0, $len1 = 0, $len3 = 0, $len5 = 0, $len7 = 0, $len9 = 0, $lx = 0, $val = 0, $val10 = 0, $val2 = 0, $val4 = 0, $val6 = 0, $val8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $ltree;
 $2 = $dtree;
 $lx = 0;
 $3 = $0;
 $4 = (($3) + 5792|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  while(1) {
   $7 = $lx;
   $8 = $0;
   $9 = (($8) + 5796|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + ($7<<1)|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12&65535;
   $dist = $13;
   $14 = $lx;
   $15 = (($14) + 1)|0;
   $lx = $15;
   $16 = $0;
   $17 = (($16) + 5784|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($14)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $lc = $21;
   $22 = $dist;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = $lc;
    $25 = $1;
    $26 = (($25) + ($24<<2)|0);
    $27 = (($26) + 2|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28&65535;
    $len = $29;
    $30 = $0;
    $31 = (($30) + 5820|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $len;
    $34 = (16 - ($33))|0;
    $35 = ($32|0)>($34|0);
    if ($35) {
     $36 = $lc;
     $37 = $1;
     $38 = (($37) + ($36<<2)|0);
     $39 = HEAP16[$38>>1]|0;
     $40 = $39&65535;
     $val = $40;
     $41 = $val;
     $42 = $41&65535;
     $43 = $42&65535;
     $44 = $0;
     $45 = (($44) + 5820|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $43 << $46;
     $48 = $0;
     $49 = (($48) + 5816|0);
     $50 = HEAP16[$49>>1]|0;
     $51 = $50&65535;
     $52 = $51 | $47;
     $53 = $52&65535;
     HEAP16[$49>>1] = $53;
     $54 = $0;
     $55 = (($54) + 5816|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56&65535;
     $58 = $57 & 255;
     $59 = $58&255;
     $60 = $0;
     $61 = (($60) + 20|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($62) + 1)|0;
     HEAP32[$61>>2] = $63;
     $64 = $0;
     $65 = (($64) + 8|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (($66) + ($62)|0);
     HEAP8[$67>>0] = $59;
     $68 = $0;
     $69 = (($68) + 5816|0);
     $70 = HEAP16[$69>>1]|0;
     $71 = $70&65535;
     $72 = $71 >> 8;
     $73 = $72&255;
     $74 = $0;
     $75 = (($74) + 20|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) + 1)|0;
     HEAP32[$75>>2] = $77;
     $78 = $0;
     $79 = (($78) + 8|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (($80) + ($76)|0);
     HEAP8[$81>>0] = $73;
     $82 = $val;
     $83 = $82&65535;
     $84 = $83&65535;
     $85 = $0;
     $86 = (($85) + 5820|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (16 - ($87))|0;
     $89 = $84 >> $88;
     $90 = $89&65535;
     $91 = $0;
     $92 = (($91) + 5816|0);
     HEAP16[$92>>1] = $90;
     $93 = $len;
     $94 = (($93) - 16)|0;
     $95 = $0;
     $96 = (($95) + 5820|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) + ($94))|0;
     HEAP32[$96>>2] = $98;
    } else {
     $99 = $lc;
     $100 = $1;
     $101 = (($100) + ($99<<2)|0);
     $102 = HEAP16[$101>>1]|0;
     $103 = $102&65535;
     $104 = $0;
     $105 = (($104) + 5820|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $103 << $106;
     $108 = $0;
     $109 = (($108) + 5816|0);
     $110 = HEAP16[$109>>1]|0;
     $111 = $110&65535;
     $112 = $111 | $107;
     $113 = $112&65535;
     HEAP16[$109>>1] = $113;
     $114 = $len;
     $115 = $0;
     $116 = (($115) + 5820|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = (($117) + ($114))|0;
     HEAP32[$116>>2] = $118;
    }
   } else {
    $119 = $lc;
    $120 = (20088 + ($119)|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&255;
    $code = $122;
    $123 = $code;
    $124 = (($123) + 256)|0;
    $125 = (($124) + 1)|0;
    $126 = $1;
    $127 = (($126) + ($125<<2)|0);
    $128 = (($127) + 2|0);
    $129 = HEAP16[$128>>1]|0;
    $130 = $129&65535;
    $len1 = $130;
    $131 = $0;
    $132 = (($131) + 5820|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $len1;
    $135 = (16 - ($134))|0;
    $136 = ($133|0)>($135|0);
    if ($136) {
     $137 = $code;
     $138 = (($137) + 256)|0;
     $139 = (($138) + 1)|0;
     $140 = $1;
     $141 = (($140) + ($139<<2)|0);
     $142 = HEAP16[$141>>1]|0;
     $143 = $142&65535;
     $val2 = $143;
     $144 = $val2;
     $145 = $144&65535;
     $146 = $145&65535;
     $147 = $0;
     $148 = (($147) + 5820|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = $146 << $149;
     $151 = $0;
     $152 = (($151) + 5816|0);
     $153 = HEAP16[$152>>1]|0;
     $154 = $153&65535;
     $155 = $154 | $150;
     $156 = $155&65535;
     HEAP16[$152>>1] = $156;
     $157 = $0;
     $158 = (($157) + 5816|0);
     $159 = HEAP16[$158>>1]|0;
     $160 = $159&65535;
     $161 = $160 & 255;
     $162 = $161&255;
     $163 = $0;
     $164 = (($163) + 20|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (($165) + 1)|0;
     HEAP32[$164>>2] = $166;
     $167 = $0;
     $168 = (($167) + 8|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = (($169) + ($165)|0);
     HEAP8[$170>>0] = $162;
     $171 = $0;
     $172 = (($171) + 5816|0);
     $173 = HEAP16[$172>>1]|0;
     $174 = $173&65535;
     $175 = $174 >> 8;
     $176 = $175&255;
     $177 = $0;
     $178 = (($177) + 20|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = (($179) + 1)|0;
     HEAP32[$178>>2] = $180;
     $181 = $0;
     $182 = (($181) + 8|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (($183) + ($179)|0);
     HEAP8[$184>>0] = $176;
     $185 = $val2;
     $186 = $185&65535;
     $187 = $186&65535;
     $188 = $0;
     $189 = (($188) + 5820|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = (16 - ($190))|0;
     $192 = $187 >> $191;
     $193 = $192&65535;
     $194 = $0;
     $195 = (($194) + 5816|0);
     HEAP16[$195>>1] = $193;
     $196 = $len1;
     $197 = (($196) - 16)|0;
     $198 = $0;
     $199 = (($198) + 5820|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($200) + ($197))|0;
     HEAP32[$199>>2] = $201;
    } else {
     $202 = $code;
     $203 = (($202) + 256)|0;
     $204 = (($203) + 1)|0;
     $205 = $1;
     $206 = (($205) + ($204<<2)|0);
     $207 = HEAP16[$206>>1]|0;
     $208 = $207&65535;
     $209 = $0;
     $210 = (($209) + 5820|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $208 << $211;
     $213 = $0;
     $214 = (($213) + 5816|0);
     $215 = HEAP16[$214>>1]|0;
     $216 = $215&65535;
     $217 = $216 | $212;
     $218 = $217&65535;
     HEAP16[$214>>1] = $218;
     $219 = $len1;
     $220 = $0;
     $221 = (($220) + 5820|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = (($222) + ($219))|0;
     HEAP32[$221>>2] = $223;
    }
    $224 = $code;
    $225 = (21688 + ($224<<2)|0);
    $226 = HEAP32[$225>>2]|0;
    $extra = $226;
    $227 = $extra;
    $228 = ($227|0)!=(0);
    if ($228) {
     $229 = $code;
     $230 = (21808 + ($229<<2)|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = $lc;
     $233 = (($232) - ($231))|0;
     $lc = $233;
     $234 = $extra;
     $len3 = $234;
     $235 = $0;
     $236 = (($235) + 5820|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = $len3;
     $239 = (16 - ($238))|0;
     $240 = ($237|0)>($239|0);
     if ($240) {
      $241 = $lc;
      $val4 = $241;
      $242 = $val4;
      $243 = $242&65535;
      $244 = $243&65535;
      $245 = $0;
      $246 = (($245) + 5820|0);
      $247 = HEAP32[$246>>2]|0;
      $248 = $244 << $247;
      $249 = $0;
      $250 = (($249) + 5816|0);
      $251 = HEAP16[$250>>1]|0;
      $252 = $251&65535;
      $253 = $252 | $248;
      $254 = $253&65535;
      HEAP16[$250>>1] = $254;
      $255 = $0;
      $256 = (($255) + 5816|0);
      $257 = HEAP16[$256>>1]|0;
      $258 = $257&65535;
      $259 = $258 & 255;
      $260 = $259&255;
      $261 = $0;
      $262 = (($261) + 20|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = (($263) + 1)|0;
      HEAP32[$262>>2] = $264;
      $265 = $0;
      $266 = (($265) + 8|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = (($267) + ($263)|0);
      HEAP8[$268>>0] = $260;
      $269 = $0;
      $270 = (($269) + 5816|0);
      $271 = HEAP16[$270>>1]|0;
      $272 = $271&65535;
      $273 = $272 >> 8;
      $274 = $273&255;
      $275 = $0;
      $276 = (($275) + 20|0);
      $277 = HEAP32[$276>>2]|0;
      $278 = (($277) + 1)|0;
      HEAP32[$276>>2] = $278;
      $279 = $0;
      $280 = (($279) + 8|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = (($281) + ($277)|0);
      HEAP8[$282>>0] = $274;
      $283 = $val4;
      $284 = $283&65535;
      $285 = $284&65535;
      $286 = $0;
      $287 = (($286) + 5820|0);
      $288 = HEAP32[$287>>2]|0;
      $289 = (16 - ($288))|0;
      $290 = $285 >> $289;
      $291 = $290&65535;
      $292 = $0;
      $293 = (($292) + 5816|0);
      HEAP16[$293>>1] = $291;
      $294 = $len3;
      $295 = (($294) - 16)|0;
      $296 = $0;
      $297 = (($296) + 5820|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = (($298) + ($295))|0;
      HEAP32[$297>>2] = $299;
     } else {
      $300 = $lc;
      $301 = $300&65535;
      $302 = $301&65535;
      $303 = $0;
      $304 = (($303) + 5820|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = $302 << $305;
      $307 = $0;
      $308 = (($307) + 5816|0);
      $309 = HEAP16[$308>>1]|0;
      $310 = $309&65535;
      $311 = $310 | $306;
      $312 = $311&65535;
      HEAP16[$308>>1] = $312;
      $313 = $len3;
      $314 = $0;
      $315 = (($314) + 5820|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = (($316) + ($313))|0;
      HEAP32[$315>>2] = $317;
     }
    }
    $318 = $dist;
    $319 = (($318) + -1)|0;
    $dist = $319;
    $320 = $dist;
    $321 = ($320>>>0)<(256);
    if ($321) {
     $322 = $dist;
     $323 = (19576 + ($322)|0);
     $324 = HEAP8[$323>>0]|0;
     $325 = $324&255;
     $332 = $325;
    } else {
     $326 = $dist;
     $327 = $326 >>> 7;
     $328 = (256 + ($327))|0;
     $329 = (19576 + ($328)|0);
     $330 = HEAP8[$329>>0]|0;
     $331 = $330&255;
     $332 = $331;
    }
    $code = $332;
    $333 = $code;
    $334 = $2;
    $335 = (($334) + ($333<<2)|0);
    $336 = (($335) + 2|0);
    $337 = HEAP16[$336>>1]|0;
    $338 = $337&65535;
    $len5 = $338;
    $339 = $0;
    $340 = (($339) + 5820|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = $len5;
    $343 = (16 - ($342))|0;
    $344 = ($341|0)>($343|0);
    if ($344) {
     $345 = $code;
     $346 = $2;
     $347 = (($346) + ($345<<2)|0);
     $348 = HEAP16[$347>>1]|0;
     $349 = $348&65535;
     $val6 = $349;
     $350 = $val6;
     $351 = $350&65535;
     $352 = $351&65535;
     $353 = $0;
     $354 = (($353) + 5820|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = $352 << $355;
     $357 = $0;
     $358 = (($357) + 5816|0);
     $359 = HEAP16[$358>>1]|0;
     $360 = $359&65535;
     $361 = $360 | $356;
     $362 = $361&65535;
     HEAP16[$358>>1] = $362;
     $363 = $0;
     $364 = (($363) + 5816|0);
     $365 = HEAP16[$364>>1]|0;
     $366 = $365&65535;
     $367 = $366 & 255;
     $368 = $367&255;
     $369 = $0;
     $370 = (($369) + 20|0);
     $371 = HEAP32[$370>>2]|0;
     $372 = (($371) + 1)|0;
     HEAP32[$370>>2] = $372;
     $373 = $0;
     $374 = (($373) + 8|0);
     $375 = HEAP32[$374>>2]|0;
     $376 = (($375) + ($371)|0);
     HEAP8[$376>>0] = $368;
     $377 = $0;
     $378 = (($377) + 5816|0);
     $379 = HEAP16[$378>>1]|0;
     $380 = $379&65535;
     $381 = $380 >> 8;
     $382 = $381&255;
     $383 = $0;
     $384 = (($383) + 20|0);
     $385 = HEAP32[$384>>2]|0;
     $386 = (($385) + 1)|0;
     HEAP32[$384>>2] = $386;
     $387 = $0;
     $388 = (($387) + 8|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = (($389) + ($385)|0);
     HEAP8[$390>>0] = $382;
     $391 = $val6;
     $392 = $391&65535;
     $393 = $392&65535;
     $394 = $0;
     $395 = (($394) + 5820|0);
     $396 = HEAP32[$395>>2]|0;
     $397 = (16 - ($396))|0;
     $398 = $393 >> $397;
     $399 = $398&65535;
     $400 = $0;
     $401 = (($400) + 5816|0);
     HEAP16[$401>>1] = $399;
     $402 = $len5;
     $403 = (($402) - 16)|0;
     $404 = $0;
     $405 = (($404) + 5820|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = (($406) + ($403))|0;
     HEAP32[$405>>2] = $407;
    } else {
     $408 = $code;
     $409 = $2;
     $410 = (($409) + ($408<<2)|0);
     $411 = HEAP16[$410>>1]|0;
     $412 = $411&65535;
     $413 = $0;
     $414 = (($413) + 5820|0);
     $415 = HEAP32[$414>>2]|0;
     $416 = $412 << $415;
     $417 = $0;
     $418 = (($417) + 5816|0);
     $419 = HEAP16[$418>>1]|0;
     $420 = $419&65535;
     $421 = $420 | $416;
     $422 = $421&65535;
     HEAP16[$418>>1] = $422;
     $423 = $len5;
     $424 = $0;
     $425 = (($424) + 5820|0);
     $426 = HEAP32[$425>>2]|0;
     $427 = (($426) + ($423))|0;
     HEAP32[$425>>2] = $427;
    }
    $428 = $code;
    $429 = (21928 + ($428<<2)|0);
    $430 = HEAP32[$429>>2]|0;
    $extra = $430;
    $431 = $extra;
    $432 = ($431|0)!=(0);
    if ($432) {
     $433 = $code;
     $434 = (22048 + ($433<<2)|0);
     $435 = HEAP32[$434>>2]|0;
     $436 = $dist;
     $437 = (($436) - ($435))|0;
     $dist = $437;
     $438 = $extra;
     $len7 = $438;
     $439 = $0;
     $440 = (($439) + 5820|0);
     $441 = HEAP32[$440>>2]|0;
     $442 = $len7;
     $443 = (16 - ($442))|0;
     $444 = ($441|0)>($443|0);
     if ($444) {
      $445 = $dist;
      $val8 = $445;
      $446 = $val8;
      $447 = $446&65535;
      $448 = $447&65535;
      $449 = $0;
      $450 = (($449) + 5820|0);
      $451 = HEAP32[$450>>2]|0;
      $452 = $448 << $451;
      $453 = $0;
      $454 = (($453) + 5816|0);
      $455 = HEAP16[$454>>1]|0;
      $456 = $455&65535;
      $457 = $456 | $452;
      $458 = $457&65535;
      HEAP16[$454>>1] = $458;
      $459 = $0;
      $460 = (($459) + 5816|0);
      $461 = HEAP16[$460>>1]|0;
      $462 = $461&65535;
      $463 = $462 & 255;
      $464 = $463&255;
      $465 = $0;
      $466 = (($465) + 20|0);
      $467 = HEAP32[$466>>2]|0;
      $468 = (($467) + 1)|0;
      HEAP32[$466>>2] = $468;
      $469 = $0;
      $470 = (($469) + 8|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = (($471) + ($467)|0);
      HEAP8[$472>>0] = $464;
      $473 = $0;
      $474 = (($473) + 5816|0);
      $475 = HEAP16[$474>>1]|0;
      $476 = $475&65535;
      $477 = $476 >> 8;
      $478 = $477&255;
      $479 = $0;
      $480 = (($479) + 20|0);
      $481 = HEAP32[$480>>2]|0;
      $482 = (($481) + 1)|0;
      HEAP32[$480>>2] = $482;
      $483 = $0;
      $484 = (($483) + 8|0);
      $485 = HEAP32[$484>>2]|0;
      $486 = (($485) + ($481)|0);
      HEAP8[$486>>0] = $478;
      $487 = $val8;
      $488 = $487&65535;
      $489 = $488&65535;
      $490 = $0;
      $491 = (($490) + 5820|0);
      $492 = HEAP32[$491>>2]|0;
      $493 = (16 - ($492))|0;
      $494 = $489 >> $493;
      $495 = $494&65535;
      $496 = $0;
      $497 = (($496) + 5816|0);
      HEAP16[$497>>1] = $495;
      $498 = $len7;
      $499 = (($498) - 16)|0;
      $500 = $0;
      $501 = (($500) + 5820|0);
      $502 = HEAP32[$501>>2]|0;
      $503 = (($502) + ($499))|0;
      HEAP32[$501>>2] = $503;
     } else {
      $504 = $dist;
      $505 = $504&65535;
      $506 = $505&65535;
      $507 = $0;
      $508 = (($507) + 5820|0);
      $509 = HEAP32[$508>>2]|0;
      $510 = $506 << $509;
      $511 = $0;
      $512 = (($511) + 5816|0);
      $513 = HEAP16[$512>>1]|0;
      $514 = $513&65535;
      $515 = $514 | $510;
      $516 = $515&65535;
      HEAP16[$512>>1] = $516;
      $517 = $len7;
      $518 = $0;
      $519 = (($518) + 5820|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = (($520) + ($517))|0;
      HEAP32[$519>>2] = $521;
     }
    }
   }
   $522 = $lx;
   $523 = $0;
   $524 = (($523) + 5792|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = ($522>>>0)<($525>>>0);
   if (!($526)) {
    break;
   }
  }
 }
 $527 = $1;
 $528 = (($527) + 1024|0);
 $529 = (($528) + 2|0);
 $530 = HEAP16[$529>>1]|0;
 $531 = $530&65535;
 $len9 = $531;
 $532 = $0;
 $533 = (($532) + 5820|0);
 $534 = HEAP32[$533>>2]|0;
 $535 = $len9;
 $536 = (16 - ($535))|0;
 $537 = ($534|0)>($536|0);
 if ($537) {
  $538 = $1;
  $539 = (($538) + 1024|0);
  $540 = HEAP16[$539>>1]|0;
  $541 = $540&65535;
  $val10 = $541;
  $542 = $val10;
  $543 = $542&65535;
  $544 = $543&65535;
  $545 = $0;
  $546 = (($545) + 5820|0);
  $547 = HEAP32[$546>>2]|0;
  $548 = $544 << $547;
  $549 = $0;
  $550 = (($549) + 5816|0);
  $551 = HEAP16[$550>>1]|0;
  $552 = $551&65535;
  $553 = $552 | $548;
  $554 = $553&65535;
  HEAP16[$550>>1] = $554;
  $555 = $0;
  $556 = (($555) + 5816|0);
  $557 = HEAP16[$556>>1]|0;
  $558 = $557&65535;
  $559 = $558 & 255;
  $560 = $559&255;
  $561 = $0;
  $562 = (($561) + 20|0);
  $563 = HEAP32[$562>>2]|0;
  $564 = (($563) + 1)|0;
  HEAP32[$562>>2] = $564;
  $565 = $0;
  $566 = (($565) + 8|0);
  $567 = HEAP32[$566>>2]|0;
  $568 = (($567) + ($563)|0);
  HEAP8[$568>>0] = $560;
  $569 = $0;
  $570 = (($569) + 5816|0);
  $571 = HEAP16[$570>>1]|0;
  $572 = $571&65535;
  $573 = $572 >> 8;
  $574 = $573&255;
  $575 = $0;
  $576 = (($575) + 20|0);
  $577 = HEAP32[$576>>2]|0;
  $578 = (($577) + 1)|0;
  HEAP32[$576>>2] = $578;
  $579 = $0;
  $580 = (($579) + 8|0);
  $581 = HEAP32[$580>>2]|0;
  $582 = (($581) + ($577)|0);
  HEAP8[$582>>0] = $574;
  $583 = $val10;
  $584 = $583&65535;
  $585 = $584&65535;
  $586 = $0;
  $587 = (($586) + 5820|0);
  $588 = HEAP32[$587>>2]|0;
  $589 = (16 - ($588))|0;
  $590 = $585 >> $589;
  $591 = $590&65535;
  $592 = $0;
  $593 = (($592) + 5816|0);
  HEAP16[$593>>1] = $591;
  $594 = $len9;
  $595 = (($594) - 16)|0;
  $596 = $0;
  $597 = (($596) + 5820|0);
  $598 = HEAP32[$597>>2]|0;
  $599 = (($598) + ($595))|0;
  HEAP32[$597>>2] = $599;
  STACKTOP = sp;return;
 } else {
  $600 = $1;
  $601 = (($600) + 1024|0);
  $602 = HEAP16[$601>>1]|0;
  $603 = $602&65535;
  $604 = $0;
  $605 = (($604) + 5820|0);
  $606 = HEAP32[$605>>2]|0;
  $607 = $603 << $606;
  $608 = $0;
  $609 = (($608) + 5816|0);
  $610 = HEAP16[$609>>1]|0;
  $611 = $610&65535;
  $612 = $611 | $607;
  $613 = $612&65535;
  HEAP16[$609>>1] = $613;
  $614 = $len9;
  $615 = $0;
  $616 = (($615) + 5820|0);
  $617 = HEAP32[$616>>2]|0;
  $618 = (($617) + ($614))|0;
  HEAP32[$616>>2] = $618;
  STACKTOP = sp;return;
 }
}
function _send_all_trees($s,$lcodes,$dcodes,$blcodes) {
 $s = $s|0;
 $lcodes = $lcodes|0;
 $dcodes = $dcodes|0;
 $blcodes = $blcodes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $len1 = 0, $len3 = 0, $len5 = 0, $rank = 0, $val = 0, $val2 = 0;
 var $val4 = 0, $val6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $lcodes;
 $2 = $dcodes;
 $3 = $blcodes;
 $len = 5;
 $4 = $0;
 $5 = (($4) + 5820|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $len;
 $8 = (16 - ($7))|0;
 $9 = ($6|0)>($8|0);
 if ($9) {
  $10 = $1;
  $11 = (($10) - 257)|0;
  $val = $11;
  $12 = $val;
  $13 = $12&65535;
  $14 = $13&65535;
  $15 = $0;
  $16 = (($15) + 5820|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $14 << $17;
  $19 = $0;
  $20 = (($19) + 5816|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 | $18;
  $24 = $23&65535;
  HEAP16[$20>>1] = $24;
  $25 = $0;
  $26 = (($25) + 5816|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = $28 & 255;
  $30 = $29&255;
  $31 = $0;
  $32 = (($31) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
  $35 = $0;
  $36 = (($35) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($33)|0);
  HEAP8[$38>>0] = $30;
  $39 = $0;
  $40 = (($39) + 5816|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $42 >> 8;
  $44 = $43&255;
  $45 = $0;
  $46 = (($45) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$46>>2] = $48;
  $49 = $0;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($47)|0);
  HEAP8[$52>>0] = $44;
  $53 = $val;
  $54 = $53&65535;
  $55 = $54&65535;
  $56 = $0;
  $57 = (($56) + 5820|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (16 - ($58))|0;
  $60 = $55 >> $59;
  $61 = $60&65535;
  $62 = $0;
  $63 = (($62) + 5816|0);
  HEAP16[$63>>1] = $61;
  $64 = $len;
  $65 = (($64) - 16)|0;
  $66 = $0;
  $67 = (($66) + 5820|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($65))|0;
  HEAP32[$67>>2] = $69;
 } else {
  $70 = $1;
  $71 = (($70) - 257)|0;
  $72 = $71&65535;
  $73 = $72&65535;
  $74 = $0;
  $75 = (($74) + 5820|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $73 << $76;
  $78 = $0;
  $79 = (($78) + 5816|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80&65535;
  $82 = $81 | $77;
  $83 = $82&65535;
  HEAP16[$79>>1] = $83;
  $84 = $len;
  $85 = $0;
  $86 = (($85) + 5820|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + ($84))|0;
  HEAP32[$86>>2] = $88;
 }
 $len1 = 5;
 $89 = $0;
 $90 = (($89) + 5820|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $len1;
 $93 = (16 - ($92))|0;
 $94 = ($91|0)>($93|0);
 if ($94) {
  $95 = $2;
  $96 = (($95) - 1)|0;
  $val2 = $96;
  $97 = $val2;
  $98 = $97&65535;
  $99 = $98&65535;
  $100 = $0;
  $101 = (($100) + 5820|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $99 << $102;
  $104 = $0;
  $105 = (($104) + 5816|0);
  $106 = HEAP16[$105>>1]|0;
  $107 = $106&65535;
  $108 = $107 | $103;
  $109 = $108&65535;
  HEAP16[$105>>1] = $109;
  $110 = $0;
  $111 = (($110) + 5816|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112&65535;
  $114 = $113 & 255;
  $115 = $114&255;
  $116 = $0;
  $117 = (($116) + 20|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + 1)|0;
  HEAP32[$117>>2] = $119;
  $120 = $0;
  $121 = (($120) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + ($118)|0);
  HEAP8[$123>>0] = $115;
  $124 = $0;
  $125 = (($124) + 5816|0);
  $126 = HEAP16[$125>>1]|0;
  $127 = $126&65535;
  $128 = $127 >> 8;
  $129 = $128&255;
  $130 = $0;
  $131 = (($130) + 20|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + 1)|0;
  HEAP32[$131>>2] = $133;
  $134 = $0;
  $135 = (($134) + 8|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($136) + ($132)|0);
  HEAP8[$137>>0] = $129;
  $138 = $val2;
  $139 = $138&65535;
  $140 = $139&65535;
  $141 = $0;
  $142 = (($141) + 5820|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (16 - ($143))|0;
  $145 = $140 >> $144;
  $146 = $145&65535;
  $147 = $0;
  $148 = (($147) + 5816|0);
  HEAP16[$148>>1] = $146;
  $149 = $len1;
  $150 = (($149) - 16)|0;
  $151 = $0;
  $152 = (($151) + 5820|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + ($150))|0;
  HEAP32[$152>>2] = $154;
 } else {
  $155 = $2;
  $156 = (($155) - 1)|0;
  $157 = $156&65535;
  $158 = $157&65535;
  $159 = $0;
  $160 = (($159) + 5820|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $158 << $161;
  $163 = $0;
  $164 = (($163) + 5816|0);
  $165 = HEAP16[$164>>1]|0;
  $166 = $165&65535;
  $167 = $166 | $162;
  $168 = $167&65535;
  HEAP16[$164>>1] = $168;
  $169 = $len1;
  $170 = $0;
  $171 = (($170) + 5820|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + ($169))|0;
  HEAP32[$171>>2] = $173;
 }
 $len3 = 4;
 $174 = $0;
 $175 = (($174) + 5820|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $len3;
 $178 = (16 - ($177))|0;
 $179 = ($176|0)>($178|0);
 if ($179) {
  $180 = $3;
  $181 = (($180) - 4)|0;
  $val4 = $181;
  $182 = $val4;
  $183 = $182&65535;
  $184 = $183&65535;
  $185 = $0;
  $186 = (($185) + 5820|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = $184 << $187;
  $189 = $0;
  $190 = (($189) + 5816|0);
  $191 = HEAP16[$190>>1]|0;
  $192 = $191&65535;
  $193 = $192 | $188;
  $194 = $193&65535;
  HEAP16[$190>>1] = $194;
  $195 = $0;
  $196 = (($195) + 5816|0);
  $197 = HEAP16[$196>>1]|0;
  $198 = $197&65535;
  $199 = $198 & 255;
  $200 = $199&255;
  $201 = $0;
  $202 = (($201) + 20|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($203) + 1)|0;
  HEAP32[$202>>2] = $204;
  $205 = $0;
  $206 = (($205) + 8|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = (($207) + ($203)|0);
  HEAP8[$208>>0] = $200;
  $209 = $0;
  $210 = (($209) + 5816|0);
  $211 = HEAP16[$210>>1]|0;
  $212 = $211&65535;
  $213 = $212 >> 8;
  $214 = $213&255;
  $215 = $0;
  $216 = (($215) + 20|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($217) + 1)|0;
  HEAP32[$216>>2] = $218;
  $219 = $0;
  $220 = (($219) + 8|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($221) + ($217)|0);
  HEAP8[$222>>0] = $214;
  $223 = $val4;
  $224 = $223&65535;
  $225 = $224&65535;
  $226 = $0;
  $227 = (($226) + 5820|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = (16 - ($228))|0;
  $230 = $225 >> $229;
  $231 = $230&65535;
  $232 = $0;
  $233 = (($232) + 5816|0);
  HEAP16[$233>>1] = $231;
  $234 = $len3;
  $235 = (($234) - 16)|0;
  $236 = $0;
  $237 = (($236) + 5820|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($238) + ($235))|0;
  HEAP32[$237>>2] = $239;
 } else {
  $240 = $3;
  $241 = (($240) - 4)|0;
  $242 = $241&65535;
  $243 = $242&65535;
  $244 = $0;
  $245 = (($244) + 5820|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $243 << $246;
  $248 = $0;
  $249 = (($248) + 5816|0);
  $250 = HEAP16[$249>>1]|0;
  $251 = $250&65535;
  $252 = $251 | $247;
  $253 = $252&65535;
  HEAP16[$249>>1] = $253;
  $254 = $len3;
  $255 = $0;
  $256 = (($255) + 5820|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (($257) + ($254))|0;
  HEAP32[$256>>2] = $258;
 }
 $rank = 0;
 while(1) {
  $259 = $rank;
  $260 = $3;
  $261 = ($259|0)<($260|0);
  if (!($261)) {
   break;
  }
  $len5 = 3;
  $262 = $0;
  $263 = (($262) + 5820|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = $len5;
  $266 = (16 - ($265))|0;
  $267 = ($264|0)>($266|0);
  if ($267) {
   $268 = $rank;
   $269 = (22168 + ($268)|0);
   $270 = HEAP8[$269>>0]|0;
   $271 = $270&255;
   $272 = $0;
   $273 = (($272) + 2684|0);
   $274 = (($273) + ($271<<2)|0);
   $275 = (($274) + 2|0);
   $276 = HEAP16[$275>>1]|0;
   $277 = $276&65535;
   $val6 = $277;
   $278 = $val6;
   $279 = $278&65535;
   $280 = $279&65535;
   $281 = $0;
   $282 = (($281) + 5820|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $280 << $283;
   $285 = $0;
   $286 = (($285) + 5816|0);
   $287 = HEAP16[$286>>1]|0;
   $288 = $287&65535;
   $289 = $288 | $284;
   $290 = $289&65535;
   HEAP16[$286>>1] = $290;
   $291 = $0;
   $292 = (($291) + 5816|0);
   $293 = HEAP16[$292>>1]|0;
   $294 = $293&65535;
   $295 = $294 & 255;
   $296 = $295&255;
   $297 = $0;
   $298 = (($297) + 20|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = (($299) + 1)|0;
   HEAP32[$298>>2] = $300;
   $301 = $0;
   $302 = (($301) + 8|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = (($303) + ($299)|0);
   HEAP8[$304>>0] = $296;
   $305 = $0;
   $306 = (($305) + 5816|0);
   $307 = HEAP16[$306>>1]|0;
   $308 = $307&65535;
   $309 = $308 >> 8;
   $310 = $309&255;
   $311 = $0;
   $312 = (($311) + 20|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = (($313) + 1)|0;
   HEAP32[$312>>2] = $314;
   $315 = $0;
   $316 = (($315) + 8|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = (($317) + ($313)|0);
   HEAP8[$318>>0] = $310;
   $319 = $val6;
   $320 = $319&65535;
   $321 = $320&65535;
   $322 = $0;
   $323 = (($322) + 5820|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = (16 - ($324))|0;
   $326 = $321 >> $325;
   $327 = $326&65535;
   $328 = $0;
   $329 = (($328) + 5816|0);
   HEAP16[$329>>1] = $327;
   $330 = $len5;
   $331 = (($330) - 16)|0;
   $332 = $0;
   $333 = (($332) + 5820|0);
   $334 = HEAP32[$333>>2]|0;
   $335 = (($334) + ($331))|0;
   HEAP32[$333>>2] = $335;
  } else {
   $336 = $rank;
   $337 = (22168 + ($336)|0);
   $338 = HEAP8[$337>>0]|0;
   $339 = $338&255;
   $340 = $0;
   $341 = (($340) + 2684|0);
   $342 = (($341) + ($339<<2)|0);
   $343 = (($342) + 2|0);
   $344 = HEAP16[$343>>1]|0;
   $345 = $344&65535;
   $346 = $0;
   $347 = (($346) + 5820|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = $345 << $348;
   $350 = $0;
   $351 = (($350) + 5816|0);
   $352 = HEAP16[$351>>1]|0;
   $353 = $352&65535;
   $354 = $353 | $349;
   $355 = $354&65535;
   HEAP16[$351>>1] = $355;
   $356 = $len5;
   $357 = $0;
   $358 = (($357) + 5820|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = (($359) + ($356))|0;
   HEAP32[$358>>2] = $360;
  }
  $361 = $rank;
  $362 = (($361) + 1)|0;
  $rank = $362;
 }
 $363 = $0;
 $364 = $0;
 $365 = (($364) + 148|0);
 $366 = $1;
 $367 = (($366) - 1)|0;
 _send_tree($363,$365,$367);
 $368 = $0;
 $369 = $0;
 $370 = (($369) + 2440|0);
 $371 = $2;
 $372 = (($371) - 1)|0;
 _send_tree($368,$370,$372);
 STACKTOP = sp;return;
}
function _bi_windup($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (($1) + 5820|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(8);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 5816|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = $8 & 255;
  $10 = $9&255;
  $11 = $0;
  $12 = (($11) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = $0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($13)|0);
  HEAP8[$18>>0] = $10;
  $19 = $0;
  $20 = (($19) + 5816|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 >> 8;
  $24 = $23&255;
  $25 = $0;
  $26 = (($25) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  $29 = $0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($27)|0);
  HEAP8[$32>>0] = $24;
  $49 = $0;
  $50 = (($49) + 5816|0);
  HEAP16[$50>>1] = 0;
  $51 = $0;
  $52 = (($51) + 5820|0);
  HEAP32[$52>>2] = 0;
  STACKTOP = sp;return;
 }
 $33 = $0;
 $34 = (($33) + 5820|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)>(0);
 if ($36) {
  $37 = $0;
  $38 = (($37) + 5816|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&255;
  $41 = $0;
  $42 = (($41) + 20|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$42>>2] = $44;
  $45 = $0;
  $46 = (($45) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($43)|0);
  HEAP8[$48>>0] = $40;
 }
 $49 = $0;
 $50 = (($49) + 5816|0);
 HEAP16[$50>>1] = 0;
 $51 = $0;
 $52 = (($51) + 5820|0);
 HEAP32[$52>>2] = 0;
 STACKTOP = sp;return;
}
function _pqdownheap($s,$tree,$k) {
 $s = $s|0;
 $tree = $tree|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $tree;
 $2 = $k;
 $3 = $2;
 $4 = $0;
 $5 = (($4) + 2908|0);
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $v = $7;
 $8 = $2;
 $9 = $8 << 1;
 $j = $9;
 while(1) {
  $10 = $j;
  $11 = $0;
  $12 = (($11) + 5200|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<=($13|0);
  if (!($14)) {
   label = 13;
   break;
  }
  $15 = $j;
  $16 = $0;
  $17 = (($16) + 5200|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  do {
   if ($19) {
    $20 = $j;
    $21 = (($20) + 1)|0;
    $22 = $0;
    $23 = (($22) + 2908|0);
    $24 = (($23) + ($21<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $1;
    $27 = (($26) + ($25<<2)|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28&65535;
    $30 = $j;
    $31 = $0;
    $32 = (($31) + 2908|0);
    $33 = (($32) + ($30<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $1;
    $36 = (($35) + ($34<<2)|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37&65535;
    $39 = ($29|0)<($38|0);
    if (!($39)) {
     $40 = $j;
     $41 = (($40) + 1)|0;
     $42 = $0;
     $43 = (($42) + 2908|0);
     $44 = (($43) + ($41<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = $1;
     $47 = (($46) + ($45<<2)|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48&65535;
     $50 = $j;
     $51 = $0;
     $52 = (($51) + 2908|0);
     $53 = (($52) + ($50<<2)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $1;
     $56 = (($55) + ($54<<2)|0);
     $57 = HEAP16[$56>>1]|0;
     $58 = $57&65535;
     $59 = ($49|0)==($58|0);
     if (!($59)) {
      break;
     }
     $60 = $j;
     $61 = (($60) + 1)|0;
     $62 = $0;
     $63 = (($62) + 2908|0);
     $64 = (($63) + ($61<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $0;
     $67 = (($66) + 5208|0);
     $68 = (($67) + ($65)|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $71 = $j;
     $72 = $0;
     $73 = (($72) + 2908|0);
     $74 = (($73) + ($71<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $0;
     $77 = (($76) + 5208|0);
     $78 = (($77) + ($75)|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79&255;
     $81 = ($70|0)<=($80|0);
     if (!($81)) {
      break;
     }
    }
    $82 = $j;
    $83 = (($82) + 1)|0;
    $j = $83;
   }
  } while(0);
  $84 = $v;
  $85 = $1;
  $86 = (($85) + ($84<<2)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87&65535;
  $89 = $j;
  $90 = $0;
  $91 = (($90) + 2908|0);
  $92 = (($91) + ($89<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $1;
  $95 = (($94) + ($93<<2)|0);
  $96 = HEAP16[$95>>1]|0;
  $97 = $96&65535;
  $98 = ($88|0)<($97|0);
  if ($98) {
   break;
  }
  $99 = $v;
  $100 = $1;
  $101 = (($100) + ($99<<2)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102&65535;
  $104 = $j;
  $105 = $0;
  $106 = (($105) + 2908|0);
  $107 = (($106) + ($104<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $1;
  $110 = (($109) + ($108<<2)|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111&65535;
  $113 = ($103|0)==($112|0);
  if ($113) {
   $114 = $v;
   $115 = $0;
   $116 = (($115) + 5208|0);
   $117 = (($116) + ($114)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = $j;
   $121 = $0;
   $122 = (($121) + 2908|0);
   $123 = (($122) + ($120<<2)|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $0;
   $126 = (($125) + 5208|0);
   $127 = (($126) + ($124)|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $128&255;
   $130 = ($119|0)<=($129|0);
   if ($130) {
    break;
   }
  }
  $131 = $j;
  $132 = $0;
  $133 = (($132) + 2908|0);
  $134 = (($133) + ($131<<2)|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $2;
  $137 = $0;
  $138 = (($137) + 2908|0);
  $139 = (($138) + ($136<<2)|0);
  HEAP32[$139>>2] = $135;
  $140 = $j;
  $2 = $140;
  $141 = $j;
  $142 = $141 << 1;
  $j = $142;
 }
 if ((label|0) == 13) {
  $143 = $v;
  $144 = $2;
  $145 = $0;
  $146 = (($145) + 2908|0);
  $147 = (($146) + ($144<<2)|0);
  HEAP32[$147>>2] = $143;
  STACKTOP = sp;return;
 }
 $143 = $v;
 $144 = $2;
 $145 = $0;
 $146 = (($145) + 2908|0);
 $147 = (($146) + ($144<<2)|0);
 HEAP32[$147>>2] = $143;
 STACKTOP = sp;return;
}
function _gen_bitlen($s,$desc) {
 $s = $s|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base = 0, $bits = 0, $extra = 0, $f = 0, $h = 0, $m = 0, $max_code = 0, $max_length = 0, $n = 0, $overflow = 0, $stree = 0, $tree = 0, $xbits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $desc;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $tree = $3;
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $max_code = $6;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $stree = $10;
 $11 = $1;
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $extra = $15;
 $16 = $1;
 $17 = (($16) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $base = $20;
 $21 = $1;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $max_length = $25;
 $overflow = 0;
 $bits = 0;
 while(1) {
  $26 = $bits;
  $27 = ($26|0)<=(15);
  if (!($27)) {
   break;
  }
  $28 = $bits;
  $29 = $0;
  $30 = (($29) + 2876|0);
  $31 = (($30) + ($28<<1)|0);
  HEAP16[$31>>1] = 0;
  $32 = $bits;
  $33 = (($32) + 1)|0;
  $bits = $33;
 }
 $34 = $0;
 $35 = (($34) + 5204|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $0;
 $38 = (($37) + 2908|0);
 $39 = (($38) + ($36<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $tree;
 $42 = (($41) + ($40<<2)|0);
 $43 = (($42) + 2|0);
 HEAP16[$43>>1] = 0;
 $44 = $0;
 $45 = (($44) + 5204|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 1)|0;
 $h = $47;
 while(1) {
  $48 = $h;
  $49 = ($48|0)<(573);
  if (!($49)) {
   break;
  }
  $50 = $h;
  $51 = $0;
  $52 = (($51) + 2908|0);
  $53 = (($52) + ($50<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $n = $54;
  $55 = $n;
  $56 = $tree;
  $57 = (($56) + ($55<<2)|0);
  $58 = (($57) + 2|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59&65535;
  $61 = $tree;
  $62 = (($61) + ($60<<2)|0);
  $63 = (($62) + 2|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64&65535;
  $66 = (($65) + 1)|0;
  $bits = $66;
  $67 = $bits;
  $68 = $max_length;
  $69 = ($67|0)>($68|0);
  if ($69) {
   $70 = $max_length;
   $bits = $70;
   $71 = $overflow;
   $72 = (($71) + 1)|0;
   $overflow = $72;
  }
  $73 = $bits;
  $74 = $73&65535;
  $75 = $n;
  $76 = $tree;
  $77 = (($76) + ($75<<2)|0);
  $78 = (($77) + 2|0);
  HEAP16[$78>>1] = $74;
  $79 = $n;
  $80 = $max_code;
  $81 = ($79|0)>($80|0);
  if ($81) {
  } else {
   $82 = $bits;
   $83 = $0;
   $84 = (($83) + 2876|0);
   $85 = (($84) + ($82<<1)|0);
   $86 = HEAP16[$85>>1]|0;
   $87 = (($86) + 1)<<16>>16;
   HEAP16[$85>>1] = $87;
   $xbits = 0;
   $88 = $n;
   $89 = $base;
   $90 = ($88|0)>=($89|0);
   if ($90) {
    $91 = $n;
    $92 = $base;
    $93 = (($91) - ($92))|0;
    $94 = $extra;
    $95 = (($94) + ($93<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $xbits = $96;
   }
   $97 = $n;
   $98 = $tree;
   $99 = (($98) + ($97<<2)|0);
   $100 = HEAP16[$99>>1]|0;
   $f = $100;
   $101 = $f;
   $102 = $101&65535;
   $103 = $bits;
   $104 = $xbits;
   $105 = (($103) + ($104))|0;
   $106 = Math_imul($102, $105)|0;
   $107 = $0;
   $108 = (($107) + 5800|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + ($106))|0;
   HEAP32[$108>>2] = $110;
   $111 = $stree;
   $112 = ($111|0)!=(0|0);
   if ($112) {
    $113 = $f;
    $114 = $113&65535;
    $115 = $n;
    $116 = $stree;
    $117 = (($116) + ($115<<2)|0);
    $118 = (($117) + 2|0);
    $119 = HEAP16[$118>>1]|0;
    $120 = $119&65535;
    $121 = $xbits;
    $122 = (($120) + ($121))|0;
    $123 = Math_imul($114, $122)|0;
    $124 = $0;
    $125 = (($124) + 5804|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + ($123))|0;
    HEAP32[$125>>2] = $127;
   }
  }
  $128 = $h;
  $129 = (($128) + 1)|0;
  $h = $129;
 }
 $130 = $overflow;
 $131 = ($130|0)==(0);
 if ($131) {
  STACKTOP = sp;return;
 }
 while(1) {
  $132 = $max_length;
  $133 = (($132) - 1)|0;
  $bits = $133;
  while(1) {
   $134 = $bits;
   $135 = $0;
   $136 = (($135) + 2876|0);
   $137 = (($136) + ($134<<1)|0);
   $138 = HEAP16[$137>>1]|0;
   $139 = $138&65535;
   $140 = ($139|0)==(0);
   if (!($140)) {
    break;
   }
   $141 = $bits;
   $142 = (($141) + -1)|0;
   $bits = $142;
  }
  $143 = $bits;
  $144 = $0;
  $145 = (($144) + 2876|0);
  $146 = (($145) + ($143<<1)|0);
  $147 = HEAP16[$146>>1]|0;
  $148 = (($147) + -1)<<16>>16;
  HEAP16[$146>>1] = $148;
  $149 = $bits;
  $150 = (($149) + 1)|0;
  $151 = $0;
  $152 = (($151) + 2876|0);
  $153 = (($152) + ($150<<1)|0);
  $154 = HEAP16[$153>>1]|0;
  $155 = $154&65535;
  $156 = (($155) + 2)|0;
  $157 = $156&65535;
  HEAP16[$153>>1] = $157;
  $158 = $max_length;
  $159 = $0;
  $160 = (($159) + 2876|0);
  $161 = (($160) + ($158<<1)|0);
  $162 = HEAP16[$161>>1]|0;
  $163 = (($162) + -1)<<16>>16;
  HEAP16[$161>>1] = $163;
  $164 = $overflow;
  $165 = (($164) - 2)|0;
  $overflow = $165;
  $166 = $overflow;
  $167 = ($166|0)>(0);
  if (!($167)) {
   break;
  }
 }
 $168 = $max_length;
 $bits = $168;
 while(1) {
  $169 = $bits;
  $170 = ($169|0)!=(0);
  if (!($170)) {
   break;
  }
  $171 = $bits;
  $172 = $0;
  $173 = (($172) + 2876|0);
  $174 = (($173) + ($171<<1)|0);
  $175 = HEAP16[$174>>1]|0;
  $176 = $175&65535;
  $n = $176;
  while(1) {
   $177 = $n;
   $178 = ($177|0)!=(0);
   if (!($178)) {
    break;
   }
   $179 = $h;
   $180 = (($179) + -1)|0;
   $h = $180;
   $181 = $0;
   $182 = (($181) + 2908|0);
   $183 = (($182) + ($180<<2)|0);
   $184 = HEAP32[$183>>2]|0;
   $m = $184;
   $185 = $m;
   $186 = $max_code;
   $187 = ($185|0)>($186|0);
   if ($187) {
    continue;
   }
   $188 = $m;
   $189 = $tree;
   $190 = (($189) + ($188<<2)|0);
   $191 = (($190) + 2|0);
   $192 = HEAP16[$191>>1]|0;
   $193 = $192&65535;
   $194 = $bits;
   $195 = ($193|0)!=($194|0);
   if ($195) {
    $196 = $bits;
    $197 = $m;
    $198 = $tree;
    $199 = (($198) + ($197<<2)|0);
    $200 = (($199) + 2|0);
    $201 = HEAP16[$200>>1]|0;
    $202 = $201&65535;
    $203 = (($196) - ($202))|0;
    $204 = $m;
    $205 = $tree;
    $206 = (($205) + ($204<<2)|0);
    $207 = HEAP16[$206>>1]|0;
    $208 = $207&65535;
    $209 = Math_imul($203, $208)|0;
    $210 = $0;
    $211 = (($210) + 5800|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = (($212) + ($209))|0;
    HEAP32[$211>>2] = $213;
    $214 = $bits;
    $215 = $214&65535;
    $216 = $m;
    $217 = $tree;
    $218 = (($217) + ($216<<2)|0);
    $219 = (($218) + 2|0);
    HEAP16[$219>>1] = $215;
   }
   $220 = $n;
   $221 = (($220) + -1)|0;
   $n = $221;
  }
  $222 = $bits;
  $223 = (($222) + -1)|0;
  $bits = $223;
 }
 STACKTOP = sp;return;
}
function _gen_codes($tree,$max_code,$bl_count) {
 $tree = $tree|0;
 $max_code = $max_code|0;
 $bl_count = $bl_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $code = 0, $len = 0, $n = 0, $next_code = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $next_code = sp + 32|0;
 $0 = $tree;
 $1 = $max_code;
 $2 = $bl_count;
 $code = 0;
 $bits = 1;
 while(1) {
  $3 = $bits;
  $4 = ($3|0)<=(15);
  if (!($4)) {
   break;
  }
  $5 = $code;
  $6 = $5&65535;
  $7 = $bits;
  $8 = (($7) - 1)|0;
  $9 = $2;
  $10 = (($9) + ($8<<1)|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = (($6) + ($12))|0;
  $14 = $13 << 1;
  $15 = $14&65535;
  $code = $15;
  $16 = $bits;
  $17 = (($next_code) + ($16<<1)|0);
  HEAP16[$17>>1] = $15;
  $18 = $bits;
  $19 = (($18) + 1)|0;
  $bits = $19;
 }
 $n = 0;
 while(1) {
  $20 = $n;
  $21 = $1;
  $22 = ($20|0)<=($21|0);
  if (!($22)) {
   break;
  }
  $23 = $n;
  $24 = $0;
  $25 = (($24) + ($23<<2)|0);
  $26 = (($25) + 2|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $len = $28;
  $29 = $len;
  $30 = ($29|0)==(0);
  if ($30) {
  } else {
   $31 = $len;
   $32 = (($next_code) + ($31<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = (($33) + 1)<<16>>16;
   HEAP16[$32>>1] = $34;
   $35 = $33&65535;
   $36 = $len;
   $37 = (_bi_reverse($35,$36)|0);
   $38 = $37&65535;
   $39 = $n;
   $40 = $0;
   $41 = (($40) + ($39<<2)|0);
   HEAP16[$41>>1] = $38;
  }
  $42 = $n;
  $43 = (($42) + 1)|0;
  $n = $43;
 }
 STACKTOP = sp;return;
}
function _scan_tree($s,$tree,$max_code) {
 $s = $s|0;
 $tree = $tree|0;
 $max_code = $max_code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $count = 0, $curlen = 0, $max_count = 0, $min_count = 0, $n = 0, $nextlen = 0, $prevlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $tree;
 $2 = $max_code;
 $prevlen = -1;
 $3 = $1;
 $4 = (($3) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $nextlen = $6;
 $count = 0;
 $max_count = 7;
 $min_count = 4;
 $7 = $nextlen;
 $8 = ($7|0)==(0);
 if ($8) {
  $max_count = 138;
  $min_count = 3;
 }
 $9 = $2;
 $10 = (($9) + 1)|0;
 $11 = $1;
 $12 = (($11) + ($10<<2)|0);
 $13 = (($12) + 2|0);
 HEAP16[$13>>1] = -1;
 $n = 0;
 while(1) {
  $14 = $n;
  $15 = $2;
  $16 = ($14|0)<=($15|0);
  if (!($16)) {
   break;
  }
  $17 = $nextlen;
  $curlen = $17;
  $18 = $n;
  $19 = (($18) + 1)|0;
  $20 = $1;
  $21 = (($20) + ($19<<2)|0);
  $22 = (($21) + 2|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $nextlen = $24;
  $25 = $count;
  $26 = (($25) + 1)|0;
  $count = $26;
  $27 = $max_count;
  $28 = ($26|0)<($27|0);
  if ($28) {
   $29 = $curlen;
   $30 = $nextlen;
   $31 = ($29|0)==($30|0);
   if ($31) {
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $32 = $count;
   $33 = $min_count;
   $34 = ($32|0)<($33|0);
   if ($34) {
    $35 = $count;
    $36 = $curlen;
    $37 = $0;
    $38 = (($37) + 2684|0);
    $39 = (($38) + ($36<<2)|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40&65535;
    $42 = (($41) + ($35))|0;
    $43 = $42&65535;
    HEAP16[$39>>1] = $43;
   } else {
    $44 = $curlen;
    $45 = ($44|0)!=(0);
    if ($45) {
     $46 = $curlen;
     $47 = $prevlen;
     $48 = ($46|0)!=($47|0);
     if ($48) {
      $49 = $curlen;
      $50 = $0;
      $51 = (($50) + 2684|0);
      $52 = (($51) + ($49<<2)|0);
      $53 = HEAP16[$52>>1]|0;
      $54 = (($53) + 1)<<16>>16;
      HEAP16[$52>>1] = $54;
     }
     $55 = $0;
     $56 = (($55) + 2684|0);
     $57 = (($56) + 64|0);
     $58 = HEAP16[$57>>1]|0;
     $59 = (($58) + 1)<<16>>16;
     HEAP16[$57>>1] = $59;
    } else {
     $60 = $count;
     $61 = ($60|0)<=(10);
     if ($61) {
      $62 = $0;
      $63 = (($62) + 2684|0);
      $64 = (($63) + 68|0);
      $65 = HEAP16[$64>>1]|0;
      $66 = (($65) + 1)<<16>>16;
      HEAP16[$64>>1] = $66;
     } else {
      $67 = $0;
      $68 = (($67) + 2684|0);
      $69 = (($68) + 72|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = (($70) + 1)<<16>>16;
      HEAP16[$69>>1] = $71;
     }
    }
   }
   $count = 0;
   $72 = $curlen;
   $prevlen = $72;
   $73 = $nextlen;
   $74 = ($73|0)==(0);
   if ($74) {
    $max_count = 138;
    $min_count = 3;
   } else {
    $75 = $curlen;
    $76 = $nextlen;
    $77 = ($75|0)==($76|0);
    if ($77) {
     $max_count = 6;
     $min_count = 3;
    } else {
     $max_count = 7;
     $min_count = 4;
    }
   }
  }
  $78 = $n;
  $79 = (($78) + 1)|0;
  $n = $79;
 }
 STACKTOP = sp;return;
}
function _send_tree($s,$tree,$max_code) {
 $s = $s|0;
 $tree = $tree|0;
 $max_code = $max_code|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $curlen = 0, $len = 0, $len1 = 0, $len11 = 0, $len13 = 0, $len3 = 0, $len5 = 0, $len7 = 0, $len9 = 0, $max_count = 0, $min_count = 0, $n = 0, $nextlen = 0;
 var $prevlen = 0, $val = 0, $val10 = 0, $val12 = 0, $val14 = 0, $val2 = 0, $val4 = 0, $val6 = 0, $val8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $tree;
 $2 = $max_code;
 $prevlen = -1;
 $3 = $1;
 $4 = (($3) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $nextlen = $6;
 $count = 0;
 $max_count = 7;
 $min_count = 4;
 $7 = $nextlen;
 $8 = ($7|0)==(0);
 if ($8) {
  $max_count = 138;
  $min_count = 3;
 }
 $n = 0;
 while(1) {
  $9 = $n;
  $10 = $2;
  $11 = ($9|0)<=($10|0);
  if (!($11)) {
   break;
  }
  $12 = $nextlen;
  $curlen = $12;
  $13 = $n;
  $14 = (($13) + 1)|0;
  $15 = $1;
  $16 = (($15) + ($14<<2)|0);
  $17 = (($16) + 2|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $nextlen = $19;
  $20 = $count;
  $21 = (($20) + 1)|0;
  $count = $21;
  $22 = $max_count;
  $23 = ($21|0)<($22|0);
  if ($23) {
   $24 = $curlen;
   $25 = $nextlen;
   $26 = ($24|0)==($25|0);
   if ($26) {
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $27 = $count;
   $28 = $min_count;
   $29 = ($27|0)<($28|0);
   if ($29) {
    while(1) {
     $30 = $curlen;
     $31 = $0;
     $32 = (($31) + 2684|0);
     $33 = (($32) + ($30<<2)|0);
     $34 = (($33) + 2|0);
     $35 = HEAP16[$34>>1]|0;
     $36 = $35&65535;
     $len = $36;
     $37 = $0;
     $38 = (($37) + 5820|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $len;
     $41 = (16 - ($40))|0;
     $42 = ($39|0)>($41|0);
     if ($42) {
      $43 = $curlen;
      $44 = $0;
      $45 = (($44) + 2684|0);
      $46 = (($45) + ($43<<2)|0);
      $47 = HEAP16[$46>>1]|0;
      $48 = $47&65535;
      $val = $48;
      $49 = $val;
      $50 = $49&65535;
      $51 = $50&65535;
      $52 = $0;
      $53 = (($52) + 5820|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = $51 << $54;
      $56 = $0;
      $57 = (($56) + 5816|0);
      $58 = HEAP16[$57>>1]|0;
      $59 = $58&65535;
      $60 = $59 | $55;
      $61 = $60&65535;
      HEAP16[$57>>1] = $61;
      $62 = $0;
      $63 = (($62) + 5816|0);
      $64 = HEAP16[$63>>1]|0;
      $65 = $64&65535;
      $66 = $65 & 255;
      $67 = $66&255;
      $68 = $0;
      $69 = (($68) + 20|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($70) + 1)|0;
      HEAP32[$69>>2] = $71;
      $72 = $0;
      $73 = (($72) + 8|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (($74) + ($70)|0);
      HEAP8[$75>>0] = $67;
      $76 = $0;
      $77 = (($76) + 5816|0);
      $78 = HEAP16[$77>>1]|0;
      $79 = $78&65535;
      $80 = $79 >> 8;
      $81 = $80&255;
      $82 = $0;
      $83 = (($82) + 20|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = (($84) + 1)|0;
      HEAP32[$83>>2] = $85;
      $86 = $0;
      $87 = (($86) + 8|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (($88) + ($84)|0);
      HEAP8[$89>>0] = $81;
      $90 = $val;
      $91 = $90&65535;
      $92 = $91&65535;
      $93 = $0;
      $94 = (($93) + 5820|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (16 - ($95))|0;
      $97 = $92 >> $96;
      $98 = $97&65535;
      $99 = $0;
      $100 = (($99) + 5816|0);
      HEAP16[$100>>1] = $98;
      $101 = $len;
      $102 = (($101) - 16)|0;
      $103 = $0;
      $104 = (($103) + 5820|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($105) + ($102))|0;
      HEAP32[$104>>2] = $106;
     } else {
      $107 = $curlen;
      $108 = $0;
      $109 = (($108) + 2684|0);
      $110 = (($109) + ($107<<2)|0);
      $111 = HEAP16[$110>>1]|0;
      $112 = $111&65535;
      $113 = $0;
      $114 = (($113) + 5820|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = $112 << $115;
      $117 = $0;
      $118 = (($117) + 5816|0);
      $119 = HEAP16[$118>>1]|0;
      $120 = $119&65535;
      $121 = $120 | $116;
      $122 = $121&65535;
      HEAP16[$118>>1] = $122;
      $123 = $len;
      $124 = $0;
      $125 = (($124) + 5820|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = (($126) + ($123))|0;
      HEAP32[$125>>2] = $127;
     }
     $128 = $count;
     $129 = (($128) + -1)|0;
     $count = $129;
     $130 = ($129|0)!=(0);
     if (!($130)) {
      break;
     }
    }
   } else {
    $131 = $curlen;
    $132 = ($131|0)!=(0);
    if ($132) {
     $133 = $curlen;
     $134 = $prevlen;
     $135 = ($133|0)!=($134|0);
     if ($135) {
      $136 = $curlen;
      $137 = $0;
      $138 = (($137) + 2684|0);
      $139 = (($138) + ($136<<2)|0);
      $140 = (($139) + 2|0);
      $141 = HEAP16[$140>>1]|0;
      $142 = $141&65535;
      $len1 = $142;
      $143 = $0;
      $144 = (($143) + 5820|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $len1;
      $147 = (16 - ($146))|0;
      $148 = ($145|0)>($147|0);
      if ($148) {
       $149 = $curlen;
       $150 = $0;
       $151 = (($150) + 2684|0);
       $152 = (($151) + ($149<<2)|0);
       $153 = HEAP16[$152>>1]|0;
       $154 = $153&65535;
       $val2 = $154;
       $155 = $val2;
       $156 = $155&65535;
       $157 = $156&65535;
       $158 = $0;
       $159 = (($158) + 5820|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = $157 << $160;
       $162 = $0;
       $163 = (($162) + 5816|0);
       $164 = HEAP16[$163>>1]|0;
       $165 = $164&65535;
       $166 = $165 | $161;
       $167 = $166&65535;
       HEAP16[$163>>1] = $167;
       $168 = $0;
       $169 = (($168) + 5816|0);
       $170 = HEAP16[$169>>1]|0;
       $171 = $170&65535;
       $172 = $171 & 255;
       $173 = $172&255;
       $174 = $0;
       $175 = (($174) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = (($176) + 1)|0;
       HEAP32[$175>>2] = $177;
       $178 = $0;
       $179 = (($178) + 8|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = (($180) + ($176)|0);
       HEAP8[$181>>0] = $173;
       $182 = $0;
       $183 = (($182) + 5816|0);
       $184 = HEAP16[$183>>1]|0;
       $185 = $184&65535;
       $186 = $185 >> 8;
       $187 = $186&255;
       $188 = $0;
       $189 = (($188) + 20|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = (($190) + 1)|0;
       HEAP32[$189>>2] = $191;
       $192 = $0;
       $193 = (($192) + 8|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = (($194) + ($190)|0);
       HEAP8[$195>>0] = $187;
       $196 = $val2;
       $197 = $196&65535;
       $198 = $197&65535;
       $199 = $0;
       $200 = (($199) + 5820|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = (16 - ($201))|0;
       $203 = $198 >> $202;
       $204 = $203&65535;
       $205 = $0;
       $206 = (($205) + 5816|0);
       HEAP16[$206>>1] = $204;
       $207 = $len1;
       $208 = (($207) - 16)|0;
       $209 = $0;
       $210 = (($209) + 5820|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = (($211) + ($208))|0;
       HEAP32[$210>>2] = $212;
      } else {
       $213 = $curlen;
       $214 = $0;
       $215 = (($214) + 2684|0);
       $216 = (($215) + ($213<<2)|0);
       $217 = HEAP16[$216>>1]|0;
       $218 = $217&65535;
       $219 = $0;
       $220 = (($219) + 5820|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $218 << $221;
       $223 = $0;
       $224 = (($223) + 5816|0);
       $225 = HEAP16[$224>>1]|0;
       $226 = $225&65535;
       $227 = $226 | $222;
       $228 = $227&65535;
       HEAP16[$224>>1] = $228;
       $229 = $len1;
       $230 = $0;
       $231 = (($230) + 5820|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = (($232) + ($229))|0;
       HEAP32[$231>>2] = $233;
      }
      $234 = $count;
      $235 = (($234) + -1)|0;
      $count = $235;
     }
     $236 = $0;
     $237 = (($236) + 2684|0);
     $238 = (($237) + 64|0);
     $239 = (($238) + 2|0);
     $240 = HEAP16[$239>>1]|0;
     $241 = $240&65535;
     $len3 = $241;
     $242 = $0;
     $243 = (($242) + 5820|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = $len3;
     $246 = (16 - ($245))|0;
     $247 = ($244|0)>($246|0);
     if ($247) {
      $248 = $0;
      $249 = (($248) + 2684|0);
      $250 = (($249) + 64|0);
      $251 = HEAP16[$250>>1]|0;
      $252 = $251&65535;
      $val4 = $252;
      $253 = $val4;
      $254 = $253&65535;
      $255 = $254&65535;
      $256 = $0;
      $257 = (($256) + 5820|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = $255 << $258;
      $260 = $0;
      $261 = (($260) + 5816|0);
      $262 = HEAP16[$261>>1]|0;
      $263 = $262&65535;
      $264 = $263 | $259;
      $265 = $264&65535;
      HEAP16[$261>>1] = $265;
      $266 = $0;
      $267 = (($266) + 5816|0);
      $268 = HEAP16[$267>>1]|0;
      $269 = $268&65535;
      $270 = $269 & 255;
      $271 = $270&255;
      $272 = $0;
      $273 = (($272) + 20|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = (($274) + 1)|0;
      HEAP32[$273>>2] = $275;
      $276 = $0;
      $277 = (($276) + 8|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = (($278) + ($274)|0);
      HEAP8[$279>>0] = $271;
      $280 = $0;
      $281 = (($280) + 5816|0);
      $282 = HEAP16[$281>>1]|0;
      $283 = $282&65535;
      $284 = $283 >> 8;
      $285 = $284&255;
      $286 = $0;
      $287 = (($286) + 20|0);
      $288 = HEAP32[$287>>2]|0;
      $289 = (($288) + 1)|0;
      HEAP32[$287>>2] = $289;
      $290 = $0;
      $291 = (($290) + 8|0);
      $292 = HEAP32[$291>>2]|0;
      $293 = (($292) + ($288)|0);
      HEAP8[$293>>0] = $285;
      $294 = $val4;
      $295 = $294&65535;
      $296 = $295&65535;
      $297 = $0;
      $298 = (($297) + 5820|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = (16 - ($299))|0;
      $301 = $296 >> $300;
      $302 = $301&65535;
      $303 = $0;
      $304 = (($303) + 5816|0);
      HEAP16[$304>>1] = $302;
      $305 = $len3;
      $306 = (($305) - 16)|0;
      $307 = $0;
      $308 = (($307) + 5820|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = (($309) + ($306))|0;
      HEAP32[$308>>2] = $310;
     } else {
      $311 = $0;
      $312 = (($311) + 2684|0);
      $313 = (($312) + 64|0);
      $314 = HEAP16[$313>>1]|0;
      $315 = $314&65535;
      $316 = $0;
      $317 = (($316) + 5820|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = $315 << $318;
      $320 = $0;
      $321 = (($320) + 5816|0);
      $322 = HEAP16[$321>>1]|0;
      $323 = $322&65535;
      $324 = $323 | $319;
      $325 = $324&65535;
      HEAP16[$321>>1] = $325;
      $326 = $len3;
      $327 = $0;
      $328 = (($327) + 5820|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = (($329) + ($326))|0;
      HEAP32[$328>>2] = $330;
     }
     $len5 = 2;
     $331 = $0;
     $332 = (($331) + 5820|0);
     $333 = HEAP32[$332>>2]|0;
     $334 = $len5;
     $335 = (16 - ($334))|0;
     $336 = ($333|0)>($335|0);
     if ($336) {
      $337 = $count;
      $338 = (($337) - 3)|0;
      $val6 = $338;
      $339 = $val6;
      $340 = $339&65535;
      $341 = $340&65535;
      $342 = $0;
      $343 = (($342) + 5820|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = $341 << $344;
      $346 = $0;
      $347 = (($346) + 5816|0);
      $348 = HEAP16[$347>>1]|0;
      $349 = $348&65535;
      $350 = $349 | $345;
      $351 = $350&65535;
      HEAP16[$347>>1] = $351;
      $352 = $0;
      $353 = (($352) + 5816|0);
      $354 = HEAP16[$353>>1]|0;
      $355 = $354&65535;
      $356 = $355 & 255;
      $357 = $356&255;
      $358 = $0;
      $359 = (($358) + 20|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = (($360) + 1)|0;
      HEAP32[$359>>2] = $361;
      $362 = $0;
      $363 = (($362) + 8|0);
      $364 = HEAP32[$363>>2]|0;
      $365 = (($364) + ($360)|0);
      HEAP8[$365>>0] = $357;
      $366 = $0;
      $367 = (($366) + 5816|0);
      $368 = HEAP16[$367>>1]|0;
      $369 = $368&65535;
      $370 = $369 >> 8;
      $371 = $370&255;
      $372 = $0;
      $373 = (($372) + 20|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = (($374) + 1)|0;
      HEAP32[$373>>2] = $375;
      $376 = $0;
      $377 = (($376) + 8|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = (($378) + ($374)|0);
      HEAP8[$379>>0] = $371;
      $380 = $val6;
      $381 = $380&65535;
      $382 = $381&65535;
      $383 = $0;
      $384 = (($383) + 5820|0);
      $385 = HEAP32[$384>>2]|0;
      $386 = (16 - ($385))|0;
      $387 = $382 >> $386;
      $388 = $387&65535;
      $389 = $0;
      $390 = (($389) + 5816|0);
      HEAP16[$390>>1] = $388;
      $391 = $len5;
      $392 = (($391) - 16)|0;
      $393 = $0;
      $394 = (($393) + 5820|0);
      $395 = HEAP32[$394>>2]|0;
      $396 = (($395) + ($392))|0;
      HEAP32[$394>>2] = $396;
     } else {
      $397 = $count;
      $398 = (($397) - 3)|0;
      $399 = $398&65535;
      $400 = $399&65535;
      $401 = $0;
      $402 = (($401) + 5820|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = $400 << $403;
      $405 = $0;
      $406 = (($405) + 5816|0);
      $407 = HEAP16[$406>>1]|0;
      $408 = $407&65535;
      $409 = $408 | $404;
      $410 = $409&65535;
      HEAP16[$406>>1] = $410;
      $411 = $len5;
      $412 = $0;
      $413 = (($412) + 5820|0);
      $414 = HEAP32[$413>>2]|0;
      $415 = (($414) + ($411))|0;
      HEAP32[$413>>2] = $415;
     }
    } else {
     $416 = $count;
     $417 = ($416|0)<=(10);
     if ($417) {
      $418 = $0;
      $419 = (($418) + 2684|0);
      $420 = (($419) + 68|0);
      $421 = (($420) + 2|0);
      $422 = HEAP16[$421>>1]|0;
      $423 = $422&65535;
      $len7 = $423;
      $424 = $0;
      $425 = (($424) + 5820|0);
      $426 = HEAP32[$425>>2]|0;
      $427 = $len7;
      $428 = (16 - ($427))|0;
      $429 = ($426|0)>($428|0);
      if ($429) {
       $430 = $0;
       $431 = (($430) + 2684|0);
       $432 = (($431) + 68|0);
       $433 = HEAP16[$432>>1]|0;
       $434 = $433&65535;
       $val8 = $434;
       $435 = $val8;
       $436 = $435&65535;
       $437 = $436&65535;
       $438 = $0;
       $439 = (($438) + 5820|0);
       $440 = HEAP32[$439>>2]|0;
       $441 = $437 << $440;
       $442 = $0;
       $443 = (($442) + 5816|0);
       $444 = HEAP16[$443>>1]|0;
       $445 = $444&65535;
       $446 = $445 | $441;
       $447 = $446&65535;
       HEAP16[$443>>1] = $447;
       $448 = $0;
       $449 = (($448) + 5816|0);
       $450 = HEAP16[$449>>1]|0;
       $451 = $450&65535;
       $452 = $451 & 255;
       $453 = $452&255;
       $454 = $0;
       $455 = (($454) + 20|0);
       $456 = HEAP32[$455>>2]|0;
       $457 = (($456) + 1)|0;
       HEAP32[$455>>2] = $457;
       $458 = $0;
       $459 = (($458) + 8|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = (($460) + ($456)|0);
       HEAP8[$461>>0] = $453;
       $462 = $0;
       $463 = (($462) + 5816|0);
       $464 = HEAP16[$463>>1]|0;
       $465 = $464&65535;
       $466 = $465 >> 8;
       $467 = $466&255;
       $468 = $0;
       $469 = (($468) + 20|0);
       $470 = HEAP32[$469>>2]|0;
       $471 = (($470) + 1)|0;
       HEAP32[$469>>2] = $471;
       $472 = $0;
       $473 = (($472) + 8|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = (($474) + ($470)|0);
       HEAP8[$475>>0] = $467;
       $476 = $val8;
       $477 = $476&65535;
       $478 = $477&65535;
       $479 = $0;
       $480 = (($479) + 5820|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = (16 - ($481))|0;
       $483 = $478 >> $482;
       $484 = $483&65535;
       $485 = $0;
       $486 = (($485) + 5816|0);
       HEAP16[$486>>1] = $484;
       $487 = $len7;
       $488 = (($487) - 16)|0;
       $489 = $0;
       $490 = (($489) + 5820|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = (($491) + ($488))|0;
       HEAP32[$490>>2] = $492;
      } else {
       $493 = $0;
       $494 = (($493) + 2684|0);
       $495 = (($494) + 68|0);
       $496 = HEAP16[$495>>1]|0;
       $497 = $496&65535;
       $498 = $0;
       $499 = (($498) + 5820|0);
       $500 = HEAP32[$499>>2]|0;
       $501 = $497 << $500;
       $502 = $0;
       $503 = (($502) + 5816|0);
       $504 = HEAP16[$503>>1]|0;
       $505 = $504&65535;
       $506 = $505 | $501;
       $507 = $506&65535;
       HEAP16[$503>>1] = $507;
       $508 = $len7;
       $509 = $0;
       $510 = (($509) + 5820|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($511) + ($508))|0;
       HEAP32[$510>>2] = $512;
      }
      $len9 = 3;
      $513 = $0;
      $514 = (($513) + 5820|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = $len9;
      $517 = (16 - ($516))|0;
      $518 = ($515|0)>($517|0);
      if ($518) {
       $519 = $count;
       $520 = (($519) - 3)|0;
       $val10 = $520;
       $521 = $val10;
       $522 = $521&65535;
       $523 = $522&65535;
       $524 = $0;
       $525 = (($524) + 5820|0);
       $526 = HEAP32[$525>>2]|0;
       $527 = $523 << $526;
       $528 = $0;
       $529 = (($528) + 5816|0);
       $530 = HEAP16[$529>>1]|0;
       $531 = $530&65535;
       $532 = $531 | $527;
       $533 = $532&65535;
       HEAP16[$529>>1] = $533;
       $534 = $0;
       $535 = (($534) + 5816|0);
       $536 = HEAP16[$535>>1]|0;
       $537 = $536&65535;
       $538 = $537 & 255;
       $539 = $538&255;
       $540 = $0;
       $541 = (($540) + 20|0);
       $542 = HEAP32[$541>>2]|0;
       $543 = (($542) + 1)|0;
       HEAP32[$541>>2] = $543;
       $544 = $0;
       $545 = (($544) + 8|0);
       $546 = HEAP32[$545>>2]|0;
       $547 = (($546) + ($542)|0);
       HEAP8[$547>>0] = $539;
       $548 = $0;
       $549 = (($548) + 5816|0);
       $550 = HEAP16[$549>>1]|0;
       $551 = $550&65535;
       $552 = $551 >> 8;
       $553 = $552&255;
       $554 = $0;
       $555 = (($554) + 20|0);
       $556 = HEAP32[$555>>2]|0;
       $557 = (($556) + 1)|0;
       HEAP32[$555>>2] = $557;
       $558 = $0;
       $559 = (($558) + 8|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($560) + ($556)|0);
       HEAP8[$561>>0] = $553;
       $562 = $val10;
       $563 = $562&65535;
       $564 = $563&65535;
       $565 = $0;
       $566 = (($565) + 5820|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (16 - ($567))|0;
       $569 = $564 >> $568;
       $570 = $569&65535;
       $571 = $0;
       $572 = (($571) + 5816|0);
       HEAP16[$572>>1] = $570;
       $573 = $len9;
       $574 = (($573) - 16)|0;
       $575 = $0;
       $576 = (($575) + 5820|0);
       $577 = HEAP32[$576>>2]|0;
       $578 = (($577) + ($574))|0;
       HEAP32[$576>>2] = $578;
      } else {
       $579 = $count;
       $580 = (($579) - 3)|0;
       $581 = $580&65535;
       $582 = $581&65535;
       $583 = $0;
       $584 = (($583) + 5820|0);
       $585 = HEAP32[$584>>2]|0;
       $586 = $582 << $585;
       $587 = $0;
       $588 = (($587) + 5816|0);
       $589 = HEAP16[$588>>1]|0;
       $590 = $589&65535;
       $591 = $590 | $586;
       $592 = $591&65535;
       HEAP16[$588>>1] = $592;
       $593 = $len9;
       $594 = $0;
       $595 = (($594) + 5820|0);
       $596 = HEAP32[$595>>2]|0;
       $597 = (($596) + ($593))|0;
       HEAP32[$595>>2] = $597;
      }
     } else {
      $598 = $0;
      $599 = (($598) + 2684|0);
      $600 = (($599) + 72|0);
      $601 = (($600) + 2|0);
      $602 = HEAP16[$601>>1]|0;
      $603 = $602&65535;
      $len11 = $603;
      $604 = $0;
      $605 = (($604) + 5820|0);
      $606 = HEAP32[$605>>2]|0;
      $607 = $len11;
      $608 = (16 - ($607))|0;
      $609 = ($606|0)>($608|0);
      if ($609) {
       $610 = $0;
       $611 = (($610) + 2684|0);
       $612 = (($611) + 72|0);
       $613 = HEAP16[$612>>1]|0;
       $614 = $613&65535;
       $val12 = $614;
       $615 = $val12;
       $616 = $615&65535;
       $617 = $616&65535;
       $618 = $0;
       $619 = (($618) + 5820|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = $617 << $620;
       $622 = $0;
       $623 = (($622) + 5816|0);
       $624 = HEAP16[$623>>1]|0;
       $625 = $624&65535;
       $626 = $625 | $621;
       $627 = $626&65535;
       HEAP16[$623>>1] = $627;
       $628 = $0;
       $629 = (($628) + 5816|0);
       $630 = HEAP16[$629>>1]|0;
       $631 = $630&65535;
       $632 = $631 & 255;
       $633 = $632&255;
       $634 = $0;
       $635 = (($634) + 20|0);
       $636 = HEAP32[$635>>2]|0;
       $637 = (($636) + 1)|0;
       HEAP32[$635>>2] = $637;
       $638 = $0;
       $639 = (($638) + 8|0);
       $640 = HEAP32[$639>>2]|0;
       $641 = (($640) + ($636)|0);
       HEAP8[$641>>0] = $633;
       $642 = $0;
       $643 = (($642) + 5816|0);
       $644 = HEAP16[$643>>1]|0;
       $645 = $644&65535;
       $646 = $645 >> 8;
       $647 = $646&255;
       $648 = $0;
       $649 = (($648) + 20|0);
       $650 = HEAP32[$649>>2]|0;
       $651 = (($650) + 1)|0;
       HEAP32[$649>>2] = $651;
       $652 = $0;
       $653 = (($652) + 8|0);
       $654 = HEAP32[$653>>2]|0;
       $655 = (($654) + ($650)|0);
       HEAP8[$655>>0] = $647;
       $656 = $val12;
       $657 = $656&65535;
       $658 = $657&65535;
       $659 = $0;
       $660 = (($659) + 5820|0);
       $661 = HEAP32[$660>>2]|0;
       $662 = (16 - ($661))|0;
       $663 = $658 >> $662;
       $664 = $663&65535;
       $665 = $0;
       $666 = (($665) + 5816|0);
       HEAP16[$666>>1] = $664;
       $667 = $len11;
       $668 = (($667) - 16)|0;
       $669 = $0;
       $670 = (($669) + 5820|0);
       $671 = HEAP32[$670>>2]|0;
       $672 = (($671) + ($668))|0;
       HEAP32[$670>>2] = $672;
      } else {
       $673 = $0;
       $674 = (($673) + 2684|0);
       $675 = (($674) + 72|0);
       $676 = HEAP16[$675>>1]|0;
       $677 = $676&65535;
       $678 = $0;
       $679 = (($678) + 5820|0);
       $680 = HEAP32[$679>>2]|0;
       $681 = $677 << $680;
       $682 = $0;
       $683 = (($682) + 5816|0);
       $684 = HEAP16[$683>>1]|0;
       $685 = $684&65535;
       $686 = $685 | $681;
       $687 = $686&65535;
       HEAP16[$683>>1] = $687;
       $688 = $len11;
       $689 = $0;
       $690 = (($689) + 5820|0);
       $691 = HEAP32[$690>>2]|0;
       $692 = (($691) + ($688))|0;
       HEAP32[$690>>2] = $692;
      }
      $len13 = 7;
      $693 = $0;
      $694 = (($693) + 5820|0);
      $695 = HEAP32[$694>>2]|0;
      $696 = $len13;
      $697 = (16 - ($696))|0;
      $698 = ($695|0)>($697|0);
      if ($698) {
       $699 = $count;
       $700 = (($699) - 11)|0;
       $val14 = $700;
       $701 = $val14;
       $702 = $701&65535;
       $703 = $702&65535;
       $704 = $0;
       $705 = (($704) + 5820|0);
       $706 = HEAP32[$705>>2]|0;
       $707 = $703 << $706;
       $708 = $0;
       $709 = (($708) + 5816|0);
       $710 = HEAP16[$709>>1]|0;
       $711 = $710&65535;
       $712 = $711 | $707;
       $713 = $712&65535;
       HEAP16[$709>>1] = $713;
       $714 = $0;
       $715 = (($714) + 5816|0);
       $716 = HEAP16[$715>>1]|0;
       $717 = $716&65535;
       $718 = $717 & 255;
       $719 = $718&255;
       $720 = $0;
       $721 = (($720) + 20|0);
       $722 = HEAP32[$721>>2]|0;
       $723 = (($722) + 1)|0;
       HEAP32[$721>>2] = $723;
       $724 = $0;
       $725 = (($724) + 8|0);
       $726 = HEAP32[$725>>2]|0;
       $727 = (($726) + ($722)|0);
       HEAP8[$727>>0] = $719;
       $728 = $0;
       $729 = (($728) + 5816|0);
       $730 = HEAP16[$729>>1]|0;
       $731 = $730&65535;
       $732 = $731 >> 8;
       $733 = $732&255;
       $734 = $0;
       $735 = (($734) + 20|0);
       $736 = HEAP32[$735>>2]|0;
       $737 = (($736) + 1)|0;
       HEAP32[$735>>2] = $737;
       $738 = $0;
       $739 = (($738) + 8|0);
       $740 = HEAP32[$739>>2]|0;
       $741 = (($740) + ($736)|0);
       HEAP8[$741>>0] = $733;
       $742 = $val14;
       $743 = $742&65535;
       $744 = $743&65535;
       $745 = $0;
       $746 = (($745) + 5820|0);
       $747 = HEAP32[$746>>2]|0;
       $748 = (16 - ($747))|0;
       $749 = $744 >> $748;
       $750 = $749&65535;
       $751 = $0;
       $752 = (($751) + 5816|0);
       HEAP16[$752>>1] = $750;
       $753 = $len13;
       $754 = (($753) - 16)|0;
       $755 = $0;
       $756 = (($755) + 5820|0);
       $757 = HEAP32[$756>>2]|0;
       $758 = (($757) + ($754))|0;
       HEAP32[$756>>2] = $758;
      } else {
       $759 = $count;
       $760 = (($759) - 11)|0;
       $761 = $760&65535;
       $762 = $761&65535;
       $763 = $0;
       $764 = (($763) + 5820|0);
       $765 = HEAP32[$764>>2]|0;
       $766 = $762 << $765;
       $767 = $0;
       $768 = (($767) + 5816|0);
       $769 = HEAP16[$768>>1]|0;
       $770 = $769&65535;
       $771 = $770 | $766;
       $772 = $771&65535;
       HEAP16[$768>>1] = $772;
       $773 = $len13;
       $774 = $0;
       $775 = (($774) + 5820|0);
       $776 = HEAP32[$775>>2]|0;
       $777 = (($776) + ($773))|0;
       HEAP32[$775>>2] = $777;
      }
     }
    }
   }
   $count = 0;
   $778 = $curlen;
   $prevlen = $778;
   $779 = $nextlen;
   $780 = ($779|0)==(0);
   if ($780) {
    $max_count = 138;
    $min_count = 3;
   } else {
    $781 = $curlen;
    $782 = $nextlen;
    $783 = ($781|0)==($782|0);
    if ($783) {
     $max_count = 6;
     $min_count = 3;
    } else {
     $max_count = 7;
     $min_count = 4;
    }
   }
  }
  $784 = $n;
  $785 = (($784) + 1)|0;
  $n = $785;
 }
 STACKTOP = sp;return;
}
function _bi_reverse($code,$len) {
 $code = $code|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $code;
 $1 = $len;
 $res = 0;
 while(1) {
  $2 = $0;
  $3 = $2 & 1;
  $4 = $res;
  $5 = $4 | $3;
  $res = $5;
  $6 = $0;
  $7 = $6 >>> 1;
  $0 = $7;
  $8 = $res;
  $9 = $8 << 1;
  $res = $9;
  $10 = $1;
  $11 = (($10) + -1)|0;
  $1 = $11;
  $12 = ($11|0)>(0);
  if (!($12)) {
   break;
  }
 }
 $13 = $res;
 $14 = $13 >>> 1;
 STACKTOP = sp;return ($14|0);
}
function _zcalloc($opaque,$items,$size) {
 $opaque = $opaque|0;
 $items = $items|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $items;
 $2 = $size;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = $2;
  $7 = (($5) - ($6))|0;
  $8 = $1;
  $9 = (($8) + ($7))|0;
  $1 = $9;
 }
 $10 = $1;
 $11 = $2;
 $12 = Math_imul($10, $11)|0;
 $13 = (_malloc($12)|0);
 STACKTOP = sp;return ($13|0);
}
function _zcfree($opaque,$ptr) {
 $opaque = $opaque|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $ptr;
 $2 = $1;
 _free($2);
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
 }
 STACKTOP = sp;return;
}
function _alphasort($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = (($0) + 11|0);
 $2 = HEAP32[$b>>2]|0;
 $3 = (($2) + 11|0);
 $4 = (_strcoll($1,$3)|0);
 return ($4|0);
}
function _scandir($path,$res,$sel,$cmp) {
 $path = $path|0;
 $res = $res|0;
 $sel = $sel|0;
 $cmp = $cmp|0;
 var $$0 = 0, $$in = 0, $$lcssa31 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0$ph = 0, $cnt$0$ph$lcssa = 0, $cnt$0$ph$lcssa33 = 0, $cnt$0$ph$us = 0, $cnt$0$ph$us$lcssa = 0;
 var $cnt$0$ph7 = 0, $len$0$ph = 0, $len$0$ph$us = 0, $len$1 = 0, $len$1$us = 0, $names$0$ph = 0, $names$0$ph$lcssa = 0, $names$0$ph$us = 0, $names$1 = 0, $names$1$us = 0, $names$2 = 0, $names$2$ph = 0, $names$2$ph30 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_opendir(($path|0))|0);
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = -1;
  return ($$0|0);
 }
 $4 = ($sel|0)==(0|0);
 do {
  if ($4) {
   $cnt$0$ph$us = 0;$len$0$ph$us = 0;$names$0$ph$us = 0;
   while(1) {
    HEAP32[$1>>2] = 0;
    $13 = (_readdir(($0|0))|0);
    $22 = ($13|0)==(0|0);
    if ($22) {
     $cnt$0$ph$us$lcssa = $cnt$0$ph$us;$names$2$ph = $names$0$ph$us;
     break;
    }
    $5 = ($cnt$0$ph$us>>>0)<($len$0$ph$us>>>0);
    if ($5) {
     $len$1$us = $len$0$ph$us;$names$1$us = $names$0$ph$us;
    } else {
     $6 = $len$0$ph$us << 1;
     $7 = $6 | 1;
     $8 = ($7>>>0)>(1073741823);
     if ($8) {
      $cnt$0$ph$us$lcssa = $cnt$0$ph$us;$names$2$ph = $names$0$ph$us;
      break;
     }
     $9 = $7 << 2;
     $10 = (_realloc($names$0$ph$us,$9)|0);
     $11 = ($10|0)==(0|0);
     if ($11) {
      $cnt$0$ph$us$lcssa = $cnt$0$ph$us;$names$2$ph = $names$0$ph$us;
      break;
     }
     $len$1$us = $7;$names$1$us = $10;
    }
    $12 = (($13) + 8|0);
    $14 = HEAP16[$12>>1]|0;
    $15 = $14&65535;
    $16 = (_malloc($15)|0);
    $17 = (($names$1$us) + ($cnt$0$ph$us<<2)|0);
    HEAP32[$17>>2] = $16;
    $18 = ($16|0)==(0|0);
    if ($18) {
     $cnt$0$ph$us$lcssa = $cnt$0$ph$us;$names$2$ph = $names$1$us;
     break;
    }
    $19 = (($cnt$0$ph$us) + 1)|0;
    $20 = HEAP16[$12>>1]|0;
    $21 = $20&65535;
    _memcpy(($16|0),($13|0),($21|0))|0;
    $cnt$0$ph$us = $19;$len$0$ph$us = $len$1$us;$names$0$ph$us = $names$1$us;
   }
   $cnt$0$ph7 = $cnt$0$ph$us$lcssa;$names$2 = $names$2$ph;
  } else {
   $cnt$0$ph = 0;$len$0$ph = 0;$names$0$ph = 0;
   L6: while(1) {
    while(1) {
     HEAP32[$1>>2] = 0;
     $23 = (_readdir(($0|0))|0);
     $24 = ($23|0)==(0|0);
     if ($24) {
      $cnt$0$ph$lcssa = $cnt$0$ph;$names$0$ph$lcssa = $names$0$ph;
      label = 22;
      break L6;
     }
     $25 = (FUNCTION_TABLE_ii[$sel & 63]($23)|0);
     $26 = ($25|0)==(0);
     if (!($26)) {
      $$lcssa31 = $23;
      break;
     }
    }
    $27 = ($cnt$0$ph>>>0)<($len$0$ph>>>0);
    if ($27) {
     $len$1 = $len$0$ph;$names$1 = $names$0$ph;
    } else {
     $28 = $len$0$ph << 1;
     $29 = $28 | 1;
     $30 = ($29>>>0)>(1073741823);
     if ($30) {
      $cnt$0$ph$lcssa33 = $cnt$0$ph;$names$2$ph30 = $names$0$ph;
      label = 23;
      break;
     }
     $31 = $29 << 2;
     $32 = (_realloc($names$0$ph,$31)|0);
     $33 = ($32|0)==(0|0);
     if ($33) {
      $cnt$0$ph$lcssa33 = $cnt$0$ph;$names$2$ph30 = $names$0$ph;
      label = 23;
      break;
     }
     $len$1 = $29;$names$1 = $32;
    }
    $34 = (($$lcssa31) + 8|0);
    $35 = HEAP16[$34>>1]|0;
    $36 = $35&65535;
    $37 = (_malloc($36)|0);
    $38 = (($names$1) + ($cnt$0$ph<<2)|0);
    HEAP32[$38>>2] = $37;
    $39 = ($37|0)==(0|0);
    if ($39) {
     $cnt$0$ph$lcssa33 = $cnt$0$ph;$names$2$ph30 = $names$1;
     label = 23;
     break;
    }
    $40 = (($cnt$0$ph) + 1)|0;
    $41 = HEAP16[$34>>1]|0;
    $42 = $41&65535;
    _memcpy(($37|0),($$lcssa31|0),($42|0))|0;
    $cnt$0$ph = $40;$len$0$ph = $len$1;$names$0$ph = $names$1;
   }
   if ((label|0) == 22) {
    $cnt$0$ph7 = $cnt$0$ph$lcssa;$names$2 = $names$0$ph$lcssa;
    break;
   }
   else if ((label|0) == 23) {
    $cnt$0$ph7 = $cnt$0$ph$lcssa33;$names$2 = $names$2$ph30;
    break;
   }
  }
 } while(0);
 (_closedir(($0|0))|0);
 $43 = HEAP32[$1>>2]|0;
 $44 = ($43|0)==(0);
 if ($44) {
  HEAP32[$1>>2] = $2;
  $51 = ($cmp|0)==(0|0);
  if (!($51)) {
   _qsort($names$2,$cnt$0$ph7,4,$cmp);
  }
  HEAP32[$res>>2] = $names$2;
  $$0 = $cnt$0$ph7;
  return ($$0|0);
 }
 $45 = ($names$2|0)==(0|0);
 $46 = ($cnt$0$ph7|0)==(0);
 $or$cond = $45 | $46;
 if (!($or$cond)) {
  $$in = $cnt$0$ph7;
  while(1) {
   $47 = (($$in) + -1)|0;
   $48 = (($names$2) + ($47<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   _free($49);
   $50 = ($47|0)==(0);
   if ($50) {
    break;
   } else {
    $$in = $47;
   }
  }
 }
 _free($names$2);
 $$0 = -1;
 return ($$0|0);
}
function _strcoll($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($l,$r)|0);
 return ($0|0);
}
function _getopt($argc,$argv,$optstring) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $c = 0, $d = 0, $i$0$lcssa = 0, $i$0$lcssa$ph = 0, $i$04 = 0, $k$0 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 4|0;
 $d = sp;
 $0 = HEAP32[22464>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[22480>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  HEAP32[22480>>2] = 0;
  HEAP32[22488>>2] = 0;
  HEAP32[22464>>2] = 1;
  $4 = 1;
 } else {
  $4 = $0;
 }
 $5 = ($4|0)<($argc|0);
 if (!($5)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($argv) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP8[$7>>0]|0;
 $10 = ($9<<24>>24)==(45);
 if (!($10)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($7) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 if ((($12<<24>>24) == 0)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else if ((($12<<24>>24) == 45)) {
  label = 7;
 }
 if ((label|0) == 7) {
  $13 = (($7) + 2|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $16 = (($4) + 1)|0;
   HEAP32[22464>>2] = $16;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = HEAP32[22488>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[22488>>2] = 1;
  $20 = 1;
 } else {
  $20 = $17;
 }
 $19 = (($7) + ($20)|0);
 $21 = (_mbtowc($c,$19,4)|0);
 $22 = ($21|0)<(0);
 if ($22) {
  HEAP32[$c>>2] = 65533;
  $28 = 65533;$k$0 = 1;
 } else {
  $$pre = HEAP32[$c>>2]|0;
  $28 = $$pre;$k$0 = $21;
 }
 $23 = HEAP32[22464>>2]|0;
 $24 = (($argv) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[22488>>2]|0;
 $27 = (($25) + ($26)|0);
 HEAP32[22496>>2] = $28;
 $29 = (($26) + ($k$0))|0;
 HEAP32[22488>>2] = $29;
 $30 = (($25) + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)==(0);
 if ($32) {
  $33 = (($23) + 1)|0;
  HEAP32[22464>>2] = $33;
  HEAP32[22488>>2] = 0;
 }
 $34 = (_mbtowc($d,$optstring,4)|0);
 $35 = ($34|0)==(0);
 if ($35) {
  $i$0$lcssa = 0;
 } else {
  $39 = $34;$i$04 = 0;
  while(1) {
   $36 = HEAP32[$d>>2]|0;
   $37 = HEAP32[$c>>2]|0;
   $38 = ($36|0)==($37|0);
   if ($38) {
    $i$0$lcssa$ph = $i$04;
    break;
   }
   $40 = ($39|0)<(1);
   $41 = $40 ? 1 : $39;
   $42 = (($41) + ($i$04))|0;
   $43 = (($optstring) + ($42)|0);
   $44 = (_mbtowc($d,$43,4)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    $i$0$lcssa$ph = $42;
    break;
   } else {
    $39 = $44;$i$04 = $42;
   }
  }
  $i$0$lcssa = $i$0$lcssa$ph;
 }
 $46 = HEAP32[$d>>2]|0;
 $47 = HEAP32[$c>>2]|0;
 $48 = ($46|0)==($47|0);
 if (!($48)) {
  $49 = HEAP8[$optstring>>0]|0;
  $50 = ($49<<24>>24)!=(58);
  $51 = HEAP32[22472>>2]|0;
  $52 = ($51|0)!=(0);
  $or$cond3 = $50 & $52;
  if (!($or$cond3)) {
   $$0 = 63;
   STACKTOP = sp;return ($$0|0);
  }
  $53 = HEAP32[$argv>>2]|0;
  $54 = (_strlen(($53|0))|0);
  (_write(2,($53|0),($54|0))|0);
  (_write(2,(22504|0),18)|0);
  (_write(2,($27|0),($k$0|0))|0);
  (_write(2,(22528|0),1)|0);
  $$0 = 63;
  STACKTOP = sp;return ($$0|0);
 }
 $55 = (($i$0$lcssa) + 1)|0;
 $56 = (($optstring) + ($55)|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = ($57<<24>>24)==(58);
 if (!($58)) {
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 }
 $59 = HEAP32[22464>>2]|0;
 $60 = ($59|0)<($argc|0);
 if ($60) {
  $67 = (($59) + 1)|0;
  HEAP32[22464>>2] = $67;
  $68 = (($argv) + ($59<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP32[22488>>2]|0;
  $71 = (($69) + ($70)|0);
  HEAP32[22568>>2] = $71;
  HEAP32[22488>>2] = 0;
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = HEAP8[$optstring>>0]|0;
 $62 = ($61<<24>>24)==(58);
 if ($62) {
  $$0 = 58;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = HEAP32[22472>>2]|0;
 $64 = ($63|0)==(0);
 if ($64) {
  $$0 = 63;
  STACKTOP = sp;return ($$0|0);
 }
 $65 = HEAP32[$argv>>2]|0;
 $66 = (_strlen(($65|0))|0);
 (_write(2,($65|0),($66|0))|0);
 (_write(2,(22536|0),31)|0);
 (_write(2,($27|0),($k$0|0))|0);
 (_write(2,(22528|0),1)|0);
 $$0 = 63;
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (22576 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $35 & 192;
     $37 = ($36|0)==(128);
     if ($37) {
      $38 = $31 << 6;
      $39 = (($35) + -128)|0;
      $40 = $39 | $38;
      $41 = ($40|0)<(0);
      if (!($41)) {
       HEAP32[$7>>2] = $40;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $42 = (($src) + 3|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43&255;
      $45 = $44 & 192;
      $46 = ($45|0)==(128);
      if ($46) {
       $47 = $40 << 6;
       $48 = (($44) + -128)|0;
       $49 = $48 | $47;
       HEAP32[$7>>2] = $49;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $50 = (___errno_location()|0);
 HEAP32[$50>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _asprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vasprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _bsearch($key,$base,$nel,$width,$cmp) {
 $key = $key|0;
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0 = 0, $$0$ph = 0, $$01$ = 0, $$014 = 0, $$023 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nel|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $$014 = $base;$$023 = $nel;
 while(1) {
  $1 = $$023 >>> 1;
  $2 = Math_imul($1, $width)|0;
  $3 = (($$014) + ($2)|0);
  $4 = (FUNCTION_TABLE_iii[$cmp & 63]($key,$3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0$ph = $3;
   break;
  }
  $6 = ($$023|0)==(1);
  if ($6) {
   $$0$ph = 0;
   break;
  }
  $7 = ($4|0)<(0);
  $8 = (($$023) - ($1))|0;
  $$ = $7 ? $1 : $8;
  $$01$ = $7 ? $$014 : $3;
  $9 = ($$|0)==(0);
  if ($9) {
   $$0$ph = 0;
   break;
  } else {
   $$014 = $$01$;$$023 = $$;
  }
 }
 $$0 = $$0$ph;
 return ($$0|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0$be$i = 0, $$0$be$i21 = 0, $$0$i49 = 0, $$01$be$i = 0, $$01$be$i20 = 0, $$012$i = 0, $$012$i17 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$us$i = 0, $$02$us$i34 = 0, $$03$i = 0, $$03$i16 = 0, $$68 = 0, $$69 = 0, $$be = 0, $$be94 = 0, $$lcssa = 0, $$lcssa72 = 0;
 var $$lcssa73 = 0, $$lcssa95 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$pre = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$i23 = 0, $$pre$i30 = 0, $$sum = 0, $$sum$i = 0, $$sum$i19 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i33 = 0, $head$0$lcssa = 0, $head$078 = 0, $head$176 = 0, $head$176$be = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i25 = 0, $i$01$us$i = 0, $i$01$us$i32 = 0, $i$04$i = 0, $i$04$i15 = 0;
 var $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond70 = 0, $or$cond7075 = 0, $or$cond74 = 0, $pshift$0$lcssa = 0, $pshift$079 = 0, $pshift$1 = 0, $pshift$1$lcssa = 0, $pshift$277 = 0, $pshift$277$be = 0, $sum = 0, $sum$i = 0, $sum$i18 = 0, $tmp$i = 0, $tmp$i28 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i28 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp + 192|0;
 $lp = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = (($lp) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = $11;
  $16 = 1;$52 = 0;$head$078 = $base;$pshift$079 = 1;
  while(1) {
   $15 = $16 & 3;
   $17 = ($15|0)==(3);
   do {
    if ($17) {
     HEAP32[$ar$i>>2] = $head$078;
     $18 = ($pshift$079|0)>(1);
     if ($18) {
      $$012$i = $pshift$079;$$03$i = $head$078;$24 = $head$078;$i$04$i = 1;
      while(1) {
       $19 = (($$03$i) + ($10)|0);
       $20 = (($$012$i) + -2)|0;
       $21 = (($lp) + ($20<<2)|0);
       $22 = HEAP32[$21>>2]|0;
       $sum$i = (($22) + ($width))|0;
       $$sum$i = (0 - ($sum$i))|0;
       $23 = (($$03$i) + ($$sum$i)|0);
       $25 = (FUNCTION_TABLE_iii[$cmp & 63]($24,$23)|0);
       $26 = ($25|0)>(-1);
       if ($26) {
        $27 = (FUNCTION_TABLE_iii[$cmp & 63]($24,$19)|0);
        $28 = ($27|0)>(-1);
        if ($28) {
         $i$0$lcssa$i = $i$04$i;
         break;
        }
       }
       $29 = (FUNCTION_TABLE_iii[$cmp & 63]($23,$19)|0);
       $30 = ($29|0)>(-1);
       $31 = (($i$04$i) + 1)|0;
       $32 = (($ar$i) + ($i$04$i<<2)|0);
       if ($30) {
        HEAP32[$32>>2] = $23;
        $33 = (($$012$i) + -1)|0;
        $$0$be$i = $23;$$01$be$i = $33;
       } else {
        HEAP32[$32>>2] = $19;
        $$0$be$i = $19;$$01$be$i = $20;
       }
       $34 = ($$01$be$i|0)>(1);
       if (!($34)) {
        $i$0$lcssa$i = $31;
        break;
       }
       $$pre$i = HEAP32[$ar$i>>2]|0;
       $$012$i = $$01$be$i;$$03$i = $$0$be$i;$24 = $$pre$i;$i$04$i = $31;
      }
      $35 = ($i$0$lcssa$i|0)<(2);
      if (!($35)) {
       $36 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
       HEAP32[$36>>2] = $tmp$i;
       if (!($13)) {
        $37 = (($i$0$lcssa$i) + -1)|0;
        $$02$us$i = $width;$49 = $tmp$i;
        while(1) {
         $47 = ($$02$us$i>>>0)>(256);
         $39 = $47 ? 256 : $$02$us$i;
         $48 = HEAP32[$ar$i>>2]|0;
         _memcpy(($49|0),($48|0),($39|0))|0;
         $45 = $48;$i$01$us$i = 0;
         while(1) {
          $41 = (($ar$i) + ($i$01$us$i<<2)|0);
          $42 = (($i$01$us$i) + 1)|0;
          $43 = (($ar$i) + ($42<<2)|0);
          $44 = HEAP32[$43>>2]|0;
          _memcpy(($45|0),($44|0),($39|0))|0;
          $46 = (($45) + ($39)|0);
          HEAP32[$41>>2] = $46;
          $exitcond$i = ($i$01$us$i|0)==($37|0);
          if ($exitcond$i) {
           break;
          } else {
           $45 = $44;$i$01$us$i = $42;
          }
         }
         $38 = ($$02$us$i|0)==($39|0);
         if ($38) {
          break;
         }
         $40 = (($$02$us$i) - ($39))|0;
         $$pre$i10 = HEAP32[$36>>2]|0;
         $$02$us$i = $40;$49 = $$pre$i10;
        }
       }
      }
     } else {
     }
     $50 = $16 >>> 2;
     $51 = $52 << 30;
     $53 = $50 | $51;
     $54 = $52 >>> 2;
     $55 = (($pshift$079) + 2)|0;
     $107 = $53;$170 = $54;$pshift$1 = $55;
    } else {
     $56 = (($pshift$079) + -1)|0;
     $57 = (($lp) + ($56<<2)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $head$078;
     $60 = (($14) - ($59))|0;
     $61 = ($58>>>0)<($60>>>0);
     if ($61) {
      HEAP32[$ar$i>>2] = $head$078;
      $62 = ($pshift$079|0)>(1);
      if ($62) {
       $$012$i17 = $pshift$079;$$03$i16 = $head$078;$68 = $head$078;$i$04$i15 = 1;
       while(1) {
        $63 = (($$03$i16) + ($10)|0);
        $64 = (($$012$i17) + -2)|0;
        $65 = (($lp) + ($64<<2)|0);
        $66 = HEAP32[$65>>2]|0;
        $sum$i18 = (($66) + ($width))|0;
        $$sum$i19 = (0 - ($sum$i18))|0;
        $67 = (($$03$i16) + ($$sum$i19)|0);
        $69 = (FUNCTION_TABLE_iii[$cmp & 63]($68,$67)|0);
        $70 = ($69|0)>(-1);
        if ($70) {
         $71 = (FUNCTION_TABLE_iii[$cmp & 63]($68,$63)|0);
         $72 = ($71|0)>(-1);
         if ($72) {
          $i$0$lcssa$i25 = $i$04$i15;
          break;
         }
        }
        $73 = (FUNCTION_TABLE_iii[$cmp & 63]($67,$63)|0);
        $74 = ($73|0)>(-1);
        $75 = (($i$04$i15) + 1)|0;
        $76 = (($ar$i) + ($i$04$i15<<2)|0);
        if ($74) {
         HEAP32[$76>>2] = $67;
         $77 = (($$012$i17) + -1)|0;
         $$0$be$i21 = $67;$$01$be$i20 = $77;
        } else {
         HEAP32[$76>>2] = $63;
         $$0$be$i21 = $63;$$01$be$i20 = $64;
        }
        $78 = ($$01$be$i20|0)>(1);
        if (!($78)) {
         $i$0$lcssa$i25 = $75;
         break;
        }
        $$pre$i23 = HEAP32[$ar$i>>2]|0;
        $$012$i17 = $$01$be$i20;$$03$i16 = $$0$be$i21;$68 = $$pre$i23;$i$04$i15 = $75;
       }
       $79 = ($i$0$lcssa$i25|0)<(2);
       if (!($79)) {
        $80 = (($ar$i) + ($i$0$lcssa$i25<<2)|0);
        HEAP32[$80>>2] = $tmp$i28;
        if (!($13)) {
         $81 = (($i$0$lcssa$i25) + -1)|0;
         $$02$us$i34 = $width;$93 = $tmp$i28;
         while(1) {
          $91 = ($$02$us$i34>>>0)>(256);
          $83 = $91 ? 256 : $$02$us$i34;
          $92 = HEAP32[$ar$i>>2]|0;
          _memcpy(($93|0),($92|0),($83|0))|0;
          $89 = $92;$i$01$us$i32 = 0;
          while(1) {
           $85 = (($ar$i) + ($i$01$us$i32<<2)|0);
           $86 = (($i$01$us$i32) + 1)|0;
           $87 = (($ar$i) + ($86<<2)|0);
           $88 = HEAP32[$87>>2]|0;
           _memcpy(($89|0),($88|0),($83|0))|0;
           $90 = (($89) + ($83)|0);
           HEAP32[$85>>2] = $90;
           $exitcond$i33 = ($i$01$us$i32|0)==($81|0);
           if ($exitcond$i33) {
            break;
           } else {
            $89 = $88;$i$01$us$i32 = $86;
           }
          }
          $82 = ($$02$us$i34|0)==($83|0);
          if ($82) {
           break;
          }
          $84 = (($$02$us$i34) - ($83))|0;
          $$pre$i30 = HEAP32[$80>>2]|0;
          $$02$us$i34 = $84;$93 = $$pre$i30;
         }
        }
       }
      } else {
      }
     } else {
      _trinkle($head$078,$width,$cmp,$16,$52,$pshift$079,0,$lp);
     }
     $94 = ($pshift$079|0)==(1);
     if ($94) {
      $95 = $52 << 1;
      $96 = $16 >>> 31;
      $97 = $96 | $95;
      $98 = $16 << 1;
      $107 = $98;$170 = $97;$pshift$1 = 0;
      break;
     } else {
      $99 = ($56>>>0)>(31);
      $100 = (($pshift$079) + -33)|0;
      $$ = $99 ? 0 : $16;
      $$68 = $99 ? $16 : $52;
      $$69 = $99 ? $100 : $56;
      $101 = $$68 << $$69;
      $102 = (32 - ($$69))|0;
      $103 = $$ >>> $102;
      $104 = $103 | $101;
      $105 = $$ << $$69;
      $107 = $105;$170 = $104;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $106 = $107 | 1;
   $108 = (($head$078) + ($width)|0);
   $109 = ($108>>>0)<($11>>>0);
   if ($109) {
    $16 = $106;$52 = $170;$head$078 = $108;$pshift$079 = $pshift$1;
   } else {
    $$lcssa96 = $170;$$lcssa97 = $106;$$lcssa98 = $108;$pshift$1$lcssa = $pshift$1;
    break;
   }
  }
  $$lcssa72 = $$lcssa96;$$lcssa73 = $$lcssa97;$head$0$lcssa = $$lcssa98;$pshift$0$lcssa = $pshift$1$lcssa;
 } else {
  $$lcssa72 = 0;$$lcssa73 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa73,$$lcssa72,$pshift$0$lcssa,0,$lp);
 $110 = ($pshift$0$lcssa|0)==(1);
 $111 = ($$lcssa73|0)==(1);
 $or$cond74 = $111 & $110;
 $112 = ($$lcssa72|0)==(0);
 $or$cond7075 = $112 & $or$cond74;
 if ($or$cond7075) {
  STACKTOP = sp;return;
 }
 $115 = $$lcssa73;$124 = $$lcssa72;$head$176 = $head$0$lcssa;$pshift$277 = $pshift$0$lcssa;
 while(1) {
  $113 = ($pshift$277|0)<(2);
  if ($113) {
   $114 = (($115) + -1)|0;
   $116 = ($114|0)==(0);
   do {
    if ($116) {
     $137 = 32;
     label = 66;
    } else {
     $117 = $114 & 1;
     $118 = ($117|0)==(0);
     if ($118) {
      $$02$i$i = $114;$nTrailingZeros$03$i$i = 0;
      while(1) {
       $119 = (($nTrailingZeros$03$i$i) + 1)|0;
       $120 = $$02$i$i >>> 1;
       $121 = $120 & 1;
       $122 = ($121|0)==(0);
       if ($122) {
        $$02$i$i = $120;$nTrailingZeros$03$i$i = $119;
       } else {
        $$lcssa = $119;
        break;
       }
      }
      $123 = ($$lcssa|0)==(0);
      if ($123) {
       label = 60;
      } else {
       $134 = $$lcssa;
      }
     } else {
      label = 60;
     }
     if ((label|0) == 60) {
      label = 0;
      $125 = ($124|0)==(0);
      if ($125) {
       $137 = 64;
       label = 66;
       break;
      }
      $126 = $124 & 1;
      $127 = ($126|0)==(0);
      if (!($127)) {
       $$0$i49 = 0;$159 = $115;$162 = $124;$166 = 0;
       break;
      }
      $$02$i3$i = $124;$nTrailingZeros$03$i2$i = 0;
      while(1) {
       $128 = (($nTrailingZeros$03$i2$i) + 1)|0;
       $129 = $$02$i3$i >>> 1;
       $130 = $129 & 1;
       $131 = ($130|0)==(0);
       if ($131) {
        $$02$i3$i = $129;$nTrailingZeros$03$i2$i = $128;
       } else {
        $$lcssa95 = $128;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
        break;
       }
      }
      $132 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
      $133 = ($$lcssa95|0)==(0);
      if ($133) {
       $$0$i49 = 0;$159 = $115;$162 = $124;$166 = 0;
       break;
      } else {
       $134 = $132;
      }
     }
     $135 = ($134>>>0)>(31);
     if ($135) {
      $137 = $134;
      label = 66;
     } else {
      $$0$i49 = $134;$159 = $115;$162 = $124;$166 = $134;
     }
    }
   } while(0);
   if ((label|0) == 66) {
    label = 0;
    $136 = (($137) + -32)|0;
    $$0$i49 = $136;$159 = $124;$162 = 0;$166 = $137;
   }
   $158 = $159 >>> $$0$i49;
   $160 = (32 - ($$0$i49))|0;
   $161 = $162 << $160;
   $163 = $161 | $158;
   $164 = $162 >>> $$0$i49;
   $165 = (($166) + ($pshift$277))|0;
   $$pre = (($head$176) + ($10)|0);
   $167 = ($165|0)==(1);
   $168 = ($163|0)==(1);
   $or$cond = $168 & $167;
   $169 = ($164|0)==(0);
   $or$cond70 = $169 & $or$cond;
   if ($or$cond70) {
    break;
   } else {
    $$be = $163;$$be94 = $164;$head$176$be = $$pre;$pshift$277$be = $165;
   }
  } else {
   $138 = $124 << 2;
   $139 = $115 >>> 30;
   $140 = $139 | $138;
   $141 = (($pshift$277) + -2)|0;
   $142 = $115 << 1;
   $143 = $142 & 2147483646;
   $144 = $139 << 31;
   $145 = $143 | $144;
   $146 = $145 ^ 3;
   $147 = $140 >>> 1;
   $148 = (($lp) + ($141<<2)|0);
   $149 = HEAP32[$148>>2]|0;
   $sum = (($149) + ($width))|0;
   $$sum2 = (0 - ($sum))|0;
   $150 = (($head$176) + ($$sum2)|0);
   $151 = (($pshift$277) + -1)|0;
   _trinkle($150,$width,$cmp,$146,$147,$151,1,$lp);
   $152 = $147 << 1;
   $153 = $139 & 1;
   $154 = $152 | $153;
   $155 = $146 << 1;
   $156 = $155 | 1;
   $157 = (($head$176) + ($10)|0);
   _trinkle($157,$width,$cmp,$156,$154,$141,1,$lp);
   $$be = $156;$$be94 = $154;$head$176$be = $157;$pshift$277$be = $141;
  }
  $115 = $$be;$124 = $$be94;$head$176 = $head$176$be;$pshift$277 = $pshift$277$be;
 }
 STACKTOP = sp;return;
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$0211$lcssa = 0, $$1 = 0, $$1$lcssa = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$0$lcssa$ph = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$0211 = $s;
   while(1) {
    $8 = HEAP8[$$0211>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ($8<<24>>24)==($5<<24>>24);
    $or$cond = $9 | $10;
    if ($or$cond) {
     $$0211$lcssa = $$0211;
     break;
    }
    $11 = (($$0211) + 1|0);
    $12 = $11;
    $13 = $12 & 3;
    $14 = ($13|0)==(0);
    if ($14) {
     $$lcssa = $11;
     label = 7;
     break;
    } else {
     $$0211 = $11;
    }
   }
   if ((label|0) == 7) {
    $$02$lcssa = $$lcssa;
    break;
   }
   $$0 = $$0211$lcssa;
   return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 if ($21) {
  $23 = $16;$w$08 = $$02$lcssa;
  while(1) {
   $22 = $23 ^ $15;
   $24 = (($22) + -16843009)|0;
   $25 = $22 & -2139062144;
   $26 = $25 ^ -2139062144;
   $27 = $26 & $24;
   $28 = ($27|0)==(0);
   if (!($28)) {
    $w$0$lcssa$ph = $w$08;
    break;
   }
   $29 = (($w$08) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + -16843009)|0;
   $32 = $30 & -2139062144;
   $33 = $32 ^ -2139062144;
   $34 = $33 & $31;
   $35 = ($34|0)==(0);
   if ($35) {
    $23 = $30;$w$08 = $29;
   } else {
    $w$0$lcssa$ph = $29;
    break;
   }
  }
  $w$0$lcssa = $w$0$lcssa$ph;
 } else {
  $w$0$lcssa = $$02$lcssa;
 }
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond5 = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond5) {
   $$1$lcssa = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 $$0 = $$1$lcssa;
 return ($$0|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$03$lcssa$ph = 0, $$035 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $2 = (($c) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if (!($4)) {
   ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$027 = $c;$13 = $0;
   while(1) {
    $12 = $13 & 31;
    $14 = $12&255;
    $15 = 1 << $14;
    $div4 = ($13&255) >>> 5;
    $16 = $div4&255;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = (($$027) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$027 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $$03$lcssa = $s;
   } else {
    $$035 = $s;$23 = $10;
    while(1) {
     $div = ($23&255) >>> 5;
     $24 = $div&255;
     $25 = (($byteset) + ($24<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $23 & 31;
     $28 = $27&255;
     $29 = 1 << $28;
     $30 = $26 & $29;
     $31 = ($30|0)==(0);
     if (!($31)) {
      $$03$lcssa$ph = $$035;
      break;
     }
     $32 = (($$035) + 1|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$03$lcssa$ph = $32;
      break;
     } else {
      $$035 = $32;$23 = $33;
     }
    }
    $$03$lcssa = $$03$lcssa$ph;
   }
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = $0 << 24 >> 24;
 $6 = (___strchrnul($s,$5)|0);
 $7 = $6;
 $8 = $s;
 $9 = (($7) - ($8))|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($2|0),($s|0),($1|0))|0;
 $$0 = $2;
 return ($$0|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$1$lcssa$ph = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($c) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$03 = $s;
  while(1) {
   $5 = HEAP8[$$03>>0]|0;
   $6 = ($5<<24>>24)==($0<<24>>24);
   $7 = (($$03) + 1|0);
   if ($6) {
    $$03 = $7;
   } else {
    $$03$lcssa = $$03;
    break;
   }
  }
  $8 = $$03$lcssa;
  $9 = $s;
  $10 = (($8) - ($9))|0;
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 $$028 = $c;$14 = $0;
 while(1) {
  $13 = $14 & 31;
  $15 = $13&255;
  $16 = 1 << $15;
  $div4 = ($14&255) >>> 5;
  $17 = $div4&255;
  $18 = (($byteset) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 | $16;
  HEAP32[$18>>2] = $20;
  $21 = (($$028) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   break;
  } else {
   $$028 = $21;$14 = $22;
  }
 }
 $11 = HEAP8[$s>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$1$lcssa = $s;
 } else {
  $$16 = $s;$24 = $11;
  while(1) {
   $div = ($24&255) >>> 5;
   $25 = $div&255;
   $26 = (($byteset) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $24 & 31;
   $29 = $28&255;
   $30 = 1 << $29;
   $31 = $27 & $30;
   $32 = ($31|0)==(0);
   if ($32) {
    $$1$lcssa$ph = $$16;
    break;
   }
   $33 = (($$16) + 1|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    $$1$lcssa$ph = $33;
    break;
   } else {
    $$16 = $33;$24 = $34;
   }
  }
  $$1$lcssa = $$1$lcssa$ph;
 }
 $36 = $$1$lcssa;
 $37 = $s;
 $38 = (($36) - ($37))|0;
 $$0 = $38;
 STACKTOP = sp;return ($$0|0);
}
function _strtok($s,$sep) {
 $s = $s|0;
 $sep = $sep|0;
 var $$0 = 0, $$01 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[22784>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$01 = $1;
  }
 } else {
  $$01 = $s;
 }
 $3 = (_strspn($$01,$sep)|0);
 $4 = (($$01) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  HEAP32[22784>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $7 = (_strcspn($4,$sep)|0);
 $$sum = (($7) + ($3))|0;
 $8 = (($$01) + ($$sum)|0);
 HEAP32[22784>>2] = $8;
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  HEAP32[22784>>2] = 0;
  $$0 = $4;
  return ($$0|0);
 } else {
  $$sum2 = (($$sum) + 1)|0;
  $11 = (($$01) + ($$sum2)|0);
  HEAP32[22784>>2] = $11;
  HEAP8[$8>>0] = 0;
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$0$lcssa49$ph = 0, $$01$be$i = 0, $$012 = 0, $$012$i = 0, $$012$lcssa = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02$lcssa51$ph = 0, $$02$us$i = 0, $$02$us$i15 = 0, $$0210 = 0, $$0210$lcssa = 0, $$03$i = 0, $$03$lcssa = 0;
 var $$039 = 0, $$039$lcssa = 0, $$lcssa = 0, $$lcssa57 = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre$i6 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar = 0, $ar$i = 0;
 var $exitcond$i = 0, $exitcond$i14 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa50 = 0, $i$0$lcssa50$ph = 0, $i$01$us$i = 0, $i$01$us$i13 = 0, $i$011 = 0, $i$011$lcssa = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond5 = 0, $or$cond56 = 0, $pp$val17 = 0, $sum = 0, $sum$i = 0;
 var $tmp$i = 0, $tmp$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i9 = sp + 712|0;
 $tmp$i = sp + 456|0;
 $ar$i = sp + 228|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)==(1);
 $2 = ($pp$1$val|0)==(0);
 $or$cond56 = $2 & $1;
 do {
  if ($or$cond56) {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 22;
  } else {
   $$012 = $head;$$0210 = $pshift;$$039 = $trusty;$106 = $2;$33 = $pp$1$val;$7 = $head;$i$011 = 1;$pp$val17 = $pp$val;
   while(1) {
    $3 = (($lp) + ($$0210<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (0 - ($4))|0;
    $6 = (($$012) + ($5)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 63]($6,$7)|0);
    $9 = ($8|0)<(1);
    if ($9) {
     $$012$lcssa = $$012;$$0210$lcssa = $$0210;$$039$lcssa = $$039;$i$011$lcssa = $i$011;
     label = 21;
     break;
    }
    $10 = ($$039|0)==(0);
    $11 = ($$0210|0)>(1);
    $or$cond = $10 & $11;
    if ($or$cond) {
     $12 = (($$012) + ($0)|0);
     $13 = (($$0210) + -2)|0;
     $14 = (($lp) + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_iii[$cmp & 63]($12,$6)|0);
     $17 = ($16|0)>(-1);
     if ($17) {
      $$0$lcssa49$ph = $$012;$$02$lcssa51$ph = $$0210;$i$0$lcssa50$ph = $i$011;
      label = 23;
      break;
     }
     $sum = (($15) + ($width))|0;
     $$sum = (0 - ($sum))|0;
     $18 = (($$012) + ($$sum)|0);
     $19 = (FUNCTION_TABLE_iii[$cmp & 63]($18,$6)|0);
     $20 = ($19|0)>(-1);
     if ($20) {
      $$0$lcssa49$ph = $$012;$$02$lcssa51$ph = $$0210;$i$0$lcssa50$ph = $i$011;
      label = 23;
      break;
     }
    }
    $21 = (($i$011) + 1)|0;
    $22 = (($ar) + ($i$011<<2)|0);
    HEAP32[$22>>2] = $6;
    $23 = (($pp$val17) + -1)|0;
    $24 = ($23|0)==(0);
    do {
     if ($24) {
      $44 = 32;
      label = 18;
     } else {
      $25 = $23 & 1;
      $26 = ($25|0)==(0);
      if ($26) {
       $$02$i$i = $23;$nTrailingZeros$03$i$i = 0;
       while(1) {
        $27 = (($nTrailingZeros$03$i$i) + 1)|0;
        $28 = $$02$i$i >>> 1;
        $29 = $28 & 1;
        $30 = ($29|0)==(0);
        if ($30) {
         $$02$i$i = $28;$nTrailingZeros$03$i$i = $27;
        } else {
         $$lcssa = $27;
         break;
        }
       }
       $31 = ($$lcssa|0)==(0);
       if ($31) {
        label = 12;
       } else {
        $41 = $$lcssa;
       }
      } else {
       label = 12;
      }
      if ((label|0) == 12) {
       label = 0;
       if ($106) {
        $44 = 64;
        label = 18;
        break;
       }
       $32 = $33 & 1;
       $34 = ($32|0)==(0);
       if (!($34)) {
        $$0$i = 0;$46 = $pp$val17;$49 = $33;$53 = 0;
        break;
       }
       $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
       while(1) {
        $35 = (($nTrailingZeros$03$i2$i) + 1)|0;
        $36 = $$02$i3$i >>> 1;
        $37 = $36 & 1;
        $38 = ($37|0)==(0);
        if ($38) {
         $$02$i3$i = $36;$nTrailingZeros$03$i2$i = $35;
        } else {
         $$lcssa57 = $35;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
         break;
        }
       }
       $39 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
       $40 = ($$lcssa57|0)==(0);
       if ($40) {
        $$0$i = 0;$46 = $pp$val17;$49 = $33;$53 = 0;
        break;
       } else {
        $41 = $39;
       }
      }
      $42 = ($41>>>0)>(31);
      if ($42) {
       $44 = $41;
       label = 18;
      } else {
       $$0$i = $41;$46 = $pp$val17;$49 = $33;$53 = $41;
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     $43 = (($44) + -32)|0;
     $$0$i = $43;$46 = $33;$49 = 0;$53 = $44;
    }
    $45 = $46 >>> $$0$i;
    $47 = (32 - ($$0$i))|0;
    $48 = $49 << $47;
    $50 = $48 | $45;
    $51 = $49 >>> $$0$i;
    $52 = (($53) + ($$0210))|0;
    $54 = ($50|0)==(1);
    $55 = ($51|0)==(0);
    $or$cond5 = $55 & $54;
    if ($or$cond5) {
     $$0$lcssa49$ph = $6;$$02$lcssa51$ph = $52;$i$0$lcssa50$ph = $21;
     label = 23;
     break;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $6;$$0210 = $52;$$039 = 0;$106 = $55;$33 = $51;$7 = $$pre;$i$011 = $21;$pp$val17 = $50;
   }
   if ((label|0) == 21) {
    $$0$lcssa = $$012$lcssa;$$02$lcssa = $$0210$lcssa;$$03$lcssa = $$039$lcssa;$i$0$lcssa = $i$011$lcssa;
    label = 22;
    break;
   }
   else if ((label|0) == 23) {
    $$0$lcssa49 = $$0$lcssa49$ph;$$02$lcssa51 = $$02$lcssa51$ph;$i$0$lcssa50 = $i$0$lcssa50$ph;
    break;
   }
  }
 } while(0);
 if ((label|0) == 22) {
  $56 = ($$03$lcssa|0)==(0);
  if ($56) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $57 = ($i$0$lcssa50|0)<(2);
 if (!($57)) {
  $58 = (($ar) + ($i$0$lcssa50<<2)|0);
  HEAP32[$58>>2] = $tmp$i9;
  $59 = ($width|0)==(0);
  if (!($59)) {
   $60 = (($i$0$lcssa50) + -1)|0;
   $$02$us$i15 = $width;$72 = $tmp$i9;
   while(1) {
    $70 = ($$02$us$i15>>>0)>(256);
    $62 = $70 ? 256 : $$02$us$i15;
    $71 = HEAP32[$ar>>2]|0;
    _memcpy(($72|0),($71|0),($62|0))|0;
    $68 = $71;$i$01$us$i13 = 0;
    while(1) {
     $64 = (($ar) + ($i$01$us$i13<<2)|0);
     $65 = (($i$01$us$i13) + 1)|0;
     $66 = (($ar) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     _memcpy(($68|0),($67|0),($62|0))|0;
     $69 = (($68) + ($62)|0);
     HEAP32[$64>>2] = $69;
     $exitcond$i14 = ($i$01$us$i13|0)==($60|0);
     if ($exitcond$i14) {
      break;
     } else {
      $68 = $67;$i$01$us$i13 = $65;
     }
    }
    $61 = ($$02$us$i15|0)==($62|0);
    if ($61) {
     break;
    }
    $63 = (($$02$us$i15) - ($62))|0;
    $$pre$i11 = HEAP32[$58>>2]|0;
    $$02$us$i15 = $63;$72 = $$pre$i11;
   }
  }
 }
 HEAP32[$ar$i>>2] = $$0$lcssa49;
 $73 = ($$02$lcssa51|0)>(1);
 if ($73) {
  $$012$i = $$02$lcssa51;$$03$i = $$0$lcssa49;$79 = $$0$lcssa49;$i$04$i = 1;
  while(1) {
   $74 = (($$03$i) + ($0)|0);
   $75 = (($$012$i) + -2)|0;
   $76 = (($lp) + ($75<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $sum$i = (($77) + ($width))|0;
   $$sum$i = (0 - ($sum$i))|0;
   $78 = (($$03$i) + ($$sum$i)|0);
   $80 = (FUNCTION_TABLE_iii[$cmp & 63]($79,$78)|0);
   $81 = ($80|0)>(-1);
   if ($81) {
    $82 = (FUNCTION_TABLE_iii[$cmp & 63]($79,$74)|0);
    $83 = ($82|0)>(-1);
    if ($83) {
     $i$0$lcssa$i = $i$04$i;
     break;
    }
   }
   $84 = (FUNCTION_TABLE_iii[$cmp & 63]($78,$74)|0);
   $85 = ($84|0)>(-1);
   $86 = (($i$04$i) + 1)|0;
   $87 = (($ar$i) + ($i$04$i<<2)|0);
   if ($85) {
    HEAP32[$87>>2] = $78;
    $88 = (($$012$i) + -1)|0;
    $$0$be$i = $78;$$01$be$i = $88;
   } else {
    HEAP32[$87>>2] = $74;
    $$0$be$i = $74;$$01$be$i = $75;
   }
   $89 = ($$01$be$i|0)>(1);
   if (!($89)) {
    $i$0$lcssa$i = $86;
    break;
   }
   $$pre$i = HEAP32[$ar$i>>2]|0;
   $$012$i = $$01$be$i;$$03$i = $$0$be$i;$79 = $$pre$i;$i$04$i = $86;
  }
  $90 = ($i$0$lcssa$i|0)<(2);
  if ($90) {
   $107 = $tmp$i;
  } else {
   $91 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
   HEAP32[$91>>2] = $tmp$i;
   $92 = ($width|0)==(0);
   if ($92) {
    $107 = $tmp$i;
   } else {
    $93 = (($i$0$lcssa$i) + -1)|0;
    $$02$us$i = $width;$105 = $tmp$i;
    while(1) {
     $103 = ($$02$us$i>>>0)>(256);
     $95 = $103 ? 256 : $$02$us$i;
     $104 = HEAP32[$ar$i>>2]|0;
     _memcpy(($105|0),($104|0),($95|0))|0;
     $101 = $104;$i$01$us$i = 0;
     while(1) {
      $97 = (($ar$i) + ($i$01$us$i<<2)|0);
      $98 = (($i$01$us$i) + 1)|0;
      $99 = (($ar$i) + ($98<<2)|0);
      $100 = HEAP32[$99>>2]|0;
      _memcpy(($101|0),($100|0),($95|0))|0;
      $102 = (($101) + ($95)|0);
      HEAP32[$97>>2] = $102;
      $exitcond$i = ($i$01$us$i|0)==($93|0);
      if ($exitcond$i) {
       break;
      } else {
       $101 = $100;$i$01$us$i = $98;
      }
     }
     $94 = ($$02$us$i|0)==($95|0);
     if ($94) {
      break;
     }
     $96 = (($$02$us$i) - ($95))|0;
     $$pre$i6 = HEAP32[$91>>2]|0;
     $$02$us$i = $96;$105 = $$pre$i6;
    }
    $107 = $tmp$i;
   }
  }
 } else {
  $107 = $tmp$i;
 }
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa146 = 0, $$lcssa148 = 0, $$lcssa151 = 0, $$lcssa152 = 0, $$lcssa153 = 0, $$lcssa154 = 0, $$lcssa156 = 0, $$lcssa159 = 0, $$lcssa161 = 0, $$lcssa163 = 0, $$lcssa165 = 0, $$lcssa167 = 0, $$lcssa169 = 0, $$lcssa172 = 0, $$lcssa174 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0;
 var $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre108 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$rsize$3$i$lcssa = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2337 = 0;
 var $$sum$i32 = 0, $$sum$i38 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0;
 var $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0;
 var $$sum3$i = 0, $$sum3$i27 = 0, $$sum3$pre$i$i = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0;
 var $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$08$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$be = 0, $R$0$i$i = 0, $R$0$i$i$be = 0, $R$0$i$i$lcssa = 0, $R$0$i$i$ph = 0, $R$0$i$lcssa = 0, $R$0$i$ph = 0, $R$0$i18 = 0;
 var $R$0$i18$be = 0, $R$0$i18$lcssa = 0, $R$0$i18$ph = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$be = 0, $RP$0$i$i = 0, $RP$0$i$i$be = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$i$ph = 0, $RP$0$i$lcssa = 0, $RP$0$i$ph = 0, $RP$0$i17 = 0, $RP$0$i17$be = 0, $RP$0$i17$lcssa = 0, $RP$0$i17$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0;
 var $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $T$07$i$i = 0, $T$07$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i26$i = 0;
 var $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond55$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$1$i$lcssa = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0;
 var $rsize$331$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0, $rst$1$i$lcssa = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$082$i = 0, $sp$082$i$lcssa = 0, $sp$181$i = 0, $sp$181$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$0$i14$lcssa = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0;
 var $t$2$v$3$i$lcssa = 0, $t$230$i = 0, $t$230$i$be = 0, $t$230$i$ph = 0, $tbase$253$i = 0, $tsize$0313843$i = 0, $tsize$1$i = 0, $tsize$252$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$1$i$lcssa = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, $v$332$i$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[22792>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((22792 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((22792 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[22792>>2] = $22;
     } else {
      $23 = HEAP32[((22792 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((22792 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((22792 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((22792 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[22792>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((22792 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((22792 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((22792 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((22792 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[22792>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[22792>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre108 = ((22792 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre108;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((22792 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((22792 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((22792 + 8|0))>>2] = $81;
     HEAP32[((22792 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((22792 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((22792 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((22792 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i$ph = $171;$RP$0$i$ph = $170;
        }
       } else {
        $R$0$i$ph = $168;$RP$0$i$ph = $167;
       }
       $R$0$i = $R$0$i$ph;$RP$0$i = $RP$0$i$ph;
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if ($175) {
         $176 = (($R$0$i) + 16|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ($177|0)==(0|0);
         if ($178) {
          $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
          break;
         } else {
          $R$0$i$be = $177;$RP$0$i$be = $176;
         }
        } else {
         $R$0$i$be = $174;$RP$0$i$be = $173;
        }
        $R$0$i = $R$0$i$be;$RP$0$i = $RP$0$i$be;
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((22792 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((22792 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((22792 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((22792 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((22792 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((22792 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i38 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i38)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((22792 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((22792 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((22792 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[22792>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[22792>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((22792 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((22792 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((22792 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((22792 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((22792 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((22792 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((22792 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 93;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $$lcssa174 = $286;$t$0$i14$lcssa = $t$0$i14;
          label = 97;
          break;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$1$i$lcssa = $rsize$1$i;$rst$1$i$lcssa = $rst$1$i;$v$1$i$lcssa = $v$1$i;
         label = 92;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
       if ((label|0) == 92) {
        $rsize$2$i = $rsize$1$i$lcssa;$t$1$i = $rst$1$i$lcssa;$v$2$i = $v$1$i$lcssa;
        label = 93;
        break;
       }
       else if ((label|0) == 97) {
        $rsize$331$i$ph = $$lcssa174;$t$230$i$ph = $t$0$i14$lcssa;$v$332$i$ph = $t$0$i14$lcssa;
        label = 98;
        break;
       }
      }
     } while(0);
     if ((label|0) == 93) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = ((22792 + ($327<<2)|0) + 304|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;
      } else {
       $t$2$ph$i = $t$1$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
      } else {
       $rsize$331$i$ph = $rsize$2$i;$t$230$i$ph = $t$2$ph$i;$v$332$i$ph = $v$2$i;
       label = 98;
      }
     }
     if ((label|0) == 98) {
      $rsize$331$i = $rsize$331$i$ph;$t$230$i = $t$230$i$ph;$v$332$i = $v$332$i$ph;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if ($338) {
        $339 = (($t$230$i) + 20|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = ($340|0)==(0|0);
        if ($341) {
         $$rsize$3$i$lcssa = $$rsize$3$i;$t$2$v$3$i$lcssa = $t$2$v$3$i;
         break;
        } else {
         $t$230$i$be = $340;
        }
       } else {
        $t$230$i$be = $337;
       }
       $rsize$331$i = $$rsize$3$i;$t$230$i = $t$230$i$be;$v$332$i = $t$2$v$3$i;
      }
      $rsize$3$lcssa$i = $$rsize$3$i$lcssa;$v$3$lcssa$i = $t$2$v$3$i$lcssa;
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((22792 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((22792 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18$ph = $368;$RP$0$i17$ph = $367;
          }
         } else {
          $R$0$i18$ph = $365;$RP$0$i17$ph = $364;
         }
         $R$0$i18 = $R$0$i18$ph;$RP$0$i17 = $RP$0$i17$ph;
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = (($R$0$i18) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
            break;
           } else {
            $R$0$i18$be = $374;$RP$0$i17$be = $373;
           }
          } else {
           $R$0$i18$be = $371;$RP$0$i17$be = $370;
          }
          $R$0$i18 = $R$0$i18$be;$RP$0$i17 = $RP$0$i17$be;
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((22792 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((22792 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((22792 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((22792 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((22792 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((22792 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L218: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2337 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2337)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((22792 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[22792>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[22792>>2] = $430;
           $$sum14$pre$i = (($424) + 2)|0;
           $$pre$i25 = ((22792 + ($$sum14$pre$i<<2)|0) + 40|0);
           $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = ((22792 + ($$sum17$i<<2)|0) + 40|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[((22792 + 16|0))>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((22792 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((22792 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((22792 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa169 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $$lcssa172 = $487;
             label = 164;
             break;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           if ((label|0) == 164) {
            $T$0$lcssa$i = $$lcssa172;
            break;
           }
           $494 = HEAP32[((22792 + 16|0))>>2]|0;
           $495 = ($$lcssa169>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa169>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L218;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((22792 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((22792 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((22792 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((22792 + 20|0))>>2] = $514;
   HEAP32[((22792 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((22792 + 8|0))>>2] = 0;
   HEAP32[((22792 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((22792 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((22792 + 12|0))>>2] = $528;
  $529 = HEAP32[((22792 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((22792 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[23264>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((23264 + 8|0))>>2] = $538;
    HEAP32[((23264 + 4|0))>>2] = $538;
    HEAP32[((23264 + 12|0))>>2] = -1;
    HEAP32[((23264 + 16|0))>>2] = -1;
    HEAP32[((23264 + 20|0))>>2] = 0;
    HEAP32[((22792 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[23264>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((23264 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((22792 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((22792 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((22792 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L282: do {
  if ($560) {
   $561 = HEAP32[((22792 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   do {
    if ($562) {
     label = 191;
    } else {
     $sp$0$i$i = ((22792 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa165 = $sp$0$i$i;$$lcssa167 = $565;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 190;
       break;
      } else {
       $sp$0$i$i = $570;
      }
     }
     if ((label|0) == 190) {
      label = 191;
      break;
     }
     $594 = HEAP32[((22792 + 12|0))>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa165>>2]|0;
      $600 = HEAP32[$$lcssa167>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0313843$i = $596;
       } else {
        $tbase$253$i = $598;$tsize$252$i = $596;
        label = 211;
        break L282;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;
       label = 201;
      }
     } else {
      $tsize$0313843$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 191) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0313843$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[((23264 + 4|0))>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[((22792 + 432|0))>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[((22792 + 440|0))>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0313843$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       if ($593) {
        $tbase$253$i = $572;$tsize$252$i = $ssize$0$i;
        label = 211;
        break L282;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;
        label = 201;
       }
      } else {
       $tsize$0313843$i = 0;
      }
     }
    }
   } while(0);
   L306: do {
    if ((label|0) == 201) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond4$i = $607 & $or$cond5$i;
     do {
      if ($or$cond4$i) {
       $608 = HEAP32[((23264 + 8|0))>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0313843$i = 0;
         break L306;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0313843$i = 0;
     } else {
      $tbase$253$i = $br$0$ph$i;$tsize$252$i = $ssize$2$i;
      label = 211;
      break L282;
     }
    }
   } while(0);
   $618 = HEAP32[((22792 + 444|0))>>2]|0;
   $619 = $618 | 4;
   HEAP32[((22792 + 444|0))>>2] = $619;
   $tsize$1$i = $tsize$0313843$i;
   label = 208;
  } else {
   $tsize$1$i = 0;
   label = 208;
  }
 } while(0);
 if ((label|0) == 208) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond6$i = $625 & $or$cond3$i;
   if ($or$cond6$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$253$i = $621;$tsize$252$i = $$tsize$1$i;
     label = 211;
    }
   }
  }
 }
 if ((label|0) == 211) {
  $631 = HEAP32[((22792 + 432|0))>>2]|0;
  $632 = (($631) + ($tsize$252$i))|0;
  HEAP32[((22792 + 432|0))>>2] = $632;
  $633 = HEAP32[((22792 + 436|0))>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[((22792 + 436|0))>>2] = $632;
  }
  $635 = HEAP32[((22792 + 24|0))>>2]|0;
  $636 = ($635|0)==(0|0);
  L325: do {
   if ($636) {
    $637 = HEAP32[((22792 + 16|0))>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$253$i>>>0)<($637>>>0);
    $or$cond8$i = $638 | $639;
    if ($or$cond8$i) {
     HEAP32[((22792 + 16|0))>>2] = $tbase$253$i;
    }
    HEAP32[((22792 + 448|0))>>2] = $tbase$253$i;
    HEAP32[((22792 + 452|0))>>2] = $tsize$252$i;
    HEAP32[((22792 + 460|0))>>2] = 0;
    $640 = HEAP32[23264>>2]|0;
    HEAP32[((22792 + 36|0))>>2] = $640;
    HEAP32[((22792 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = ((22792 + ($641<<2)|0) + 40|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = ((22792 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = ((22792 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$252$i) + -40)|0;
    $647 = (($tbase$253$i) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    if ($650) {
     $654 = 0;
    } else {
     $651 = (0 - ($648))|0;
     $652 = $651 & 7;
     $654 = $652;
    }
    $653 = (($tbase$253$i) + ($654)|0);
    $655 = (($646) - ($654))|0;
    HEAP32[((22792 + 24|0))>>2] = $653;
    HEAP32[((22792 + 12|0))>>2] = $655;
    $656 = $655 | 1;
    $$sum$i12$i = (($654) + 4)|0;
    $657 = (($tbase$253$i) + ($$sum$i12$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$252$i) + -36)|0;
    $658 = (($tbase$253$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[((23264 + 16|0))>>2]|0;
    HEAP32[((22792 + 28|0))>>2] = $659;
   } else {
    $sp$082$i = ((22792 + 448|0));
    while(1) {
     $660 = HEAP32[$sp$082$i>>2]|0;
     $661 = (($sp$082$i) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$253$i|0)==($663|0);
     if ($664) {
      $$lcssa159 = $660;$$lcssa161 = $661;$$lcssa163 = $662;$sp$082$i$lcssa = $sp$082$i;
      label = 224;
      break;
     }
     $665 = (($sp$082$i) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      label = 229;
      break;
     } else {
      $sp$082$i = $666;
     }
    }
    if ((label|0) == 224) {
     $668 = (($sp$082$i$lcssa) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa159>>>0);
      $673 = ($635>>>0)<($tbase$253$i>>>0);
      $or$cond55$i = $673 & $672;
      if ($or$cond55$i) {
       $674 = (($$lcssa163) + ($tsize$252$i))|0;
       HEAP32[$$lcssa161>>2] = $674;
       $675 = HEAP32[((22792 + 12|0))>>2]|0;
       $676 = (($675) + ($tsize$252$i))|0;
       $677 = (($635) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       if ($680) {
        $684 = 0;
       } else {
        $681 = (0 - ($678))|0;
        $682 = $681 & 7;
        $684 = $682;
       }
       $683 = (($635) + ($684)|0);
       $685 = (($676) - ($684))|0;
       HEAP32[((22792 + 24|0))>>2] = $683;
       HEAP32[((22792 + 12|0))>>2] = $685;
       $686 = $685 | 1;
       $$sum$i16$i = (($684) + 4)|0;
       $687 = (($635) + ($$sum$i16$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i17$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i17$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[((23264 + 16|0))>>2]|0;
       HEAP32[((22792 + 28|0))>>2] = $689;
       break;
      }
     }
    }
    else if ((label|0) == 229) {
    }
    $690 = HEAP32[((22792 + 16|0))>>2]|0;
    $691 = ($tbase$253$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[((22792 + 16|0))>>2] = $tbase$253$i;
     $755 = $tbase$253$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$253$i) + ($tsize$252$i)|0);
    $sp$181$i = ((22792 + 448|0));
    while(1) {
     $693 = HEAP32[$sp$181$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa156 = $sp$181$i;$sp$181$i$lcssa = $sp$181$i;
      label = 235;
      break;
     }
     $695 = (($sp$181$i) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      label = 236;
      break;
     } else {
      $sp$181$i = $696;
     }
    }
    if ((label|0) == 235) {
     $698 = (($sp$181$i$lcssa) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa156>>2] = $tbase$253$i;
      $702 = (($sp$181$i$lcssa) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$252$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = (($tbase$253$i) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      if ($708) {
       $712 = 0;
      } else {
       $709 = (0 - ($706))|0;
       $710 = $709 & 7;
       $712 = $710;
      }
      $711 = (($tbase$253$i) + ($712)|0);
      $$sum110$i = (($tsize$252$i) + 8)|0;
      $713 = (($tbase$253$i) + ($$sum110$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      if ($716) {
       $719 = 0;
      } else {
       $717 = (0 - ($714))|0;
       $718 = $717 & 7;
       $719 = $718;
      }
      $$sum111$i = (($719) + ($tsize$252$i))|0;
      $720 = (($tbase$253$i) + ($$sum111$i)|0);
      $721 = $720;
      $722 = $711;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($712) + ($nb$0))|0;
      $724 = (($tbase$253$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($712) + 4)|0;
      $727 = (($tbase$253$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L354: do {
       if ($728) {
        $729 = HEAP32[((22792 + 12|0))>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[((22792 + 12|0))>>2] = $730;
        HEAP32[((22792 + 24|0))>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$253$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[((22792 + 20|0))>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[((22792 + 8|0))>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[((22792 + 8|0))>>2] = $736;
         HEAP32[((22792 + 20|0))>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$253$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$253$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$252$i) + 4)|0;
        $$sum112$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$253$i) + ($$sum112$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L362: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum122$i = (($$sum3738$i$i) + ($tsize$252$i))|0;
           $747 = (($tbase$253$i) + ($$sum122$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$252$i) + 12)|0;
           $$sum123$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$253$i) + ($$sum123$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = ((22792 + ($751<<2)|0) + 40|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = (($748) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[22792>>2]|0;
            $763 = $762 & $761;
            HEAP32[22792>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre58$i$i = (($750) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = (($750) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi59$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = (($748) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum113$i = (($$sum34$i$i) + ($tsize$252$i))|0;
           $770 = (($tbase$253$i) + ($$sum113$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$252$i) + 12)|0;
           $$sum114$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$253$i) + ($$sum114$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum120$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$253$i) + ($$sum120$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum121$i = (($$sum67$i$i) + ($tsize$252$i))|0;
              $787 = (($tbase$253$i) + ($$sum121$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i$ph = $788;$RP$0$i$i$ph = $787;
              }
             } else {
              $R$0$i$i$ph = $785;$RP$0$i$i$ph = $784;
             }
             $R$0$i$i = $R$0$i$i$ph;$RP$0$i$i = $RP$0$i$i$ph;
             while(1) {
              $790 = (($R$0$i$i) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if ($792) {
               $793 = (($R$0$i$i) + 16|0);
               $794 = HEAP32[$793>>2]|0;
               $795 = ($794|0)==(0|0);
               if ($795) {
                $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                break;
               } else {
                $R$0$i$i$be = $794;$RP$0$i$i$be = $793;
               }
              } else {
               $R$0$i$i$be = $791;$RP$0$i$i$be = $790;
              }
              $R$0$i$i = $R$0$i$i$be;$RP$0$i$i = $RP$0$i$i$be;
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum115$i = (($$sum3536$i$i) + ($tsize$252$i))|0;
             $775 = (($tbase$253$i) + ($$sum115$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = (($776) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = (($773) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$252$i) + 28)|0;
           $$sum116$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$253$i) + ($$sum116$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ((22792 + ($799<<2)|0) + 304|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[((22792 + 4|0))>>2]|0;
             $806 = $805 & $804;
             HEAP32[((22792 + 4|0))>>2] = $806;
             break L362;
            } else {
             $807 = HEAP32[((22792 + 16|0))>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = (($771) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = (($771) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L362;
             }
            }
           } while(0);
           $814 = HEAP32[((22792 + 16|0))>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = (($R$1$i$i) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum117$i = (($$sum3132$i$i) + ($tsize$252$i))|0;
           $817 = (($tbase$253$i) + ($$sum117$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = (($R$1$i$i) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = (($818) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum118$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$253$i) + ($$sum118$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[((22792 + 16|0))>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = (($R$1$i$i) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = (($824) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum119$i = (($$sum9$i$i) + ($tsize$252$i))|0;
         $830 = (($tbase$253$i) + ($$sum119$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = (($oldfirst$0$i$i) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$253$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$253$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = ((22792 + ($840<<2)|0) + 40|0);
         $842 = HEAP32[22792>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[22792>>2] = $846;
           $$sum26$pre$i$i = (($840) + 2)|0;
           $$pre$i22$i = ((22792 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i23$iZ2D = $$pre$i22$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = ((22792 + ($$sum29$i$i<<2)|0) + 40|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[((22792 + 16|0))>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = (($F4$0$i$i) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$253$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$253$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = ((22792 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$253$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$253$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$253$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[((22792 + 4|0))>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[((22792 + 4|0))>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$253$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$253$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$253$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ($I7$0$i$i|0)==(31);
        if ($892) {
         $900 = 0;
        } else {
         $893 = $I7$0$i$i >>> 1;
         $894 = (25 - ($893))|0;
         $900 = $894;
        }
        $895 = (($891) + 4|0);
        $896 = HEAP32[$895>>2]|0;
        $897 = $896 & -8;
        $898 = ($897|0)==($qsize$0$i$i|0);
        do {
         if ($898) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $899 = $qsize$0$i$i << $900;
          $K8$053$i$i = $899;$T$052$i$i = $891;
          while(1) {
           $907 = $K8$053$i$i >>> 31;
           $908 = ((($T$052$i$i) + ($907<<2)|0) + 16|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $901 = $K8$053$i$i << 1;
           $902 = (($903) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $$lcssa146 = $903;
            label = 316;
            break;
           } else {
            $K8$053$i$i = $901;$T$052$i$i = $903;
           }
          }
          if ((label|0) == 316) {
           $T$0$lcssa$i25$i = $$lcssa146;
           break;
          }
          $910 = HEAP32[((22792 + 16|0))>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$253$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$253$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$253$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L354;
          }
         }
        } while(0);
        $915 = (($T$0$lcssa$i25$i) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[((22792 + 16|0))>>2]|0;
        $918 = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = ($916>>>0)>=($917>>>0);
        $or$cond$i26$i = $918 & $919;
        if ($or$cond$i26$i) {
         $920 = (($916) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$253$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$253$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$253$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $712 | 8;
      $924 = (($tbase$253$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     }
    }
    else if ((label|0) == 236) {
    }
    $sp$0$i$i$i = ((22792 + 448|0));
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = (($sp$0$i$i$i) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa152 = $925;$$lcssa153 = $928;$$lcssa154 = $929;
       break;
      }
     }
     $931 = (($sp$0$i$i$i) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i13$i = (($$lcssa153) + -47)|0;
    $$sum1$i14$i = (($$lcssa153) + -39)|0;
    $933 = (($$lcssa152) + ($$sum1$i14$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    if ($936) {
     $939 = 0;
    } else {
     $937 = (0 - ($934))|0;
     $938 = $937 & 7;
     $939 = $938;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($939))|0;
    $940 = (($$lcssa152) + ($$sum2$i15$i)|0);
    $941 = (($635) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = (($943) + 8|0);
    $945 = (($tsize$252$i) + -40)|0;
    $946 = (($tbase$253$i) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    if ($949) {
     $953 = 0;
    } else {
     $950 = (0 - ($947))|0;
     $951 = $950 & 7;
     $953 = $951;
    }
    $952 = (($tbase$253$i) + ($953)|0);
    $954 = (($945) - ($953))|0;
    HEAP32[((22792 + 24|0))>>2] = $952;
    HEAP32[((22792 + 12|0))>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($953) + 4)|0;
    $956 = (($tbase$253$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$252$i) + -36)|0;
    $957 = (($tbase$253$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[((23264 + 16|0))>>2]|0;
    HEAP32[((22792 + 28|0))>>2] = $958;
    $959 = (($943) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944+0>>2]=HEAP32[((22792 + 448|0))+0>>2]|0;HEAP32[$944+4>>2]=HEAP32[((22792 + 448|0))+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[((22792 + 448|0))+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[((22792 + 448|0))+12>>2]|0;
    HEAP32[((22792 + 448|0))>>2] = $tbase$253$i;
    HEAP32[((22792 + 452|0))>>2] = $tsize$252$i;
    HEAP32[((22792 + 460|0))>>2] = 0;
    HEAP32[((22792 + 456|0))>>2] = $944;
    $960 = (($943) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = (($943) + 32|0);
    $962 = ($961>>>0)<($$lcssa154>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = (($964) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = (($964) + 8|0);
      $966 = ($965>>>0)<($$lcssa154>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = (($635) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = ((22792 + ($977<<2)|0) + 40|0);
      $979 = HEAP32[22792>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      do {
       if ($982) {
        $983 = $979 | $980;
        HEAP32[22792>>2] = $983;
        $$sum3$pre$i$i = (($977) + 2)|0;
        $$pre$i$i = ((22792 + ($$sum3$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $978;
       } else {
        $$sum4$i$i = (($977) + 2)|0;
        $984 = ((22792 + ($$sum4$i$i<<2)|0) + 40|0);
        $985 = HEAP32[$984>>2]|0;
        $986 = HEAP32[((22792 + 16|0))>>2]|0;
        $987 = ($985>>>0)<($986>>>0);
        if (!($987)) {
         $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = (($F$0$i$i) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = (($635) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = (($635) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = ((22792 + ($I1$0$i$i<<2)|0) + 304|0);
     $1017 = (($635) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = (($635) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[((22792 + 4|0))>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[((22792 + 4|0))>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = (($635) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = (($635) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = (($635) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ($I1$0$i$i|0)==(31);
     if ($1028) {
      $1036 = 0;
     } else {
      $1029 = $I1$0$i$i >>> 1;
      $1030 = (25 - ($1029))|0;
      $1036 = $1030;
     }
     $1031 = (($1027) + 4|0);
     $1032 = HEAP32[$1031>>2]|0;
     $1033 = $1032 & -8;
     $1034 = ($1033|0)==($970|0);
     do {
      if ($1034) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1035 = $970 << $1036;
       $K2$08$i$i = $1035;$T$07$i$i = $1027;
       while(1) {
        $1043 = $K2$08$i$i >>> 31;
        $1044 = ((($T$07$i$i) + ($1043<<2)|0) + 16|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa148 = $1044;$T$07$i$i$lcssa = $T$07$i$i;
         break;
        }
        $1037 = $K2$08$i$i << 1;
        $1038 = (($1039) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $$lcssa151 = $1039;
         label = 353;
         break;
        } else {
         $K2$08$i$i = $1037;$T$07$i$i = $1039;
        }
       }
       if ((label|0) == 353) {
        $T$0$lcssa$i$i = $$lcssa151;
        break;
       }
       $1046 = HEAP32[((22792 + 16|0))>>2]|0;
       $1047 = ($$lcssa148>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa148>>2] = $635;
        $1048 = (($635) + 24|0);
        HEAP32[$1048>>2] = $T$07$i$i$lcssa;
        $1049 = (($635) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = (($635) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L325;
       }
      }
     } while(0);
     $1051 = (($T$0$lcssa$i$i) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[((22792 + 16|0))>>2]|0;
     $1054 = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = ($1052>>>0)>=($1053>>>0);
     $or$cond$i$i = $1054 & $1055;
     if ($or$cond$i$i) {
      $1056 = (($1052) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = (($635) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = (($635) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = (($635) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[((22792 + 12|0))>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[((22792 + 12|0))>>2] = $1062;
   $1063 = HEAP32[((22792 + 24|0))>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[((22792 + 24|0))>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = (($1063) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = (($1063) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$lcssa71 = 0, $$pre = 0, $$pre$phi60Z2D = 0, $$pre$phi62Z2D = 0, $$pre$phiZ2D = 0, $$pre59 = 0, $$pre61 = 0, $$sum = 0, $$sum10$pre = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0;
 var $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$054 = 0, $R$0 = 0, $R$0$be = 0;
 var $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$053 = 0, $T$053$lcssa = 0, $cond = 0;
 var $cond48 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((22792 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((22792 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((22792 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((22792 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[22792>>2]|0;
     $36 = $35 & $34;
     HEAP32[22792>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre61 = (($24) + 8|0);
     $$pre$phi62Z2D = $$pre61;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi62Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi62Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $61;$RP$0$ph = $60;
      }
     } else {
      $R$0$ph = $58;$RP$0$ph = $57;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if ($65) {
       $66 = (($R$0) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)==(0|0);
       if ($68) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $67;$RP$0$be = $66;
       }
      } else {
       $R$0$be = $64;$RP$0$be = $63;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((22792 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((22792 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((22792 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((22792 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((22792 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((22792 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((22792 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((22792 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((22792 + 12|0))>>2] = $120;
   HEAP32[((22792 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((22792 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((22792 + 20|0))>>2] = 0;
   HEAP32[((22792 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((22792 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((22792 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((22792 + 8|0))>>2] = $128;
   HEAP32[((22792 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((22792 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((22792 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[22792>>2]|0;
     $152 = $151 & $150;
     HEAP32[22792>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre59 = (($139) + 8|0);
     $$pre$phi60Z2D = $$pre59;
    } else {
     $154 = HEAP32[((22792 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi60Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi60Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $179;$RP9$0$ph = $178;
       }
      } else {
       $R7$0$ph = $176;$RP9$0$ph = $175;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $184 = (($R7$0) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if ($186) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $185;$RP9$0$be = $184;
        }
       } else {
        $R7$0$be = $182;$RP9$0$be = $181;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $187 = HEAP32[((22792 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((22792 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((22792 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond48 = ($R7$1|0)==(0|0);
      if ($cond48) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((22792 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((22792 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((22792 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((22792 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((22792 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((22792 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((22792 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((22792 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[22792>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[22792>>2] = $239;
   $$sum10$pre = (($233) + 2)|0;
   $$pre = ((22792 + ($$sum10$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = ((22792 + ($$sum11<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((22792 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((22792 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = (($p$0) + 16|0);
 $275 = (($p$0) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[((22792 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L205: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((22792 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$054 = $292;$T$053 = $284;
     while(1) {
      $300 = $K19$054 >>> 31;
      $301 = ((($T$053) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$053$lcssa = $T$053;
       break;
      }
      $294 = $K19$054 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $$lcssa71 = $296;
       label = 137;
       break;
      } else {
       $K19$054 = $294;$T$053 = $296;
      }
     }
     if ((label|0) == 137) {
      $T$0$lcssa = $$lcssa71;
      break;
     }
     $303 = HEAP32[((22792 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$053$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L205;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((22792 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((22792 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((22792 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if (!($319)) {
  return;
 }
 $sp$0$in$i = ((22792 + 456|0));
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((22792 + 32|0))>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $8 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $8 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $9 = (_try_realloc_chunk($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = (($9) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = (($oldmem) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$124 = 0, $$125 = 0, $$22 = 0, $$23 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa121 = 0, $$lcssa122 = 0, $$sum = 0, $$sum14 = 0, $$sum1447 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum1867 = 0, $$sum19 = 0, $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$126 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$373 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$5$be$lcssa = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$755 = 0, $c$8 = 0, $c$8$ph = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond42 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$084 = 0, $x$148 = 0, $x$268 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$lcssa122 = $13;
   break;
  }
 }
 $16 = ($$lcssa122|0)==(45);
 do {
  if ((($$lcssa122|0) == 43) | (($$lcssa122|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $$lcssa122;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$125 = 8;$c$126 = $37;
     label = 48;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum20 = (($46) + 1)|0;
   $47 = (23288 + ($$sum20)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   } else {
    $$125 = 16;$c$126 = $46;
    label = 48;
   }
  } else {
   $$base21 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (23288 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base21>>>0);
   if ($60) {
    $$1 = $$base21;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$084 = 0;
    while(1) {
     $69 = ($x$084*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $$ = $80 & $81;
     if ($$) {
      $71 = $79;$x$084 = $70;
     } else {
      $$lcssa121 = $70;$c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $281 = $$lcssa121;$282 = 0;$c$2$lcssa = $c$2$be$lcssa;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$88 = $82;$c$373 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $89 = ($88|0)<(0);
     $90 = $89 << 31 >> 31;
     $91 = $88 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $88;$283 = $84;$284 = $85;$c$3$lcssa = $c$373;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($88|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond7 = $108 & $113;
     if ($or$cond7) {
      $84 = $98;$85 = $99;$88 = $107;$c$373 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $252 = $284;$254 = $283;
    } else {
     $$124 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 79;
    }
   } else {
    $252 = $282;$254 = $281;
   }
  } else {
   $$125 = $$1;$c$126 = $c$1;
   label = 48;
  }
 }
 do {
  if ((label|0) == 48) {
   $115 = (($$125) + -1)|0;
   $116 = $115 & $$125;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$125*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (23552 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1447 = (($c$126) + 1)|0;
    $128 = (23288 + ($$sum1447)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$125>>>0);
    if ($131) {
     $134 = $130;$x$148 = 0;
     while(1) {
      $132 = $x$148 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum14 = (($c$4$be) + 1)|0;
      $142 = (23288 + ($$sum14)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$125>>>0);
      $146 = ($133>>>0)<(134217728);
      $$22 = $146 & $145;
      if ($$22) {
       $134 = $144;$x$148 = $133;
      } else {
       $$lcssa117 = $133;$$lcssa118 = $143;$c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $150 = $$lcssa118;$152 = 0;$154 = $$lcssa117;$c$4$lcssa = $c$4$be$lcssa;
    } else {
     $150 = $129;$152 = 0;$154 = 0;$c$4$lcssa = $c$126;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$125>>>0);
    $153 = ($152>>>0)>($148>>>0);
    $155 = ($154>>>0)>($147>>>0);
    $156 = ($152|0)==($148|0);
    $157 = $156 & $155;
    $158 = $153 | $157;
    $or$cond42 = $151 | $158;
    if ($or$cond42) {
     $$124 = $$125;$285 = $154;$286 = $152;$c$8 = $c$4$lcssa;
     label = 79;
     break;
    }
    $159 = $154;$160 = $152;$164 = $150;
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum15 = (($c$5$be) + 1)|0;
     $173 = (23288 + ($$sum15)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$125>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $289 = $165;$290 = $162;$c$5$be$lcssa = $c$5$be;
      break;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
    $$124 = $$125;$285 = $289;$286 = $290;$c$8 = $c$5$be$lcssa;
    label = 79;
    break;
   }
   $$sum1867 = (($c$126) + 1)|0;
   $118 = (23288 + ($$sum1867)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$125>>>0);
   if ($121) {
    $184 = $120;$x$268 = 0;
    while(1) {
     $182 = Math_imul($x$268, $$125)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum18 = (($c$6$be) + 1)|0;
     $192 = (23288 + ($$sum18)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$125>>>0);
     $196 = ($183>>>0)<(119304647);
     $$23 = $196 & $195;
     if ($$23) {
      $184 = $194;$x$268 = $183;
     } else {
      $$lcssa119 = $183;$$lcssa120 = $193;$c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $198 = $$lcssa120;$287 = $$lcssa119;$288 = 0;$c$6$lcssa = $c$6$be$lcssa;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$126;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$125>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$125|0),0)|0);
    $201 = tempRet0;
    $202 = $288;$204 = $287;$212 = $198;$c$755 = $c$6$lcssa;
    while(1) {
     $203 = ($202>>>0)>($201>>>0);
     $205 = ($204>>>0)>($200>>>0);
     $206 = ($202|0)==($201|0);
     $207 = $206 & $205;
     $208 = $203 | $207;
     if ($208) {
      $291 = $204;$292 = $202;$c$8$ph = $c$755;
      break;
     }
     $209 = (___muldi3(($204|0),($202|0),($$125|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $291 = $204;$292 = $202;$c$8$ph = $c$755;
      break;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum19 = (($c$7$be) + 1)|0;
     $228 = (23288 + ($$sum19)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$125>>>0);
     if ($231) {
      $202 = $220;$204 = $219;$212 = $229;$c$755 = $c$7$be;
     } else {
      $291 = $219;$292 = $220;$c$8$ph = $c$7$be;
      break;
     }
    }
    $$124 = $$125;$285 = $291;$286 = $292;$c$8 = $c$8$ph;
    label = 79;
   } else {
    $$124 = $$125;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 79;
   }
  }
 } while(0);
 if ((label|0) == 79) {
  $$sum16 = (($c$8) + 1)|0;
  $232 = (23288 + ($$sum16)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$124>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum17 = (($c$9$be) + 1)|0;
    $243 = (23288 + ($$sum17)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$124>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $252 = $1;$254 = $0;
  } else {
   $252 = $286;$254 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $253 = ($252>>>0)<($1>>>0);
 $255 = ($254>>>0)<($0>>>0);
 $256 = ($252|0)==($1|0);
 $257 = $256 & $255;
 $258 = $253 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond12 = $262 | $263;
  if (!($or$cond12)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   return ($280|0);
  }
  $267 = ($252>>>0)>($1>>>0);
  $268 = ($254>>>0)>($0>>>0);
  $269 = ($252|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $254 ^ $neg$0;
 $276 = $252 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 return ($280|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  $$sink = $2;
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $$sink;
  return;
 }
 $11 = (($4) + ($lim)|0);
 $$sink = $11;
 $12 = (($f) + 100|0);
 HEAP32[$12>>2] = $$sink;
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 63]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 63]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa8 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 63]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     label = 12;
     break;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa8 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   if ((label|0) == 12) {
    $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    break;
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 63]($f,$s,$i$0$lcssa8)|0);
   $26 = ($25>>>0)<($i$0$lcssa8>>>0);
   if ($26) {
    $$0 = $i$0$lcssa8;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa8)|0);
    $28 = (($l) - ($i$0$lcssa8))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa8;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 63]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=24136+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa = 0, $$lcssa7 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa7 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa7>>0]|0;
  $$1$ph = $$lcssa7;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if (!($isdigit2)) {
  $n$0$lcssa = 0;
  $14 = ($neg$1$ph|0)!=(0);
  $15 = (0 - ($n$0$lcssa))|0;
  $16 = $14 ? $n$0$lcssa : $15;
  return ($16|0);
 }
 $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
 while(1) {
  $9 = ($n$04*10)|0;
  $10 = (($$13) + 1|0);
  $11 = (($9) - ($isdigittmp5))|0;
  $12 = HEAP8[$10>>0]|0;
  $13 = $12 << 24 >> 24;
  $isdigittmp = (($13) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
  } else {
   $$lcssa = $11;
   break;
  }
 }
 $n$0$lcssa = $$lcssa;
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = (($s) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = (($f$i) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,-1,-1)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  tempRet0 = $7;
  STACKTOP = sp;return ($6|0);
 }
 $9 = (($f$i) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 tempRet0 = $7;
 STACKTOP = sp;return ($6|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = (($s) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = (($f$i) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  tempRet0 = $7;
  STACKTOP = sp;return ($6|0);
 }
 $9 = (($f$i) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 tempRet0 = $7;
 STACKTOP = sp;return ($6|0);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = (($s) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = (($f$i) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,-2147483648,0)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return ($6|0);
 }
 $9 = (($f$i) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 STACKTOP = sp;return ($6|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$019$lcssa = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$24$ph = 0, $$3 = 0, $$3$ph = 0, $$lcssa = 0, $$lcssa57 = 0, $$lcssa58 = 0, $$lcssa61 = 0, $$lcssa62 = 0, $$lcssa63 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$020$lcssa = 0;
 var $s$15 = 0, $s$15$ph = 0, $s$2 = 0, $s$2$ph = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$019$lcssa = $$019;$s$020$lcssa = $s$020;
     label = 7;
     break;
    }
    $8 = (($s$020) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$lcssa61 = $8;$$lcssa62 = $9;$$lcssa63 = $13;
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $$0$lcssa = $$lcssa62;$$lcssa = $$lcssa63;$s$0$lcssa = $$lcssa61;
    label = 6;
    break;
   }
   else if ((label|0) == 7) {
    $$0$lcssa44 = $$019$lcssa;$s$0$lcssa43 = $s$020$lcssa;
    break;
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
   $35 = ($$3|0)!=(0);
   $36 = $35 ? $s$2 : 0;
   return ($36|0);
  }
 }
 $14 = HEAP8[$s$0$lcssa43>>0]|0;
 $15 = $c&255;
 $16 = ($14<<24>>24)==($15<<24>>24);
 if ($16) {
  $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $17 = Math_imul($0, 16843009)|0;
 $18 = ($$0$lcssa44>>>0)>(3);
 do {
  if ($18) {
   $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
   while(1) {
    $19 = HEAP32[$w$011>>2]|0;
    $20 = $19 ^ $17;
    $21 = (($20) + -16843009)|0;
    $22 = $20 & -2139062144;
    $23 = $22 ^ -2139062144;
    $24 = $23 & $21;
    $25 = ($24|0)==(0);
    if (!($25)) {
     $$110$lcssa = $$110;$w$011$lcssa = $w$011;
     label = 12;
     break;
    }
    $26 = (($w$011) + 4|0);
    $27 = (($$110) + -4)|0;
    $28 = ($27>>>0)>(3);
    if ($28) {
     $$110 = $27;$w$011 = $26;
    } else {
     $$lcssa57 = $26;$$lcssa58 = $27;
     label = 14;
     break;
    }
   }
   if ((label|0) == 12) {
    $$24$ph = $$110$lcssa;$s$15$ph = $w$011$lcssa;
    break;
   }
   else if ((label|0) == 14) {
    $$1$lcssa = $$lcssa58;$w$0$lcssa = $$lcssa57;
    label = 15;
    break;
   }
  } else {
   $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $29 = ($$1$lcssa|0)==(0);
  if ($29) {
   $$3 = 0;$s$2 = $w$0$lcssa;
   $35 = ($$3|0)!=(0);
   $36 = $35 ? $s$2 : 0;
   return ($36|0);
  } else {
   $$24$ph = $$1$lcssa;$s$15$ph = $w$0$lcssa;
  }
 }
 $$24 = $$24$ph;$s$15 = $s$15$ph;
 while(1) {
  $30 = HEAP8[$s$15>>0]|0;
  $31 = ($30<<24>>24)==($15<<24>>24);
  if ($31) {
   $$3$ph = $$24;$s$2$ph = $s$15;
   break;
  }
  $32 = (($s$15) + 1|0);
  $33 = (($$24) + -1)|0;
  $34 = ($33|0)==(0);
  if ($34) {
   $$3$ph = 0;$s$2$ph = $32;
   break;
  } else {
   $$24 = $33;$s$15 = $32;
  }
 }
 $$3 = $$3$ph;$s$2 = $s$2$ph;
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 }
 $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa13 = $2;
   label = 5;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = (($l$04) + 1|0);
  $6 = (($r$05) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   label = 6;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  $8 = $$lcssa&255;
  $9 = $$lcssa13&255;
  $10 = (($8) - ($9))|0;
  $11 = $10;
  return ($11|0);
 }
 else if ((label|0) == 6) {
  $11 = 0;
  return ($11|0);
 }
 return (0)|0;
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa11 = 0, $$lcssa12 = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa11 = $6;$$lcssa12 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
  $$lcssa = $$lcssa11;$$lcssa2 = $$lcssa12;
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$0$lcssa$ph = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $13 = 0;$r$0$lcssa = $_r;
 } else {
  $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
  while(1) {
   $$08 = (($$08$in) + -1)|0;
   $3 = HEAP8[$r$07>>0]|0;
   $4 = ($3<<24>>24)!=(0);
   $5 = ($$08|0)!=(0);
   $or$cond = $5 & $4;
   $7 = ($6<<24>>24)==($3<<24>>24);
   $or$cond4 = $7 & $or$cond;
   if (!($or$cond4)) {
    $$ph = $6;$r$0$lcssa$ph = $r$07;
    break;
   }
   $8 = (($l$06) + 1|0);
   $9 = (($r$07) + 1|0);
   $10 = HEAP8[$8>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $$ph = 0;$r$0$lcssa$ph = $9;
    break;
   } else {
    $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
   }
  }
  $13 = $$ph;$r$0$lcssa = $r$0$lcssa$ph;
 }
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0;
 var $RP$0$ph = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((22792 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((23264 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[((22792 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((22792 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((22792 + 24|0))>>2] = $36;
  HEAP32[((22792 + 12|0))>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[((22792 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((22792 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((22792 + 8|0))>>2] = $storemerge21;
  HEAP32[((22792 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((22792 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[22792>>2]|0;
    $88 = $87 & $86;
    HEAP32[22792>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $113;$RP$0$ph = $112;
      }
     } else {
      $R$0$ph = $110;$RP$0$ph = $109;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $118 = (($R$0) + 16|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(0|0);
       if ($120) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $119;$RP$0$be = $118;
       }
      } else {
       $R$0$be = $116;$RP$0$be = $115;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((22792 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((22792 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((22792 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((22792 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((22792 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((22792 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa62 = 0, $$pre = 0, $$pre$phi51Z2D = 0, $$pre$phi53Z2D = 0, $$pre$phiZ2D = 0, $$pre50 = 0, $$pre52 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6$pre = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$045 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0;
 var $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$044 = 0, $T$044$lcssa = 0, $cond = 0, $cond40 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((22792 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((22792 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((22792 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((22792 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[22792>>2]|0;
     $32 = $31 & $30;
     HEAP32[22792>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre52 = (($20) + 8|0);
     $$pre$phi53Z2D = $$pre52;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi53Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi53Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $57;$RP$0$ph = $56;
      }
     } else {
      $R$0$ph = $54;$RP$0$ph = $53;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if ($61) {
       $62 = (($R$0) + 16|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if ($64) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $63;$RP$0$be = $62;
       }
      } else {
       $R$0$be = $60;$RP$0$be = $59;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((22792 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((22792 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((22792 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((22792 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((22792 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((22792 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((22792 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((22792 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((22792 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((22792 + 12|0))>>2] = $115;
   HEAP32[((22792 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((22792 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[((22792 + 20|0))>>2] = 0;
   HEAP32[((22792 + 8|0))>>2] = 0;
   return;
  }
  $120 = HEAP32[((22792 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((22792 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((22792 + 8|0))>>2] = $123;
   HEAP32[((22792 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((22792 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[22792>>2]|0;
     $146 = $145 & $144;
     HEAP32[22792>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre50 = (($134) + 8|0);
     $$pre$phi51Z2D = $$pre50;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi51Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi51Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $171;$RP9$0$ph = $170;
       }
      } else {
       $R7$0$ph = $168;$RP9$0$ph = $167;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = (($R7$0) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $177;$RP9$0$be = $176;
        }
       } else {
        $R7$0$be = $174;$RP9$0$be = $173;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((22792 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond40 = ($R7$1|0)==(0|0);
      if ($cond40) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((22792 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((22792 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((22792 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((22792 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((22792 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((22792 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((22792 + 8|0))>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((22792 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[22792>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[22792>>2] = $230;
   $$sum6$pre = (($224) + 2)|0;
   $$pre = ((22792 + ($$sum6$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = ((22792 + ($$sum7<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((22792 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((22792 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = (($$0) + 16|0);
 $266 = (($$0) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[((22792 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((22792 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$045 = $283;$T$044 = $275;
   while(1) {
    $291 = $K20$045 >>> 31;
    $292 = ((($T$044) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$044$lcssa = $T$044;
     break;
    }
    $285 = $K20$045 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $$lcssa62 = $287;
     label = 134;
     break;
    } else {
     $K20$045 = $285;$T$044 = $287;
    }
   }
   if ((label|0) == 134) {
    $T$0$lcssa = $$lcssa62;
    break;
   }
   $294 = HEAP32[((22792 + 16|0))>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$044$lcssa;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((22792 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0;
 var $$0$lcssa$i69 = 0, $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$0$ph = 0, $$0$ph340 = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0;
 var $$01$i67 = 0, $$01$i69$i = 0, $$01$i74 = 0, $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$12$i = 0;
 var $$12$i$i = 0, $$12$i118$i = 0, $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$21 = 0, $$216$$29$i = 0, $$216$$31$i = 0, $$216$i = 0, $$25 = 0, $$26 = 0, $$26$i = 0, $$26$us$i = 0, $$27$i = 0, $$28$i = 0.0;
 var $$29$i = 0, $$3$i = 0.0, $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$93 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us309$i = 0, $$a$3$us310$i = 0, $$a$3$us310$i$lcssa = 0, $$a$3311$i = 0, $$a$3312$i = 0, $$a$3312$i$lcssa = 0, $$be = 0, $$be341 = 0;
 var $$be342 = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa107 = 0, $$lcssa107$ph = 0, $$lcssa283$i = 0, $$lcssa344 = 0, $$lcssa345 = 0, $$lcssa346 = 0, $$lcssa347 = 0, $$lcssa348 = 0, $$lcssa350 = 0, $$lcssa352 = 0, $$lcssa353 = 0, $$lcssa354 = 0, $$lcssa355 = 0, $$lcssa356 = 0, $$lcssa357 = 0, $$lcssa358 = 0;
 var $$lcssa359 = 0, $$lcssa360 = 0, $$lcssa361 = 0, $$lcssa362 = 0, $$lcssa363 = 0, $$lcssa364 = 0, $$lcssa365 = 0, $$lcssa367 = 0, $$lcssa368 = 0, $$lcssa369 = 0, $$lcssa370 = 0, $$lcssa371 = 0, $$lcssa372 = 0, $$lcssa373 = 0, $$lcssa374 = 0, $$lcssa375 = 0, $$lcssa376 = 0, $$lcssa377 = 0, $$lcssa378 = 0.0, $$lcssa379 = 0;
 var $$lcssa381 = 0, $$lcssa382 = 0, $$lcssa384 = 0, $$lcssa385 = 0, $$lcssa386 = 0, $$mask$i = 0, $$mask$i39 = 0, $$mask1$i = 0, $$mask1$i38 = 0, $$neg159$i = 0, $$neg160$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$ph = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre = 0, $$pre$i = 0;
 var $$pre269 = 0, $$pre308$i = 0, $$sum$i = 0, $$sum21$i = 0, $$sum22$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $$z$4$us$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0;
 var $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0;
 var $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0;
 var $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0;
 var $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0;
 var $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0.0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0.0, $1168 = 0, $1169 = 0, $117 = 0;
 var $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0;
 var $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $140$phi = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0.0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0.0, $473 = 0.0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0;
 var $544 = 0.0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0.0, $638 = 0.0, $639 = 0.0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $655$phi = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0.0, $777 = 0.0;
 var $778 = 0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $955$phi = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$2$ph$i$lcssa = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0;
 var $a$6$i$lcssa = 0, $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0;
 var $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0;
 var $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0;
 var $d$0255$i = 0, $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0, $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0;
 var $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded112 = 0, $expanded113 = 0, $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0;
 var $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0, $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded140 = 0, $expanded141 = 0, $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0;
 var $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0, $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded168 = 0, $expanded169 = 0, $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0;
 var $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0, $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded196 = 0, $expanded197 = 0, $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0;
 var $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0, $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0;
 var $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded98 = 0, $expanded99 = 0, $fl$0111 = 0, $fl$0111$ph = 0, $fl$0171 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0;
 var $i$0$lcssa = 0, $i$0$lcssa272 = 0, $i$0176 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1187 = 0, $i$1230$i = 0, $i$2163 = 0, $i$2163$lcssa = 0, $i$2217$i = 0, $i$3161 = 0, $i$3213$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i33 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0;
 var $isdigit2$i29 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i32 = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$be = 0, $l$0$i = 0, $l$1$i = 0;
 var $l$1175 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$be = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i108$i = 0, $or$cond$i43$i = 0, $or$cond$i50$i = 0, $or$cond$i58 = 0, $or$cond$i60$i = 0;
 var $or$cond$i65 = 0, $or$cond$i67$i = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i80$i = 0, $or$cond$i82 = 0, $or$cond10$i = 0, $or$cond10191$i = 0, $or$cond12$i = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond23 = 0, $or$cond274 = 0, $or$cond35$i = 0, $or$cond37$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0;
 var $p$4271 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0;
 var $s$1$i = 0, $s$1$i$lcssa = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$i$lcssa = 0, $s$1$us$us$i = 0, $s$1$us$us$i$lcssa = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s8$0188$i$ph = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0, $sext = 0, $sext94 = 0, $small$0$i = 0.0, $small$1$i = 0.0;
 var $st$0 = 0, $st$0$lcssa351 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8109 = 0, $storemerge8109$ph = 0, $storemerge8170 = 0, $t$0 = 0, $t$1 = 0, $uglygep$i = 0, $uglygep296$i = 0, $uglygep300$i = 0, $uglygep300301$i = 0, $umax$i = 0, $umax297$i = 0, $umax297298299$i = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0;
 var $w$25$i = 0, $w$38$i = 0, $wc = 0, $ws$0177 = 0, $ws$1188 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0$lcssa$ph = 0, $z$0164 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
 var $z$2$i$lcssa$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$5$i$lcssa = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1175 = 0;$1176 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 429;
   break;
  }
  $1177 = $22;$26 = $23;
  while(1) {
   if ((($1177<<24>>24) == 37)) {
    $$lcssa = $26;
    label = 9;
    break;
   } else if ((($1177<<24>>24) == 0)) {
    $$lcssa344 = $26;
    label = 14;
    break;
   }
   $25 = (($26) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1177 = $$pre;$26 = $25;
  }
  if ((label|0) == 9) {
   label = 0;
   $28 = $$lcssa;$z$0164 = $$lcssa;
   while(1) {
    $27 = (($28) + 1|0);
    $29 = HEAP8[$27>>0]|0;
    $30 = ($29<<24>>24)==(37);
    if (!($30)) {
     $$lcssa107$ph = $28;$z$0$lcssa$ph = $z$0164;
     break;
    }
    $31 = (($z$0164) + 1|0);
    $32 = (($28) + 2|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33<<24>>24)==(37);
    if ($34) {
     $28 = $32;$z$0164 = $31;
    } else {
     $$lcssa107$ph = $32;$z$0$lcssa$ph = $31;
     break;
    }
   }
   $$lcssa107 = $$lcssa107$ph;$z$0$lcssa = $z$0$lcssa$ph;
  }
  else if ((label|0) == 14) {
   label = 0;
   $$lcssa107 = $$lcssa344;$z$0$lcssa = $$lcssa344;
  }
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  L24: do {
   if ($38) {
    $39 = (($$lcssa107) + 1|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $isdigittmp = (($41) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $42 = (($$lcssa107) + 2|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = ($43<<24>>24)==(36);
     $45 = (($$lcssa107) + 3|0);
     $$93 = $44 ? $45 : $39;
     $$l10n$0 = $44 ? 1 : $l10n$0;
     $isdigittmp$ = $44 ? $isdigittmp : -1;
     $$pre269 = HEAP8[$$93>>0]|0;
     $47 = $$pre269;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$93;
    } else {
     $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
    }
    $46 = $47 << 24 >> 24;
    $48 = $46 & -32;
    $49 = ($48|0)==(32);
    if ($49) {
     $51 = $46;$56 = $47;$fl$0171 = 0;$storemerge8170 = $storemerge;
     while(1) {
      $50 = (($51) + -32)|0;
      $52 = 1 << $50;
      $53 = $52 & 75913;
      $54 = ($53|0)==(0);
      if ($54) {
       $$ph = $56;$fl$0111$ph = $fl$0171;$storemerge8109$ph = $storemerge8170;
       break;
      }
      $55 = $56 << 24 >> 24;
      $57 = (($55) + -32)|0;
      $58 = 1 << $57;
      $59 = $58 | $fl$0171;
      $60 = (($storemerge8170) + 1|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61 << 24 >> 24;
      $63 = $62 & -32;
      $64 = ($63|0)==(32);
      if ($64) {
       $51 = $62;$56 = $61;$fl$0171 = $59;$storemerge8170 = $60;
      } else {
       $$ph = $61;$fl$0111$ph = $59;$storemerge8109$ph = $60;
       break;
      }
     }
     $65 = $$ph;$fl$0111 = $fl$0111$ph;$storemerge8109 = $storemerge8109$ph;
    } else {
     $65 = $47;$fl$0111 = 0;$storemerge8109 = $storemerge;
    }
    $66 = ($65<<24>>24)==(42);
    do {
     if ($66) {
      $67 = (($storemerge8109) + 1|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = $68 << 24 >> 24;
      $isdigittmp11 = (($69) + -48)|0;
      $isdigit12 = ($isdigittmp11>>>0)<(10);
      if ($isdigit12) {
       $70 = (($storemerge8109) + 2|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = ($71<<24>>24)==(36);
       if ($72) {
        $73 = (($nl_type) + ($isdigittmp11<<2)|0);
        HEAP32[$73>>2] = 10;
        $74 = HEAP8[$67>>0]|0;
        $75 = $74 << 24 >> 24;
        $76 = (($75) + -48)|0;
        $77 = (($nl_arg) + ($76<<3)|0);
        $78 = $77;
        $79 = $78;
        $80 = HEAP32[$79>>2]|0;
        $81 = (($78) + 4)|0;
        $82 = $81;
        $83 = HEAP32[$82>>2]|0;
        $84 = (($storemerge8109) + 3|0);
        $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
       } else {
        label = 29;
       }
      } else {
       label = 29;
      }
      if ((label|0) == 29) {
       label = 0;
       $85 = ($l10n$1|0)==(0);
       if (!($85)) {
        $$0$ph340 = -1;
        label = 453;
        break L1;
       }
       if (!($1)) {
        $105 = $67;$fl$1 = $fl$0111;$l10n$3 = 0;$w$1 = 0;
        break;
       }
       $arglist_current = HEAP32[$ap>>2]|0;
       $86 = $arglist_current;
       $87 = (0 + 4|0);
       $expanded64 = $87;
       $expanded = (($expanded64) - 1)|0;
       $88 = (($86) + ($expanded))|0;
       $89 = (0 + 4|0);
       $expanded68 = $89;
       $expanded67 = (($expanded68) - 1)|0;
       $expanded66 = $expanded67 ^ -1;
       $90 = $88 & $expanded66;
       $91 = $90;
       $92 = HEAP32[$91>>2]|0;
       $arglist_next = (($91) + 4|0);
       HEAP32[$ap>>2] = $arglist_next;
       $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
      }
      $93 = ($w$0|0)<(0);
      if ($93) {
       $94 = $fl$0111 | 8192;
       $95 = (0 - ($w$0))|0;
       $105 = $storemerge13;$fl$1 = $94;$l10n$3 = $l10n$2;$w$1 = $95;
      } else {
       $105 = $storemerge13;$fl$1 = $fl$0111;$l10n$3 = $l10n$2;$w$1 = $w$0;
      }
     } else {
      $96 = $65 << 24 >> 24;
      $isdigittmp1$i = (($96) + -48)|0;
      $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
      if ($isdigit2$i) {
       $100 = $storemerge8109;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
       while(1) {
        $97 = ($i$03$i*10)|0;
        $98 = (($97) + ($isdigittmp4$i))|0;
        $99 = (($100) + 1|0);
        $101 = HEAP8[$99>>0]|0;
        $102 = $101 << 24 >> 24;
        $isdigittmp$i = (($102) + -48)|0;
        $isdigit$i = ($isdigittmp$i>>>0)<(10);
        if ($isdigit$i) {
         $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
        } else {
         $$lcssa345 = $98;$$lcssa346 = $99;
         break;
        }
       }
       $103 = ($$lcssa345|0)<(0);
       if ($103) {
        $$0$ph340 = -1;
        label = 453;
        break L1;
       } else {
        $105 = $$lcssa346;$fl$1 = $fl$0111;$l10n$3 = $l10n$1;$w$1 = $$lcssa345;
       }
      } else {
       $105 = $storemerge8109;$fl$1 = $fl$0111;$l10n$3 = $l10n$1;$w$1 = 0;
      }
     }
    } while(0);
    $104 = HEAP8[$105>>0]|0;
    $106 = ($104<<24>>24)==(46);
    do {
     if ($106) {
      $107 = (($105) + 1|0);
      $108 = HEAP8[$107>>0]|0;
      $109 = ($108<<24>>24)==(42);
      if (!($109)) {
       $136 = $108 << 24 >> 24;
       $isdigittmp1$i28 = (($136) + -48)|0;
       $isdigit2$i29 = ($isdigittmp1$i28>>>0)<(10);
       if (!($isdigit2$i29)) {
        $1178 = $107;$p$0 = 0;
        break;
       }
       $1179 = $107;$140 = $105;$i$03$i31 = 0;$isdigittmp4$i30 = $isdigittmp1$i28;
       while(1) {
        $137 = ($i$03$i31*10)|0;
        $138 = (($137) + ($isdigittmp4$i30))|0;
        $139 = (($140) + 2|0);
        $141 = HEAP8[$139>>0]|0;
        $142 = $141 << 24 >> 24;
        $isdigittmp$i32 = (($142) + -48)|0;
        $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
        if ($isdigit$i33) {
         $140$phi = $1179;$1179 = $139;$i$03$i31 = $138;$isdigittmp4$i30 = $isdigittmp$i32;$140 = $140$phi;
        } else {
         $$lcssa347 = $138;$$lcssa348 = $139;
         break;
        }
       }
       $1178 = $$lcssa348;$p$0 = $$lcssa347;
       break;
      }
      $110 = (($105) + 2|0);
      $111 = HEAP8[$110>>0]|0;
      $112 = $111 << 24 >> 24;
      $isdigittmp9 = (($112) + -48)|0;
      $isdigit10 = ($isdigittmp9>>>0)<(10);
      if ($isdigit10) {
       $113 = (($105) + 3|0);
       $114 = HEAP8[$113>>0]|0;
       $115 = ($114<<24>>24)==(36);
       if ($115) {
        $116 = (($nl_type) + ($isdigittmp9<<2)|0);
        HEAP32[$116>>2] = 10;
        $117 = HEAP8[$110>>0]|0;
        $118 = $117 << 24 >> 24;
        $119 = (($118) + -48)|0;
        $120 = (($nl_arg) + ($119<<3)|0);
        $121 = $120;
        $122 = $121;
        $123 = HEAP32[$122>>2]|0;
        $124 = (($121) + 4)|0;
        $125 = $124;
        $126 = HEAP32[$125>>2]|0;
        $127 = (($105) + 4|0);
        $1178 = $127;$p$0 = $123;
        break;
       }
      }
      $128 = ($l10n$3|0)==(0);
      if (!($128)) {
       $$0$ph340 = -1;
       label = 453;
       break L1;
      }
      if ($1) {
       $arglist_current2 = HEAP32[$ap>>2]|0;
       $129 = $arglist_current2;
       $130 = (0 + 4|0);
       $expanded71 = $130;
       $expanded70 = (($expanded71) - 1)|0;
       $131 = (($129) + ($expanded70))|0;
       $132 = (0 + 4|0);
       $expanded75 = $132;
       $expanded74 = (($expanded75) - 1)|0;
       $expanded73 = $expanded74 ^ -1;
       $133 = $131 & $expanded73;
       $134 = $133;
       $135 = HEAP32[$134>>2]|0;
       $arglist_next3 = (($134) + 4|0);
       HEAP32[$ap>>2] = $arglist_next3;
       $1178 = $110;$p$0 = $135;
      } else {
       $1178 = $110;$p$0 = 0;
      }
     } else {
      $1178 = $105;$p$0 = -1;
     }
    } while(0);
    $144 = $1178;$st$0 = 0;
    while(1) {
     $143 = HEAP8[$144>>0]|0;
     $145 = $143 << 24 >> 24;
     $146 = (($145) + -65)|0;
     $147 = ($146>>>0)>(57);
     if ($147) {
      label = 452;
      break L1;
     }
     $148 = (($144) + 1|0);
     $149 = ((23568 + (($st$0*58)|0)|0) + ($146)|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = (($151) + -1)|0;
     $153 = ($152>>>0)<(8);
     if ($153) {
      $144 = $148;$st$0 = $151;
     } else {
      $$lcssa350 = $144;$$lcssa352 = $148;$$lcssa353 = $150;$$lcssa354 = $151;$st$0$lcssa351 = $st$0;
      break;
     }
    }
    $154 = ($$lcssa353<<24>>24)==(0);
    if ($154) {
     $$0$ph340 = -1;
     label = 453;
     break L1;
    }
    $155 = ($$lcssa353<<24>>24)==(19);
    $156 = ($argpos$0|0)>(-1);
    L74: do {
     if ($155) {
      if ($156) {
       $$0$ph340 = -1;
       label = 453;
       break L1;
      } else {
       $1180 = $1175;$1181 = $1176;
       label = 71;
      }
     } else {
      if ($156) {
       $157 = (($nl_type) + ($argpos$0<<2)|0);
       HEAP32[$157>>2] = $$lcssa354;
       $158 = (($nl_arg) + ($argpos$0<<3)|0);
       $159 = $158;
       $160 = $159;
       $161 = HEAP32[$160>>2]|0;
       $162 = (($159) + 4)|0;
       $163 = $162;
       $164 = HEAP32[$163>>2]|0;
       $1180 = $164;$1181 = $161;
       label = 71;
       break;
      }
      if (!($1)) {
       $$0$ph340 = 0;
       label = 453;
       break L1;
      }
      $165 = ($$lcssa353&255)>(20);
      if ($165) {
       $1182 = $$lcssa352;$267 = $1176;$294 = $1175;
      } else {
       do {
        switch ($$lcssa354|0) {
        case 10:  {
         $arglist_current8 = HEAP32[$ap>>2]|0;
         $174 = $arglist_current8;
         $175 = (0 + 4|0);
         $expanded85 = $175;
         $expanded84 = (($expanded85) - 1)|0;
         $176 = (($174) + ($expanded84))|0;
         $177 = (0 + 4|0);
         $expanded89 = $177;
         $expanded88 = (($expanded89) - 1)|0;
         $expanded87 = $expanded88 ^ -1;
         $178 = $176 & $expanded87;
         $179 = $178;
         $180 = HEAP32[$179>>2]|0;
         $arglist_next9 = (($179) + 4|0);
         HEAP32[$ap>>2] = $arglist_next9;
         $181 = ($180|0)<(0);
         $182 = $181 << 31 >> 31;
         $1182 = $$lcssa352;$267 = $180;$294 = $182;
         break L74;
         break;
        }
        case 18:  {
         $arglist_current32 = HEAP32[$ap>>2]|0;
         $249 = $arglist_current32;
         $250 = (0 + 8|0);
         $expanded141 = $250;
         $expanded140 = (($expanded141) - 1)|0;
         $251 = (($249) + ($expanded140))|0;
         $252 = (0 + 8|0);
         $expanded145 = $252;
         $expanded144 = (($expanded145) - 1)|0;
         $expanded143 = $expanded144 ^ -1;
         $253 = $251 & $expanded143;
         $254 = $253;
         $255 = +HEAPF64[$254>>3];
         $arglist_next33 = (($254) + 8|0);
         HEAP32[$ap>>2] = $arglist_next33;
         HEAPF64[tempDoublePtr>>3] = $255;$256 = HEAP32[tempDoublePtr>>2]|0;
         $257 = HEAP32[tempDoublePtr+4>>2]|0;
         $1182 = $$lcssa352;$267 = $256;$294 = $257;
         break L74;
         break;
        }
        case 12:  {
         $arglist_current14 = HEAP32[$ap>>2]|0;
         $190 = $arglist_current14;
         $191 = (0 + 8|0);
         $expanded99 = $191;
         $expanded98 = (($expanded99) - 1)|0;
         $192 = (($190) + ($expanded98))|0;
         $193 = (0 + 8|0);
         $expanded103 = $193;
         $expanded102 = (($expanded103) - 1)|0;
         $expanded101 = $expanded102 ^ -1;
         $194 = $192 & $expanded101;
         $195 = $194;
         $196 = $195;
         $197 = $196;
         $198 = HEAP32[$197>>2]|0;
         $199 = (($196) + 4)|0;
         $200 = $199;
         $201 = HEAP32[$200>>2]|0;
         $arglist_next15 = (($195) + 8|0);
         HEAP32[$ap>>2] = $arglist_next15;
         $1182 = $$lcssa352;$267 = $198;$294 = $201;
         break L74;
         break;
        }
        case 11:  {
         $arglist_current11 = HEAP32[$ap>>2]|0;
         $183 = $arglist_current11;
         $184 = (0 + 4|0);
         $expanded92 = $184;
         $expanded91 = (($expanded92) - 1)|0;
         $185 = (($183) + ($expanded91))|0;
         $186 = (0 + 4|0);
         $expanded96 = $186;
         $expanded95 = (($expanded96) - 1)|0;
         $expanded94 = $expanded95 ^ -1;
         $187 = $185 & $expanded94;
         $188 = $187;
         $189 = HEAP32[$188>>2]|0;
         $arglist_next12 = (($188) + 4|0);
         HEAP32[$ap>>2] = $arglist_next12;
         $1182 = $$lcssa352;$267 = $189;$294 = 0;
         break L74;
         break;
        }
        case 16:  {
         $arglist_current26 = HEAP32[$ap>>2]|0;
         $233 = $arglist_current26;
         $234 = (0 + 4|0);
         $expanded127 = $234;
         $expanded126 = (($expanded127) - 1)|0;
         $235 = (($233) + ($expanded126))|0;
         $236 = (0 + 4|0);
         $expanded131 = $236;
         $expanded130 = (($expanded131) - 1)|0;
         $expanded129 = $expanded130 ^ -1;
         $237 = $235 & $expanded129;
         $238 = $237;
         $239 = HEAP32[$238>>2]|0;
         $arglist_next27 = (($238) + 4|0);
         HEAP32[$ap>>2] = $arglist_next27;
         $$mask$i39 = $239 & 255;
         $1182 = $$lcssa352;$267 = $$mask$i39;$294 = 0;
         break L74;
         break;
        }
        case 17:  {
         $arglist_current29 = HEAP32[$ap>>2]|0;
         $240 = $arglist_current29;
         $241 = (0 + 8|0);
         $expanded134 = $241;
         $expanded133 = (($expanded134) - 1)|0;
         $242 = (($240) + ($expanded133))|0;
         $243 = (0 + 8|0);
         $expanded138 = $243;
         $expanded137 = (($expanded138) - 1)|0;
         $expanded136 = $expanded137 ^ -1;
         $244 = $242 & $expanded136;
         $245 = $244;
         $246 = +HEAPF64[$245>>3];
         $arglist_next30 = (($245) + 8|0);
         HEAP32[$ap>>2] = $arglist_next30;
         HEAPF64[tempDoublePtr>>3] = $246;$247 = HEAP32[tempDoublePtr>>2]|0;
         $248 = HEAP32[tempDoublePtr+4>>2]|0;
         $1182 = $$lcssa352;$267 = $247;$294 = $248;
         break L74;
         break;
        }
        case 13:  {
         $arglist_current17 = HEAP32[$ap>>2]|0;
         $202 = $arglist_current17;
         $203 = (0 + 4|0);
         $expanded106 = $203;
         $expanded105 = (($expanded106) - 1)|0;
         $204 = (($202) + ($expanded105))|0;
         $205 = (0 + 4|0);
         $expanded110 = $205;
         $expanded109 = (($expanded110) - 1)|0;
         $expanded108 = $expanded109 ^ -1;
         $206 = $204 & $expanded108;
         $207 = $206;
         $208 = HEAP32[$207>>2]|0;
         $arglist_next18 = (($207) + 4|0);
         HEAP32[$ap>>2] = $arglist_next18;
         $209 = $208&65535;
         $210 = $209 << 16 >> 16;
         $211 = ($210|0)<(0);
         $212 = $211 << 31 >> 31;
         $sext94 = $208 << 16;
         $213 = $sext94 >> 16;
         $1182 = $$lcssa352;$267 = $213;$294 = $212;
         break L74;
         break;
        }
        case 15:  {
         $arglist_current23 = HEAP32[$ap>>2]|0;
         $221 = $arglist_current23;
         $222 = (0 + 4|0);
         $expanded120 = $222;
         $expanded119 = (($expanded120) - 1)|0;
         $223 = (($221) + ($expanded119))|0;
         $224 = (0 + 4|0);
         $expanded124 = $224;
         $expanded123 = (($expanded124) - 1)|0;
         $expanded122 = $expanded123 ^ -1;
         $225 = $223 & $expanded122;
         $226 = $225;
         $227 = HEAP32[$226>>2]|0;
         $arglist_next24 = (($226) + 4|0);
         HEAP32[$ap>>2] = $arglist_next24;
         $228 = $227&255;
         $229 = $228 << 24 >> 24;
         $230 = ($229|0)<(0);
         $231 = $230 << 31 >> 31;
         $sext = $227 << 24;
         $232 = $sext >> 24;
         $1182 = $$lcssa352;$267 = $232;$294 = $231;
         break L74;
         break;
        }
        case 14:  {
         $arglist_current20 = HEAP32[$ap>>2]|0;
         $214 = $arglist_current20;
         $215 = (0 + 4|0);
         $expanded113 = $215;
         $expanded112 = (($expanded113) - 1)|0;
         $216 = (($214) + ($expanded112))|0;
         $217 = (0 + 4|0);
         $expanded117 = $217;
         $expanded116 = (($expanded117) - 1)|0;
         $expanded115 = $expanded116 ^ -1;
         $218 = $216 & $expanded115;
         $219 = $218;
         $220 = HEAP32[$219>>2]|0;
         $arglist_next21 = (($219) + 4|0);
         HEAP32[$ap>>2] = $arglist_next21;
         $$mask1$i38 = $220 & 65535;
         $1182 = $$lcssa352;$267 = $$mask1$i38;$294 = 0;
         break L74;
         break;
        }
        case 9:  {
         $arglist_current5 = HEAP32[$ap>>2]|0;
         $166 = $arglist_current5;
         $167 = (0 + 4|0);
         $expanded78 = $167;
         $expanded77 = (($expanded78) - 1)|0;
         $168 = (($166) + ($expanded77))|0;
         $169 = (0 + 4|0);
         $expanded82 = $169;
         $expanded81 = (($expanded82) - 1)|0;
         $expanded80 = $expanded81 ^ -1;
         $170 = $168 & $expanded80;
         $171 = $170;
         $172 = HEAP32[$171>>2]|0;
         $arglist_next6 = (($171) + 4|0);
         HEAP32[$ap>>2] = $arglist_next6;
         $173 = $172;
         $1182 = $$lcssa352;$267 = $173;$294 = $1175;
         break L74;
         break;
        }
        default: {
         $1182 = $$lcssa352;$267 = $1176;$294 = $1175;
         break L74;
        }
        }
       } while(0);
      }
     }
    } while(0);
    if ((label|0) == 71) {
     label = 0;
     if ($1) {
      $1182 = $$lcssa352;$267 = $1181;$294 = $1180;
     } else {
      $$be = $$lcssa352;$$be341 = $1180;$$be342 = $1181;$l$0$be = $37;$l10n$0$be = $l10n$3;
      break;
     }
    }
    $258 = HEAP8[$$lcssa350>>0]|0;
    $259 = $258 << 24 >> 24;
    $260 = ($st$0$lcssa351|0)!=(0);
    $261 = $259 & 15;
    $262 = ($261|0)==(3);
    $or$cond15 = $260 & $262;
    $263 = $259 & -33;
    $t$0 = $or$cond15 ? $263 : $259;
    $264 = $fl$1 & 8192;
    $265 = ($264|0)==(0);
    $266 = $fl$1 & -65537;
    $fl$1$ = $265 ? $fl$1 : $266;
    L96: do {
     switch ($t$0|0) {
     case 112:  {
      $289 = ($p$0>>>0)>(8);
      $290 = $289 ? $p$0 : 8;
      $291 = $fl$1$ | 8;
      $fl$3 = $291;$p$1 = $290;$t$1 = 120;
      label = 82;
      break;
     }
     case 117:  {
      $339 = $294;$341 = $267;$pl$0 = 0;$prefix$0 = 24032;
      label = 96;
      break;
     }
     case 105: case 100:  {
      $332 = ($294|0)<(0);
      if ($332) {
       $333 = (_i64Subtract(0,0,($267|0),($294|0))|0);
       $334 = tempRet0;
       $339 = $334;$341 = $333;$pl$0 = 1;$prefix$0 = 24032;
       label = 96;
       break L96;
      }
      $335 = $fl$1$ & 2048;
      $336 = ($335|0)==(0);
      if ($336) {
       $337 = $fl$1$ & 1;
       $338 = ($337|0)==(0);
       $$ = $338 ? 24032 : ((24032 + 2|0));
       $339 = $294;$341 = $267;$pl$0 = $337;$prefix$0 = $$;
       label = 96;
      } else {
       $339 = $294;$341 = $267;$pl$0 = 1;$prefix$0 = ((24032 + 1|0));
       label = 96;
      }
      break;
     }
     case 88: case 120:  {
      $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
      label = 82;
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      HEAP32[tempDoublePtr>>2] = $267;HEAP32[tempDoublePtr+4>>2] = $294;$432 = +HEAPF64[tempDoublePtr>>3];
      HEAP32[$e2$i>>2] = 0;
      $433 = ($294|0)<(0);
      if ($433) {
       $434 = -$432;
       $$013$i = $434;$pl$0$i = 1;$prefix$0$i = 24056;
      } else {
       $435 = $fl$1$ & 2048;
       $436 = ($435|0)==(0);
       if ($436) {
        $437 = $fl$1$ & 1;
        $438 = ($437|0)==(0);
        $$$i = $438 ? ((24056 + 1|0)) : ((24056 + 6|0));
        $$013$i = $432;$pl$0$i = $437;$prefix$0$i = $$$i;
       } else {
        $$013$i = $432;$pl$0$i = 1;$prefix$0$i = ((24056 + 3|0));
       }
      }
      HEAPF64[tempDoublePtr>>3] = $$013$i;$439 = HEAP32[tempDoublePtr>>2]|0;
      $440 = HEAP32[tempDoublePtr+4>>2]|0;
      $441 = $440 & 2146435072;
      $442 = ($441>>>0)<(2146435072);
      $443 = (0)<(0);
      $444 = ($441|0)==(2146435072);
      $445 = $444 & $443;
      $446 = $442 | $445;
      do {
       if ($446) {
        $472 = (+_frexpl($$013$i,$e2$i));
        $473 = $472 * 2.0;
        $474 = $473 != 0.0;
        if ($474) {
         $475 = HEAP32[$e2$i>>2]|0;
         $476 = (($475) + -1)|0;
         HEAP32[$e2$i>>2] = $476;
        }
        $477 = $t$0 | 32;
        $478 = ($477|0)==(97);
        if ($478) {
         $479 = $t$0 & 32;
         $480 = ($479|0)==(0);
         $481 = (($prefix$0$i) + 9|0);
         $prefix$0$$i = $480 ? $prefix$0$i : $481;
         $482 = $pl$0$i | 2;
         $483 = ($p$0>>>0)>(11);
         do {
          if ($483) {
           $$1$i = $473;
          } else {
           $484 = (12 - ($p$0))|0;
           $re$1187$i = $484;$round$0186$i = 8.0;
           while(1) {
            $485 = (($re$1187$i) + -1)|0;
            $486 = $round$0186$i * 16.0;
            $487 = ($485|0)==(0);
            if ($487) {
             $$lcssa378 = $486;
             break;
            } else {
             $re$1187$i = $485;$round$0186$i = $486;
            }
           }
           $488 = HEAP8[$prefix$0$$i>>0]|0;
           $489 = ($488<<24>>24)==(45);
           if ($489) {
            $490 = -$473;
            $491 = $490 - $$lcssa378;
            $492 = $$lcssa378 + $491;
            $493 = -$492;
            $$1$i = $493;
            break;
           } else {
            $494 = $473 + $$lcssa378;
            $495 = $494 - $$lcssa378;
            $$1$i = $495;
            break;
           }
          }
         } while(0);
         $496 = HEAP32[$e2$i>>2]|0;
         $497 = ($496|0)<(0);
         $498 = (0 - ($496))|0;
         $499 = $497 ? $498 : $496;
         $500 = ($499|0)<(0);
         if ($500) {
          $501 = ($499|0)<(0);
          $502 = $501 << 31 >> 31;
          $$05$i$i = $7;$503 = $499;$504 = $502;
          while(1) {
           $505 = (___uremdi3(($503|0),($504|0),10,0)|0);
           $506 = tempRet0;
           $507 = $505 | 48;
           $508 = $507&255;
           $509 = (($$05$i$i) + -1|0);
           HEAP8[$509>>0] = $508;
           $510 = (___udivdi3(($503|0),($504|0),10,0)|0);
           $511 = tempRet0;
           $512 = ($504>>>0)>(9);
           $513 = ($503>>>0)>(4294967295);
           $514 = ($504|0)==(9);
           $515 = $514 & $513;
           $516 = $512 | $515;
           if ($516) {
            $$05$i$i = $509;$503 = $510;$504 = $511;
           } else {
            $$lcssa379 = $509;$1191 = $510;$1192 = $511;
            break;
           }
          }
          $$0$lcssa$i56$i = $$lcssa379;$$01$lcssa$off0$i$i = $1191;
         } else {
          $$0$lcssa$i56$i = $7;$$01$lcssa$off0$i$i = $499;
         }
         $517 = ($$01$lcssa$off0$i$i|0)==(0);
         if ($517) {
          $$1$lcssa$i$i = $$0$lcssa$i56$i;
         } else {
          $$12$i$i = $$0$lcssa$i56$i;$y$03$i$i = $$01$lcssa$off0$i$i;
          while(1) {
           $518 = (($y$03$i$i>>>0) % 10)&-1;
           $519 = $518 | 48;
           $520 = $519&255;
           $521 = (($$12$i$i) + -1|0);
           HEAP8[$521>>0] = $520;
           $522 = (($y$03$i$i>>>0) / 10)&-1;
           $523 = ($y$03$i$i>>>0)<(10);
           if ($523) {
            $$lcssa381 = $521;
            break;
           } else {
            $$12$i$i = $521;$y$03$i$i = $522;
           }
          }
          $$1$lcssa$i$i = $$lcssa381;
         }
         $524 = ($$1$lcssa$i$i|0)==($7|0);
         if ($524) {
          HEAP8[$8>>0] = 48;
          $estr$0$i = $8;
         } else {
          $estr$0$i = $$1$lcssa$i$i;
         }
         $525 = HEAP32[$e2$i>>2]|0;
         $526 = $525 >> 31;
         $527 = $526 & 2;
         $528 = (($527) + 43)|0;
         $529 = $528&255;
         $530 = (($estr$0$i) + -1|0);
         HEAP8[$530>>0] = $529;
         $531 = (($t$0) + 15)|0;
         $532 = $531&255;
         $533 = (($estr$0$i) + -2|0);
         HEAP8[$533>>0] = $532;
         $534 = $fl$1$ & 8;
         $535 = ($534|0)==(0);
         do {
          if ($535) {
           $notrhs$i = ($p$0|0)<(1);
           if ($notrhs$i) {
            $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
            while(1) {
             $536 = (~~(($$2$us$us$i)));
             $537 = (24112 + ($536)|0);
             $538 = HEAP8[$537>>0]|0;
             $539 = $538&255;
             $540 = $539 | $479;
             $541 = $540&255;
             $542 = (($s$0$us$us$i) + 1|0);
             HEAP8[$s$0$us$us$i>>0] = $541;
             $543 = (+($536|0));
             $544 = $$2$us$us$i - $543;
             $545 = $544 * 16.0;
             $546 = $542;
             $547 = (($546) - ($0))|0;
             $548 = ($547|0)!=(1);
             $notlhs$us$us$i = $545 == 0.0;
             $or$cond$i80 = $548 | $notlhs$us$us$i;
             if ($or$cond$i80) {
              $s$1$us$us$i = $542;
             } else {
              $549 = (($s$0$us$us$i) + 2|0);
              HEAP8[$542>>0] = 46;
              $s$1$us$us$i = $549;
             }
             $550 = $545 != 0.0;
             if ($550) {
              $$2$us$us$i = $545;$s$0$us$us$i = $s$1$us$us$i;
             } else {
              $s$1$us$us$i$lcssa = $s$1$us$us$i;
              break;
             }
            }
            $s$1$lcssa$i = $s$1$us$us$i$lcssa;
            break;
           } else {
            $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
            while(1) {
             $551 = (~~(($$2$us$i)));
             $552 = (24112 + ($551)|0);
             $553 = HEAP8[$552>>0]|0;
             $554 = $553&255;
             $555 = $554 | $479;
             $556 = $555&255;
             $557 = (($s$0$us$i) + 1|0);
             HEAP8[$s$0$us$i>>0] = $556;
             $558 = (+($551|0));
             $559 = $$2$us$i - $558;
             $560 = $559 * 16.0;
             $561 = $557;
             $562 = (($561) - ($0))|0;
             $563 = ($562|0)==(1);
             if ($563) {
              $564 = (($s$0$us$i) + 2|0);
              HEAP8[$557>>0] = 46;
              $s$1$us$i = $564;
             } else {
              $s$1$us$i = $557;
             }
             $565 = $560 != 0.0;
             if ($565) {
              $$2$us$i = $560;$s$0$us$i = $s$1$us$i;
             } else {
              $s$1$us$i$lcssa = $s$1$us$i;
              break;
             }
            }
            $s$1$lcssa$i = $s$1$us$i$lcssa;
            break;
           }
          } else {
           $$2$i = $$1$i;$s$0$i = $buf$i;
           while(1) {
            $566 = (~~(($$2$i)));
            $567 = (24112 + ($566)|0);
            $568 = HEAP8[$567>>0]|0;
            $569 = $568&255;
            $570 = $569 | $479;
            $571 = $570&255;
            $572 = (($s$0$i) + 1|0);
            HEAP8[$s$0$i>>0] = $571;
            $573 = (+($566|0));
            $574 = $$2$i - $573;
            $575 = $574 * 16.0;
            $576 = $572;
            $577 = (($576) - ($0))|0;
            $578 = ($577|0)==(1);
            if ($578) {
             $579 = (($s$0$i) + 2|0);
             HEAP8[$572>>0] = 46;
             $s$1$i = $579;
            } else {
             $s$1$i = $572;
            }
            $580 = $575 != 0.0;
            if ($580) {
             $$2$i = $575;$s$0$i = $s$1$i;
            } else {
             $s$1$i$lcssa = $s$1$i;
             break;
            }
           }
           $s$1$lcssa$i = $s$1$i$lcssa;
          }
         } while(0);
         $581 = ($p$0|0)!=(0);
         $$pre308$i = $s$1$lcssa$i;
         $582 = (($11) + ($$pre308$i))|0;
         $583 = ($582|0)<($p$0|0);
         $or$cond274 = $581 & $583;
         $584 = $533;
         if ($or$cond274) {
          $585 = (($12) + ($p$0))|0;
          $586 = (($585) - ($584))|0;
          $l$0$i = $586;
         } else {
          $587 = (($10) - ($584))|0;
          $588 = (($587) + ($$pre308$i))|0;
          $l$0$i = $588;
         }
         $589 = (($l$0$i) + ($482))|0;
         $590 = $fl$1$ & 73728;
         $591 = ($590|0)==(0);
         $592 = ($w$1|0)>($589|0);
         $or$cond$i60$i = $591 & $592;
         if ($or$cond$i60$i) {
          $593 = (($w$1) - ($589))|0;
          $594 = ($593>>>0)>(256);
          $595 = $594 ? 256 : $593;
          _memset(($pad$i|0),32,($595|0))|0;
          $596 = ($593>>>0)>(255);
          if ($596) {
           $$01$i62$i = $593;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $597 = (($$01$i62$i) + -256)|0;
            $598 = ($597>>>0)>(255);
            if ($598) {
             $$01$i62$i = $597;
            } else {
             break;
            }
           }
           $599 = $593 & 255;
           $$0$lcssa$i64$i = $599;
          } else {
           $$0$lcssa$i64$i = $593;
          }
          (___fwritex($pad$i,$$0$lcssa$i64$i,$f)|0);
         }
         (___fwritex($prefix$0$$i,$482,$f)|0);
         $600 = ($590|0)==(65536);
         $or$cond$i67$i = $600 & $592;
         if ($or$cond$i67$i) {
          $601 = (($w$1) - ($589))|0;
          $602 = ($601>>>0)>(256);
          $603 = $602 ? 256 : $601;
          _memset(($pad$i|0),48,($603|0))|0;
          $604 = ($601>>>0)>(255);
          if ($604) {
           $$01$i69$i = $601;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $605 = (($$01$i69$i) + -256)|0;
            $606 = ($605>>>0)>(255);
            if ($606) {
             $$01$i69$i = $605;
            } else {
             break;
            }
           }
           $607 = $601 & 255;
           $$0$lcssa$i71$i = $607;
          } else {
           $$0$lcssa$i71$i = $601;
          }
          (___fwritex($pad$i,$$0$lcssa$i71$i,$f)|0);
         }
         $608 = (($$pre308$i) - ($0))|0;
         (___fwritex($buf$i,$608,$f)|0);
         $609 = $533;
         $610 = (($9) - ($609))|0;
         $611 = (($l$0$i) - ($610))|0;
         $612 = (($611) - ($608))|0;
         $613 = ($612|0)>(0);
         if ($613) {
          $614 = ($612>>>0)>(256);
          $615 = $614 ? 256 : $612;
          _memset(($pad$i|0),48,($615|0))|0;
          $616 = ($612>>>0)>(255);
          if ($616) {
           $$01$i75$i = $612;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $617 = (($$01$i75$i) + -256)|0;
            $618 = ($617>>>0)>(255);
            if ($618) {
             $$01$i75$i = $617;
            } else {
             break;
            }
           }
           $619 = $612 & 255;
           $$0$lcssa$i77$i = $619;
          } else {
           $$0$lcssa$i77$i = $612;
          }
          (___fwritex($pad$i,$$0$lcssa$i77$i,$f)|0);
         }
         (___fwritex($533,$610,$f)|0);
         $620 = ($590|0)==(8192);
         $or$cond$i80$i = $620 & $592;
         if ($or$cond$i80$i) {
          $621 = (($w$1) - ($589))|0;
          $622 = ($621>>>0)>(256);
          $623 = $622 ? 256 : $621;
          _memset(($pad$i|0),32,($623|0))|0;
          $624 = ($621>>>0)>(255);
          if ($624) {
           $$01$i82$i = $621;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $625 = (($$01$i82$i) + -256)|0;
            $626 = ($625>>>0)>(255);
            if ($626) {
             $$01$i82$i = $625;
            } else {
             break;
            }
           }
           $627 = $621 & 255;
           $$0$lcssa$i84$i = $627;
          } else {
           $$0$lcssa$i84$i = $621;
          }
          (___fwritex($pad$i,$$0$lcssa$i84$i,$f)|0);
         }
         $w$25$i = $592 ? $w$1 : $589;
         $$0$i = $w$25$i;
         break;
        }
        $628 = ($p$0|0)<(0);
        $$p$i = $628 ? 6 : $p$0;
        if ($474) {
         $629 = $473 * 268435456.0;
         $630 = HEAP32[$e2$i>>2]|0;
         $631 = (($630) + -28)|0;
         HEAP32[$e2$i>>2] = $631;
         $$3$i = $629;$632 = $631;
        } else {
         $$pre$i = HEAP32[$e2$i>>2]|0;
         $$3$i = $473;$632 = $$pre$i;
        }
        $633 = ($632|0)<(0);
        $$39$i = $633 ? $big$i : $13;
        $634 = $$39$i;
        $$4$i = $$3$i;$z$0$i = $$39$i;
        while(1) {
         $635 = (~~(($$4$i))>>>0);
         HEAP32[$z$0$i>>2] = $635;
         $636 = (($z$0$i) + 4|0);
         $637 = (+($635>>>0));
         $638 = $$4$i - $637;
         $639 = $638 * 1.0E+9;
         $640 = $639 != 0.0;
         if ($640) {
          $$4$i = $639;$z$0$i = $636;
         } else {
          $$lcssa355 = $636;
          break;
         }
        }
        $$pr$i = HEAP32[$e2$i>>2]|0;
        $641 = ($$pr$i|0)>(0);
        if ($641) {
         $642 = $$pr$i;$a$1261$i = $$39$i;$z$1260$i = $$lcssa355;
         while(1) {
          $643 = ($642|0)>(29);
          $644 = $643 ? 29 : $642;
          $d$0253$i = (($z$1260$i) + -4|0);
          $645 = ($d$0253$i>>>0)<($a$1261$i>>>0);
          do {
           if ($645) {
            $a$2$ph$i = $a$1261$i;
           } else {
            $655 = $z$1260$i;$carry$0254$i = 0;$d$0255$i = $d$0253$i;
            while(1) {
             $646 = HEAP32[$d$0255$i>>2]|0;
             $647 = (_bitshift64Shl(($646|0),0,($644|0))|0);
             $648 = tempRet0;
             $649 = (_i64Add(($647|0),($648|0),($carry$0254$i|0),0)|0);
             $650 = tempRet0;
             $651 = (___uremdi3(($649|0),($650|0),1000000000,0)|0);
             $652 = tempRet0;
             HEAP32[$d$0255$i>>2] = $651;
             $653 = (___udivdi3(($649|0),($650|0),1000000000,0)|0);
             $654 = tempRet0;
             $d$0$i = (($655) + -8|0);
             $656 = ($d$0$i>>>0)<($a$1261$i>>>0);
             if ($656) {
              $$lcssa356 = $653;
              break;
             } else {
              $655$phi = $d$0255$i;$carry$0254$i = $653;$d$0255$i = $d$0$i;$655 = $655$phi;
             }
            }
            $657 = ($$lcssa356|0)==(0);
            if ($657) {
             $a$2$ph$i = $a$1261$i;
             break;
            }
            $658 = (($a$1261$i) + -4|0);
            HEAP32[$658>>2] = $$lcssa356;
            $a$2$ph$i = $658;
           }
          } while(0);
          $z$2$i = $z$1260$i;
          while(1) {
           $659 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
           if (!($659)) {
            $z$2$i$lcssa = $z$2$i;
            break;
           }
           $660 = (($z$2$i) + -4|0);
           $661 = HEAP32[$660>>2]|0;
           $662 = ($661|0)==(0);
           if ($662) {
            $z$2$i = $660;
           } else {
            $z$2$i$lcssa = $z$2$i;
            break;
           }
          }
          $663 = HEAP32[$e2$i>>2]|0;
          $664 = (($663) - ($644))|0;
          HEAP32[$e2$i>>2] = $664;
          $665 = ($664|0)>(0);
          if ($665) {
           $642 = $664;$a$1261$i = $a$2$ph$i;$z$1260$i = $z$2$i$lcssa;
          } else {
           $$lcssa357 = $664;$a$2$ph$i$lcssa = $a$2$ph$i;$z$2$i$lcssa$lcssa = $z$2$i$lcssa;
           break;
          }
         }
         $$pr154$i = $$lcssa357;$a$1$lcssa$i = $a$2$ph$i$lcssa;$z$1$lcssa$i = $z$2$i$lcssa$lcssa;
        } else {
         $$pr154$i = $$pr$i;$a$1$lcssa$i = $$39$i;$z$1$lcssa$i = $$lcssa355;
        }
        $666 = ($$pr154$i|0)<(0);
        do {
         if ($666) {
          $667 = (($$p$i) + 25)|0;
          $668 = (($667|0) / 9)&-1;
          $669 = (($668) + 1)|0;
          $670 = ($477|0)==(102);
          if ($670) {
           $671 = (($$39$i) + ($669<<2)|0);
           $672 = $$pr154$i;$a$3248$us$i = $a$1$lcssa$i;$z$3247$us$i = $z$1$lcssa$i;
           while(1) {
            $673 = ($672|0)<(-9);
            $674 = (0 - ($672))|0;
            $$26$us$i = $673 ? 9 : $674;
            $675 = ($a$3248$us$i>>>0)<($z$3247$us$i>>>0);
            do {
             if ($675) {
              $700 = 1 << $$26$us$i;
              $693 = (($700) + -1)|0;
              $697 = 1000000000 >>> $$26$us$i;
              $carry3$0242$us$i = 0;$d$1241$us$i = $a$3248$us$i;
              while(1) {
               $691 = HEAP32[$d$1241$us$i>>2]|0;
               $692 = $691 & $693;
               $694 = $691 >>> $$26$us$i;
               $695 = (($694) + ($carry3$0242$us$i))|0;
               HEAP32[$d$1241$us$i>>2] = $695;
               $696 = Math_imul($692, $697)|0;
               $698 = (($d$1241$us$i) + 4|0);
               $699 = ($698>>>0)<($z$3247$us$i>>>0);
               if ($699) {
                $carry3$0242$us$i = $696;$d$1241$us$i = $698;
               } else {
                $$lcssa359 = $696;
                break;
               }
              }
              $679 = HEAP32[$a$3248$us$i>>2]|0;
              $680 = ($679|0)==(0);
              $681 = (($a$3248$us$i) + 4|0);
              $$a$3$us$i = $680 ? $681 : $a$3248$us$i;
              $682 = ($$lcssa359|0)==(0);
              if ($682) {
               $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $z$3247$us$i;
               break;
              }
              $683 = (($z$3247$us$i) + 4|0);
              HEAP32[$z$3247$us$i>>2] = $$lcssa359;
              $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $683;
             } else {
              $676 = HEAP32[$a$3248$us$i>>2]|0;
              $677 = ($676|0)==(0);
              $678 = (($a$3248$us$i) + 4|0);
              $$a$3$us309$i = $677 ? $678 : $a$3248$us$i;
              $$a$3$us310$i = $$a$3$us309$i;$z$4$us$i = $z$3247$us$i;
             }
            } while(0);
            $684 = $z$4$us$i;
            $685 = (($684) - ($634))|0;
            $686 = $685 >> 2;
            $687 = ($686|0)>($669|0);
            $$z$4$us$i = $687 ? $671 : $z$4$us$i;
            $688 = HEAP32[$e2$i>>2]|0;
            $689 = (($688) + ($$26$us$i))|0;
            HEAP32[$e2$i>>2] = $689;
            $690 = ($689|0)<(0);
            if ($690) {
             $672 = $689;$a$3248$us$i = $$a$3$us310$i;$z$3247$us$i = $$z$4$us$i;
            } else {
             $$a$3$us310$i$lcssa = $$a$3$us310$i;$$z$4$us$i$lcssa = $$z$4$us$i;
             break;
            }
           }
           $a$3$lcssa$i = $$a$3$us310$i$lcssa;$z$3$lcssa$i = $$z$4$us$i$lcssa;
           break;
          }
          $701 = $$pr154$i;$a$3248$i = $a$1$lcssa$i;$z$3247$i = $z$1$lcssa$i;
          while(1) {
           $702 = ($701|0)<(-9);
           $703 = (0 - ($701))|0;
           $$26$i = $702 ? 9 : $703;
           $704 = ($a$3248$i>>>0)<($z$3247$i>>>0);
           do {
            if ($704) {
             $708 = 1 << $$26$i;
             $709 = (($708) + -1)|0;
             $710 = 1000000000 >>> $$26$i;
             $carry3$0242$i = 0;$d$1241$i = $a$3248$i;
             while(1) {
              $711 = HEAP32[$d$1241$i>>2]|0;
              $712 = $711 & $709;
              $713 = $711 >>> $$26$i;
              $714 = (($713) + ($carry3$0242$i))|0;
              HEAP32[$d$1241$i>>2] = $714;
              $715 = Math_imul($712, $710)|0;
              $716 = (($d$1241$i) + 4|0);
              $717 = ($716>>>0)<($z$3247$i>>>0);
              if ($717) {
               $carry3$0242$i = $715;$d$1241$i = $716;
              } else {
               $$lcssa358 = $715;
               break;
              }
             }
             $718 = HEAP32[$a$3248$i>>2]|0;
             $719 = ($718|0)==(0);
             $720 = (($a$3248$i) + 4|0);
             $$a$3$i = $719 ? $720 : $a$3248$i;
             $721 = ($$lcssa358|0)==(0);
             if ($721) {
              $$a$3312$i = $$a$3$i;$z$4$i = $z$3247$i;
              break;
             }
             $722 = (($z$3247$i) + 4|0);
             HEAP32[$z$3247$i>>2] = $$lcssa358;
             $$a$3312$i = $$a$3$i;$z$4$i = $722;
            } else {
             $705 = HEAP32[$a$3248$i>>2]|0;
             $706 = ($705|0)==(0);
             $707 = (($a$3248$i) + 4|0);
             $$a$3311$i = $706 ? $707 : $a$3248$i;
             $$a$3312$i = $$a$3311$i;$z$4$i = $z$3247$i;
            }
           } while(0);
           $723 = $z$4$i;
           $724 = $$a$3312$i;
           $725 = (($723) - ($724))|0;
           $726 = $725 >> 2;
           $727 = ($726|0)>($669|0);
           if ($727) {
            $728 = (($$a$3312$i) + ($669<<2)|0);
            $z$5$i = $728;
           } else {
            $z$5$i = $z$4$i;
           }
           $729 = HEAP32[$e2$i>>2]|0;
           $730 = (($729) + ($$26$i))|0;
           HEAP32[$e2$i>>2] = $730;
           $731 = ($730|0)<(0);
           if ($731) {
            $701 = $730;$a$3248$i = $$a$3312$i;$z$3247$i = $z$5$i;
           } else {
            $$a$3312$i$lcssa = $$a$3312$i;$z$5$i$lcssa = $z$5$i;
            break;
           }
          }
          $a$3$lcssa$i = $$a$3312$i$lcssa;$z$3$lcssa$i = $z$5$i$lcssa;
         } else {
          $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
         }
        } while(0);
        $732 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
        do {
         if ($732) {
          $733 = $a$3$lcssa$i;
          $734 = (($634) - ($733))|0;
          $735 = $734 >> 2;
          $736 = ($735*9)|0;
          $737 = HEAP32[$a$3$lcssa$i>>2]|0;
          $738 = ($737>>>0)<(10);
          if ($738) {
           $e$1$i = $736;
           break;
          }
          $e$0237$i = $736;$i$0236$i = 10;
          while(1) {
           $739 = ($i$0236$i*10)|0;
           $740 = (($e$0237$i) + 1)|0;
           $741 = ($737>>>0)<($739>>>0);
           if ($741) {
            $$lcssa360 = $740;
            break;
           } else {
            $e$0237$i = $740;$i$0236$i = $739;
           }
          }
          $e$1$i = $$lcssa360;
         } else {
          $e$1$i = 0;
         }
        } while(0);
        $742 = ($477|0)!=(102);
        $743 = $742 ? $e$1$i : 0;
        $744 = (($$p$i) - ($743))|0;
        $745 = ($477|0)==(103);
        $746 = ($$p$i|0)!=(0);
        $$27$i = $746 & $745;
        $$neg159$i = $$27$i << 31 >> 31;
        $747 = (($744) + ($$neg159$i))|0;
        $748 = $z$3$lcssa$i;
        $749 = (($748) - ($634))|0;
        $750 = $749 >> 2;
        $751 = ($750*9)|0;
        $752 = (($751) + -9)|0;
        $753 = ($747|0)<($752|0);
        if ($753) {
         $754 = (($747) + 9216)|0;
         $755 = (($754|0) / 9)&-1;
         $$sum$i = (($755) + -1023)|0;
         $756 = (($$39$i) + ($$sum$i<<2)|0);
         $757 = (($754|0) % 9)&-1;
         $j$0229$i = (($757) + 1)|0;
         $758 = ($j$0229$i|0)<(9);
         if ($758) {
          $i$1230$i = 10;$j$0231$i = $j$0229$i;
          while(1) {
           $759 = ($i$1230$i*10)|0;
           $j$0$i = (($j$0231$i) + 1)|0;
           $exitcond$i = ($j$0231$i|0)==(8);
           if ($exitcond$i) {
            $$lcssa361 = $759;
            break;
           } else {
            $i$1230$i = $759;$j$0231$i = $j$0$i;
           }
          }
          $i$1$lcssa$i = $$lcssa361;
         } else {
          $i$1$lcssa$i = 10;
         }
         $760 = HEAP32[$756>>2]|0;
         $761 = (($760>>>0) % ($i$1$lcssa$i>>>0))&-1;
         $762 = ($761|0)==(0);
         if ($762) {
          $$sum21$i = (($755) + -1022)|0;
          $763 = (($$39$i) + ($$sum21$i<<2)|0);
          $764 = ($763|0)==($z$3$lcssa$i|0);
          if ($764) {
           $a$7$i = $a$3$lcssa$i;$d$3$i = $756;$e$3$i = $e$1$i;
          } else {
           label = 274;
          }
         } else {
          label = 274;
         }
         do {
          if ((label|0) == 274) {
           label = 0;
           $765 = (($760>>>0) / ($i$1$lcssa$i>>>0))&-1;
           $766 = $765 & 1;
           $767 = ($766|0)==(0);
           $$28$i = $767 ? 9007199254740992.0 : 9007199254740994.0;
           $768 = (($i$1$lcssa$i|0) / 2)&-1;
           $769 = ($761>>>0)<($768>>>0);
           do {
            if ($769) {
             $small$0$i = 0.5;
            } else {
             $770 = ($761|0)==($768|0);
             if ($770) {
              $$sum22$i = (($755) + -1022)|0;
              $771 = (($$39$i) + ($$sum22$i<<2)|0);
              $772 = ($771|0)==($z$3$lcssa$i|0);
              if ($772) {
               $small$0$i = 1.0;
               break;
              }
             }
             $small$0$i = 1.5;
            }
           } while(0);
           $773 = ($pl$0$i|0)==(0);
           do {
            if ($773) {
             $round6$1$i = $$28$i;$small$1$i = $small$0$i;
            } else {
             $774 = HEAP8[$prefix$0$i>>0]|0;
             $775 = ($774<<24>>24)==(45);
             if (!($775)) {
              $round6$1$i = $$28$i;$small$1$i = $small$0$i;
              break;
             }
             $776 = -$$28$i;
             $777 = -$small$0$i;
             $round6$1$i = $776;$small$1$i = $777;
            }
           } while(0);
           $778 = (($760) - ($761))|0;
           HEAP32[$756>>2] = $778;
           $779 = $round6$1$i + $small$1$i;
           $780 = $779 != $round6$1$i;
           if (!($780)) {
            $a$7$i = $a$3$lcssa$i;$d$3$i = $756;$e$3$i = $e$1$i;
            break;
           }
           $781 = (($778) + ($i$1$lcssa$i))|0;
           HEAP32[$756>>2] = $781;
           $782 = ($781>>>0)>(999999999);
           if ($782) {
            $a$5223$i = $a$3$lcssa$i;$d$2222$i = $756;
            while(1) {
             $783 = (($d$2222$i) + -4|0);
             HEAP32[$d$2222$i>>2] = 0;
             $784 = ($783>>>0)<($a$5223$i>>>0);
             if ($784) {
              $785 = (($a$5223$i) + -4|0);
              HEAP32[$785>>2] = 0;
              $a$6$i = $785;
             } else {
              $a$6$i = $a$5223$i;
             }
             $786 = HEAP32[$783>>2]|0;
             $787 = (($786) + 1)|0;
             HEAP32[$783>>2] = $787;
             $788 = ($787>>>0)>(999999999);
             if ($788) {
              $a$5223$i = $a$6$i;$d$2222$i = $783;
             } else {
              $$lcssa362 = $783;$a$6$i$lcssa = $a$6$i;
              break;
             }
            }
            $a$5$lcssa$i = $a$6$i$lcssa;$d$2$lcssa$i = $$lcssa362;
           } else {
            $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $756;
           }
           $789 = $a$5$lcssa$i;
           $790 = (($634) - ($789))|0;
           $791 = $790 >> 2;
           $792 = ($791*9)|0;
           $793 = HEAP32[$a$5$lcssa$i>>2]|0;
           $794 = ($793>>>0)<(10);
           if ($794) {
            $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $792;
            break;
           }
           $e$2218$i = $792;$i$2217$i = 10;
           while(1) {
            $795 = ($i$2217$i*10)|0;
            $796 = (($e$2218$i) + 1)|0;
            $797 = ($793>>>0)<($795>>>0);
            if ($797) {
             $$lcssa363 = $796;
             break;
            } else {
             $e$2218$i = $796;$i$2217$i = $795;
            }
           }
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $$lcssa363;
          }
         } while(0);
         $798 = (($d$3$i) + 4|0);
         $799 = ($z$3$lcssa$i>>>0)>($798>>>0);
         $$z$3$i = $799 ? $798 : $z$3$lcssa$i;
         $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
        } else {
         $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
        }
        $a$8$ph294$i = $a$8$ph$i;
        $800 = (0 - ($e$4$ph$i))|0;
        $z$6$i = $z$6$ph$i;
        while(1) {
         $801 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
         if (!($801)) {
          $$lcssa283$i = 0;$z$6$i$lcssa = $z$6$i;
          break;
         }
         $802 = (($z$6$i) + -4|0);
         $803 = HEAP32[$802>>2]|0;
         $804 = ($803|0)==(0);
         if ($804) {
          $z$6$i = $802;
         } else {
          $$lcssa283$i = 1;$z$6$i$lcssa = $z$6$i;
          break;
         }
        }
        do {
         if ($745) {
          $805 = ($$p$i|0)==(0);
          $806 = $805&1;
          $$$p$i = (($806) + ($$p$i))|0;
          $807 = ($$$p$i|0)>($e$4$ph$i|0);
          $808 = ($e$4$ph$i|0)>(-5);
          $or$cond6$i = $807 & $808;
          if ($or$cond6$i) {
           $809 = (($t$0) + -1)|0;
           $$neg160$i = (($$$p$i) + -1)|0;
           $810 = (($$neg160$i) - ($e$4$ph$i))|0;
           $$019$i = $809;$$216$i = $810;
          } else {
           $811 = (($t$0) + -2)|0;
           $812 = (($$$p$i) + -1)|0;
           $$019$i = $811;$$216$i = $812;
          }
          $813 = $fl$1$ & 8;
          $814 = ($813|0)==(0);
          if (!($814)) {
           $$120$i = $$019$i;$$317$i = $$216$i;
           break;
          }
          do {
           if ($$lcssa283$i) {
            $815 = (($z$6$i$lcssa) + -4|0);
            $816 = HEAP32[$815>>2]|0;
            $817 = ($816|0)==(0);
            if ($817) {
             $j$2$i = 9;
             break;
            }
            $818 = (($816>>>0) % 10)&-1;
            $819 = ($818|0)==(0);
            if (!($819)) {
             $j$2$i = 0;
             break;
            }
            $i$3213$i = 10;$j$1214$i = 0;
            while(1) {
             $820 = ($i$3213$i*10)|0;
             $821 = (($j$1214$i) + 1)|0;
             $822 = (($816>>>0) % ($820>>>0))&-1;
             $823 = ($822|0)==(0);
             if ($823) {
              $i$3213$i = $820;$j$1214$i = $821;
             } else {
              $$lcssa364 = $821;
              break;
             }
            }
            $j$2$i = $$lcssa364;
           } else {
            $j$2$i = 9;
           }
          } while(0);
          $824 = $$019$i | 32;
          $825 = ($824|0)==(102);
          $826 = $z$6$i$lcssa;
          $827 = (($826) - ($634))|0;
          $828 = $827 >> 2;
          $829 = ($828*9)|0;
          $830 = (($829) + -9)|0;
          if ($825) {
           $831 = (($830) - ($j$2$i))|0;
           $832 = ($831|0)<(0);
           $$29$i = $832 ? 0 : $831;
           $833 = ($$216$i|0)<($$29$i|0);
           $$216$$29$i = $833 ? $$216$i : $$29$i;
           $$120$i = $$019$i;$$317$i = $$216$$29$i;
           break;
          } else {
           $834 = (($830) + ($e$4$ph$i))|0;
           $835 = (($834) - ($j$2$i))|0;
           $836 = ($835|0)<(0);
           $$31$i = $836 ? 0 : $835;
           $837 = ($$216$i|0)<($$31$i|0);
           $$216$$31$i = $837 ? $$216$i : $$31$i;
           $$120$i = $$019$i;$$317$i = $$216$$31$i;
           break;
          }
         } else {
          $$120$i = $t$0;$$317$i = $$p$i;
         }
        } while(0);
        $838 = ($$317$i|0)!=(0);
        if ($838) {
         $842 = 1;
        } else {
         $839 = $fl$1$ & 8;
         $840 = ($839|0)!=(0);
         $842 = $840;
        }
        $841 = $842&1;
        $843 = $$120$i | 32;
        $844 = ($843|0)==(102);
        if ($844) {
         $845 = ($e$4$ph$i|0)>(0);
         $846 = $845 ? $e$4$ph$i : 0;
         $$pn$i = $846;$estr$2$i = 0;
        } else {
         $847 = ($e$4$ph$i|0)<(0);
         $848 = $847 ? $800 : $e$4$ph$i;
         $849 = ($848|0)<(0);
         if ($849) {
          $850 = ($848|0)<(0);
          $851 = $850 << 31 >> 31;
          $$05$i87$i = $7;$852 = $848;$853 = $851;
          while(1) {
           $854 = (___uremdi3(($852|0),($853|0),10,0)|0);
           $855 = tempRet0;
           $856 = $854 | 48;
           $857 = $856&255;
           $858 = (($$05$i87$i) + -1|0);
           HEAP8[$858>>0] = $857;
           $859 = (___udivdi3(($852|0),($853|0),10,0)|0);
           $860 = tempRet0;
           $861 = ($853>>>0)>(9);
           $862 = ($852>>>0)>(4294967295);
           $863 = ($853|0)==(9);
           $864 = $863 & $862;
           $865 = $861 | $864;
           if ($865) {
            $$05$i87$i = $858;$852 = $859;$853 = $860;
           } else {
            $$lcssa365 = $858;$1193 = $859;$1194 = $860;
            break;
           }
          }
          $$0$lcssa$i92$i = $$lcssa365;$$01$lcssa$off0$i93$i = $1193;
         } else {
          $$0$lcssa$i92$i = $7;$$01$lcssa$off0$i93$i = $848;
         }
         $866 = ($$01$lcssa$off0$i93$i|0)==(0);
         if ($866) {
          $estr$1$ph$i = $$0$lcssa$i92$i;
         } else {
          $$12$i95$i = $$0$lcssa$i92$i;$y$03$i94$i = $$01$lcssa$off0$i93$i;
          while(1) {
           $867 = (($y$03$i94$i>>>0) % 10)&-1;
           $868 = $867 | 48;
           $869 = $868&255;
           $870 = (($$12$i95$i) + -1|0);
           HEAP8[$870>>0] = $869;
           $871 = (($y$03$i94$i>>>0) / 10)&-1;
           $872 = ($y$03$i94$i>>>0)<(10);
           if ($872) {
            $$lcssa367 = $870;
            break;
           } else {
            $$12$i95$i = $870;$y$03$i94$i = $871;
           }
          }
          $estr$1$ph$i = $$lcssa367;
         }
         $873 = $estr$1$ph$i;
         $874 = (($9) - ($873))|0;
         $875 = ($874|0)<(2);
         if ($875) {
          $estr$1209$i = $estr$1$ph$i;
          while(1) {
           $876 = (($estr$1209$i) + -1|0);
           HEAP8[$876>>0] = 48;
           $877 = $876;
           $878 = (($9) - ($877))|0;
           $879 = ($878|0)<(2);
           if ($879) {
            $estr$1209$i = $876;
           } else {
            $$lcssa368 = $876;
            break;
           }
          }
          $estr$1$lcssa$i = $$lcssa368;
         } else {
          $estr$1$lcssa$i = $estr$1$ph$i;
         }
         $880 = $e$4$ph$i >> 31;
         $881 = $880 & 2;
         $882 = (($881) + 43)|0;
         $883 = $882&255;
         $884 = (($estr$1$lcssa$i) + -1|0);
         HEAP8[$884>>0] = $883;
         $885 = $$120$i&255;
         $886 = (($estr$1$lcssa$i) + -2|0);
         HEAP8[$886>>0] = $885;
         $887 = $886;
         $888 = (($9) - ($887))|0;
         $$pn$i = $888;$estr$2$i = $886;
        }
        $889 = (($pl$0$i) + 1)|0;
        $890 = (($889) + ($$317$i))|0;
        $l$1$i = (($890) + ($841))|0;
        $891 = (($l$1$i) + ($$pn$i))|0;
        $892 = $fl$1$ & 73728;
        $893 = ($892|0)==(0);
        $894 = ($w$1|0)>($891|0);
        $or$cond$i101$i = $893 & $894;
        if ($or$cond$i101$i) {
         $895 = (($w$1) - ($891))|0;
         $896 = ($895>>>0)>(256);
         $897 = $896 ? 256 : $895;
         _memset(($pad$i|0),32,($897|0))|0;
         $898 = ($895>>>0)>(255);
         if ($898) {
          $$01$i103$i = $895;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $899 = (($$01$i103$i) + -256)|0;
           $900 = ($899>>>0)>(255);
           if ($900) {
            $$01$i103$i = $899;
           } else {
            break;
           }
          }
          $901 = $895 & 255;
          $$0$lcssa$i105$i = $901;
         } else {
          $$0$lcssa$i105$i = $895;
         }
         (___fwritex($pad$i,$$0$lcssa$i105$i,$f)|0);
        }
        (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
        $902 = ($892|0)==(65536);
        $or$cond$i108$i = $902 & $894;
        if ($or$cond$i108$i) {
         $903 = (($w$1) - ($891))|0;
         $904 = ($903>>>0)>(256);
         $905 = $904 ? 256 : $903;
         _memset(($pad$i|0),48,($905|0))|0;
         $906 = ($903>>>0)>(255);
         if ($906) {
          $$01$i110$i = $903;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $907 = (($$01$i110$i) + -256)|0;
           $908 = ($907>>>0)>(255);
           if ($908) {
            $$01$i110$i = $907;
           } else {
            break;
           }
          }
          $909 = $903 & 255;
          $$0$lcssa$i112$i = $909;
         } else {
          $$0$lcssa$i112$i = $903;
         }
         (___fwritex($pad$i,$$0$lcssa$i112$i,$f)|0);
        }
        if ($844) {
         $910 = ($a$8$ph$i>>>0)>($$39$i>>>0);
         $r$0$a$8$i = $910 ? $$39$i : $a$8$ph$i;
         $911 = $634 ^ -1;
         $912 = $a$8$ph294$i ^ -1;
         $913 = ($911>>>0)>($912>>>0);
         $umax$i = $913 ? $911 : $912;
         $914 = (3 - ($umax$i))|0;
         $uglygep$i = (($$39$i) + 1|0);
         $uglygep296$i = $uglygep$i;
         $915 = ($914>>>0)>($uglygep296$i>>>0);
         $umax297$i = $915 ? $914 : $uglygep296$i;
         $umax297298299$i = $umax297$i;
         $uglygep300$i = (($umax297298299$i) + ($umax$i)|0);
         $uglygep300301$i = $uglygep300$i;
         $916 = $umax$i ^ -1;
         $d$4199$i = $r$0$a$8$i;
         while(1) {
          $917 = HEAP32[$d$4199$i>>2]|0;
          $918 = ($917|0)==(0);
          if ($918) {
           $$1$lcssa$i120$i = $14;
          } else {
           $$12$i118$i = $14;$y$03$i117$i = $917;
           while(1) {
            $919 = (($y$03$i117$i>>>0) % 10)&-1;
            $920 = $919 | 48;
            $921 = $920&255;
            $922 = (($$12$i118$i) + -1|0);
            HEAP8[$922>>0] = $921;
            $923 = (($y$03$i117$i>>>0) / 10)&-1;
            $924 = ($y$03$i117$i>>>0)<(10);
            if ($924) {
             $$lcssa372 = $922;
             break;
            } else {
             $$12$i118$i = $922;$y$03$i117$i = $923;
            }
           }
           $$1$lcssa$i120$i = $$lcssa372;
          }
          $925 = ($d$4199$i|0)==($r$0$a$8$i|0);
          do {
           if ($925) {
            $929 = ($$1$lcssa$i120$i|0)==($14|0);
            if (!($929)) {
             $s7$1$i = $$1$lcssa$i120$i;
             break;
            }
            HEAP8[$16>>0] = 48;
            $s7$1$i = $16;
           } else {
            $926 = ($$1$lcssa$i120$i>>>0)>($buf$i>>>0);
            if (!($926)) {
             $s7$1$i = $$1$lcssa$i120$i;
             break;
            }
            $s7$0196$i = $$1$lcssa$i120$i;
            while(1) {
             $927 = (($s7$0196$i) + -1|0);
             HEAP8[$927>>0] = 48;
             $928 = ($927>>>0)>($buf$i>>>0);
             if ($928) {
              $s7$0196$i = $927;
             } else {
              $$lcssa373 = $927;
              break;
             }
            }
            $s7$1$i = $$lcssa373;
           }
          } while(0);
          $930 = $s7$1$i;
          $931 = (($15) - ($930))|0;
          (___fwritex($s7$1$i,$931,$f)|0);
          $932 = (($d$4199$i) + 4|0);
          $933 = ($932>>>0)>($$39$i>>>0);
          if ($933) {
           $$lcssa374 = $932;
           break;
          } else {
           $d$4199$i = $932;
          }
         }
         $934 = $uglygep300301$i & -4;
         $935 = (($934) + ($916))|0;
         $936 = $935;
         $$not$i = $838 ^ 1;
         $937 = $fl$1$ & 8;
         $938 = ($937|0)==(0);
         $or$cond35$i = $938 & $$not$i;
         if (!($or$cond35$i)) {
          (___fwritex(24128,1,$f)|0);
         }
         $939 = ($$lcssa374>>>0)<($z$6$i$lcssa>>>0);
         $940 = ($$317$i|0)>(0);
         $or$cond10191$i = $940 & $939;
         if ($or$cond10191$i) {
          $$418193$i = $$317$i;$955 = $936;$d$5192$i = $$lcssa374;
          while(1) {
           $941 = HEAP32[$d$5192$i>>2]|0;
           $942 = ($941|0)==(0);
           if ($942) {
            $s8$0188$i$ph = $14;
            label = 361;
           } else {
            $$12$i127$i = $14;$y$03$i126$i = $941;
            while(1) {
             $943 = (($y$03$i126$i>>>0) % 10)&-1;
             $944 = $943 | 48;
             $945 = $944&255;
             $946 = (($$12$i127$i) + -1|0);
             HEAP8[$946>>0] = $945;
             $947 = (($y$03$i126$i>>>0) / 10)&-1;
             $948 = ($y$03$i126$i>>>0)<(10);
             if ($948) {
              $$lcssa375 = $946;
              break;
             } else {
              $$12$i127$i = $946;$y$03$i126$i = $947;
             }
            }
            $949 = ($$lcssa375>>>0)>($buf$i>>>0);
            if ($949) {
             $s8$0188$i$ph = $$lcssa375;
             label = 361;
            } else {
             $s8$0$lcssa$i = $$lcssa375;
            }
           }
           if ((label|0) == 361) {
            label = 0;
            $s8$0188$i = $s8$0188$i$ph;
            while(1) {
             $950 = (($s8$0188$i) + -1|0);
             HEAP8[$950>>0] = 48;
             $951 = ($950>>>0)>($buf$i>>>0);
             if ($951) {
              $s8$0188$i = $950;
             } else {
              $$lcssa376 = $950;
              break;
             }
            }
            $s8$0$lcssa$i = $$lcssa376;
           }
           $952 = ($$418193$i|0)>(9);
           $953 = $952 ? 9 : $$418193$i;
           (___fwritex($s8$0$lcssa$i,$953,$f)|0);
           $954 = (($955) + 8|0);
           $956 = (($$418193$i) + -9)|0;
           $957 = ($954>>>0)<($z$6$i$lcssa>>>0);
           $or$cond10$i = $952 & $957;
           if ($or$cond10$i) {
            $955$phi = $d$5192$i;$$418193$i = $956;$d$5192$i = $954;$955 = $955$phi;
           } else {
            $$lcssa377 = $956;
            break;
           }
          }
          $$418$lcssa$i = $$lcssa377;
         } else {
          $$418$lcssa$i = $$317$i;
         }
         $958 = ($$418$lcssa$i|0)>(0);
         if ($958) {
          $959 = ($$418$lcssa$i>>>0)>(256);
          $960 = $959 ? 256 : $$418$lcssa$i;
          _memset(($pad$i|0),48,($960|0))|0;
          $961 = ($$418$lcssa$i>>>0)>(255);
          if ($961) {
           $$01$i134$i = $$418$lcssa$i;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $962 = (($$01$i134$i) + -256)|0;
            $963 = ($962>>>0)>(255);
            if ($963) {
             $$01$i134$i = $962;
            } else {
             break;
            }
           }
           $964 = $$418$lcssa$i & 255;
           $$0$lcssa$i136$i = $964;
          } else {
           $$0$lcssa$i136$i = $$418$lcssa$i;
          }
          (___fwritex($pad$i,$$0$lcssa$i136$i,$f)|0);
         }
        } else {
         $965 = (($a$8$ph$i) + 4|0);
         $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $965;
         $966 = ($$317$i|0)>(-1);
         do {
          if ($966) {
           $967 = $fl$1$ & 8;
           $968 = ($967|0)==(0);
           $$5205$i = $$317$i;$d$6204$i = $a$8$ph$i;
           while(1) {
            $969 = HEAP32[$d$6204$i>>2]|0;
            $970 = ($969|0)==(0);
            if ($970) {
             label = 380;
            } else {
             $$12$i142$i = $14;$y$03$i141$i = $969;
             while(1) {
              $971 = (($y$03$i141$i>>>0) % 10)&-1;
              $972 = $971 | 48;
              $973 = $972&255;
              $974 = (($$12$i142$i) + -1|0);
              HEAP8[$974>>0] = $973;
              $975 = (($y$03$i141$i>>>0) / 10)&-1;
              $976 = ($y$03$i141$i>>>0)<(10);
              if ($976) {
               $$12$i142$i$lcssa = $$12$i142$i;$$lcssa369 = $974;
               break;
              } else {
               $$12$i142$i = $974;$y$03$i141$i = $975;
              }
             }
             $977 = ($$lcssa369|0)==($14|0);
             if ($977) {
              label = 380;
             } else {
              $1195 = $$12$i142$i$lcssa;$s9$0$i = $$lcssa369;
             }
            }
            if ((label|0) == 380) {
             label = 0;
             HEAP8[$16>>0] = 48;
             $1195 = $14;$s9$0$i = $16;
            }
            $978 = ($d$6204$i|0)==($a$8$ph$i|0);
            do {
             if ($978) {
              (___fwritex($s9$0$i,1,$f)|0);
              $982 = ($$5205$i|0)<(1);
              $or$cond37$i = $968 & $982;
              if ($or$cond37$i) {
               $s9$2$i = $1195;
               break;
              }
              (___fwritex(24128,1,$f)|0);
              $s9$2$i = $1195;
             } else {
              $979 = ($s9$0$i>>>0)>($buf$i>>>0);
              if (!($979)) {
               $s9$2$i = $s9$0$i;
               break;
              }
              $s9$1200$i = $s9$0$i;
              while(1) {
               $980 = (($s9$1200$i) + -1|0);
               HEAP8[$980>>0] = 48;
               $981 = ($980>>>0)>($buf$i>>>0);
               if ($981) {
                $s9$1200$i = $980;
               } else {
                $$lcssa370 = $980;
                break;
               }
              }
              $s9$2$i = $$lcssa370;
             }
            } while(0);
            $983 = $s9$2$i;
            $984 = (($15) - ($983))|0;
            $985 = ($$5205$i|0)>($984|0);
            $$$5$i = $985 ? $984 : $$5205$i;
            (___fwritex($s9$2$i,$$$5$i,$f)|0);
            $986 = (($$5205$i) - ($984))|0;
            $987 = (($d$6204$i) + 4|0);
            $988 = ($987>>>0)<($z$6$$i>>>0);
            $989 = ($986|0)>(-1);
            $or$cond12$i = $988 & $989;
            if ($or$cond12$i) {
             $$5205$i = $986;$d$6204$i = $987;
            } else {
             $$lcssa371 = $986;
             break;
            }
           }
           $990 = ($$lcssa371|0)>(0);
           if (!($990)) {
            break;
           }
           $991 = ($$lcssa371>>>0)>(256);
           $992 = $991 ? 256 : $$lcssa371;
           _memset(($pad$i|0),48,($992|0))|0;
           $993 = ($$lcssa371>>>0)>(255);
           if ($993) {
            $$01$i149$i = $$lcssa371;
            while(1) {
             (___fwritex($pad$i,256,$f)|0);
             $994 = (($$01$i149$i) + -256)|0;
             $995 = ($994>>>0)>(255);
             if ($995) {
              $$01$i149$i = $994;
             } else {
              break;
             }
            }
            $996 = $$lcssa371 & 255;
            $$0$lcssa$i151$i = $996;
           } else {
            $$0$lcssa$i151$i = $$lcssa371;
           }
           (___fwritex($pad$i,$$0$lcssa$i151$i,$f)|0);
          } else {
          }
         } while(0);
         $997 = $estr$2$i;
         $998 = (($9) - ($997))|0;
         (___fwritex($estr$2$i,$998,$f)|0);
        }
        $999 = ($892|0)==(8192);
        $or$cond$i$i = $999 & $894;
        if ($or$cond$i$i) {
         $1000 = (($w$1) - ($891))|0;
         $1001 = ($1000>>>0)>(256);
         $1002 = $1001 ? 256 : $1000;
         _memset(($pad$i|0),32,($1002|0))|0;
         $1003 = ($1000>>>0)>(255);
         if ($1003) {
          $$01$i$i = $1000;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $1004 = (($$01$i$i) + -256)|0;
           $1005 = ($1004>>>0)>(255);
           if ($1005) {
            $$01$i$i = $1004;
           } else {
            break;
           }
          }
          $1006 = $1000 & 255;
          $$0$lcssa$i$i = $1006;
         } else {
          $$0$lcssa$i$i = $1000;
         }
         (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
        }
        $w$38$i = $894 ? $w$1 : $891;
        $$0$i = $w$38$i;
       } else {
        $447 = $t$0 & 32;
        $448 = ($447|0)!=(0);
        $449 = $448 ? 24080 : 24088;
        $450 = ($$013$i != $$013$i) | (0.0 != 0.0);
        if ($450) {
         $451 = $448 ? 24096 : 24104;
         $pl$1$i = 0;$s1$0$i = $451;
        } else {
         $pl$1$i = $pl$0$i;$s1$0$i = $449;
        }
        $452 = (($pl$1$i) + 3)|0;
        $453 = $fl$1$ & 8192;
        $454 = ($453|0)==(0);
        $455 = ($w$1|0)>($452|0);
        $or$cond$i43$i = $454 & $455;
        if ($or$cond$i43$i) {
         $456 = (($w$1) - ($452))|0;
         $457 = ($456>>>0)>(256);
         $458 = $457 ? 256 : $456;
         _memset(($pad$i|0),32,($458|0))|0;
         $459 = ($456>>>0)>(255);
         if ($459) {
          $$01$i45$i = $456;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $460 = (($$01$i45$i) + -256)|0;
           $461 = ($460>>>0)>(255);
           if ($461) {
            $$01$i45$i = $460;
           } else {
            break;
           }
          }
          $462 = $456 & 255;
          $$0$lcssa$i47$i = $462;
         } else {
          $$0$lcssa$i47$i = $456;
         }
         (___fwritex($pad$i,$$0$lcssa$i47$i,$f)|0);
        }
        (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
        (___fwritex($s1$0$i,3,$f)|0);
        $463 = $fl$1$ & 73728;
        $464 = ($463|0)==(8192);
        $or$cond$i50$i = $464 & $455;
        if ($or$cond$i50$i) {
         $465 = (($w$1) - ($452))|0;
         $466 = ($465>>>0)>(256);
         $467 = $466 ? 256 : $465;
         _memset(($pad$i|0),32,($467|0))|0;
         $468 = ($465>>>0)>(255);
         if ($468) {
          $$01$i52$i = $465;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $469 = (($$01$i52$i) + -256)|0;
           $470 = ($469>>>0)>(255);
           if ($470) {
            $$01$i52$i = $469;
           } else {
            break;
           }
          }
          $471 = $465 & 255;
          $$0$lcssa$i54$i = $471;
         } else {
          $$0$lcssa$i54$i = $465;
         }
         (___fwritex($pad$i,$$0$lcssa$i54$i,$f)|0);
        }
        $w$$i = $455 ? $w$1 : $452;
        $$0$i = $w$$i;
       }
      } while(0);
      $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $$0$i;$l10n$0$be = $l10n$3;
      break L24;
      break;
     }
     case 111:  {
      $315 = ($267|0)==(0);
      $316 = ($294|0)==(0);
      $317 = $315 & $316;
      if ($317) {
       $$0$lcssa$i52 = $2;
      } else {
       $$03$i49 = $2;$319 = $267;$323 = $294;
       while(1) {
        $318 = $319 & 7;
        $320 = $318 | 48;
        $321 = $320&255;
        $322 = (($$03$i49) + -1|0);
        HEAP8[$322>>0] = $321;
        $324 = (_bitshift64Lshr(($319|0),($323|0),3)|0);
        $325 = tempRet0;
        $326 = ($324|0)==(0);
        $327 = ($325|0)==(0);
        $328 = $326 & $327;
        if ($328) {
         $$lcssa385 = $322;
         break;
        } else {
         $$03$i49 = $322;$319 = $324;$323 = $325;
        }
       }
       $$0$lcssa$i52 = $$lcssa385;
      }
      $329 = $fl$1$ & 8;
      $330 = ($329|0)==(0);
      $or$cond19 = $330 | $317;
      $$25 = $or$cond19 ? 24032 : ((24032 + 5|0));
      $331 = $or$cond19&1;
      $$26 = $331 ^ 1;
      $369 = $267;$371 = $294;$a$0 = $$0$lcssa$i52;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$26;$prefix$1 = $$25;
      label = 104;
      break;
     }
     case 67:  {
      HEAP32[$wc>>2] = $267;
      HEAP32[$5>>2] = 0;
      $1187 = $wc;$1188 = $6;$p$4271 = -1;
      label = 114;
      break;
     }
     case 83:  {
      $393 = $267;
      $394 = ($p$0|0)==(0);
      if ($394) {
       $1189 = $267;$1190 = $393;$i$0$lcssa272 = 0;
       label = 119;
      } else {
       $1187 = $393;$1188 = $267;$p$4271 = $p$0;
       label = 114;
      }
      break;
     }
     case 110:  {
      switch ($st$0$lcssa351|0) {
      case 7:  {
       $282 = ($cnt$1|0)<(0);
       $283 = $282 << 31 >> 31;
       $284 = $267;
       $285 = $284;
       $286 = $285;
       HEAP32[$286>>2] = $cnt$1;
       $287 = (($285) + 4)|0;
       $288 = $287;
       HEAP32[$288>>2] = $283;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 2:  {
       $270 = ($cnt$1|0)<(0);
       $271 = $270 << 31 >> 31;
       $272 = $267;
       $273 = $272;
       $274 = $273;
       HEAP32[$274>>2] = $cnt$1;
       $275 = (($273) + 4)|0;
       $276 = $275;
       HEAP32[$276>>2] = $271;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 3:  {
       $277 = $cnt$1&65535;
       $278 = $267;
       HEAP16[$278>>1] = $277;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 4:  {
       $279 = $cnt$1&255;
       $280 = $267;
       HEAP8[$280>>0] = $279;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 6:  {
       $281 = $267;
       HEAP32[$281>>2] = $cnt$1;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 0:  {
       $268 = $267;
       HEAP32[$268>>2] = $cnt$1;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 1:  {
       $269 = $267;
       HEAP32[$269>>2] = $cnt$1;
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      default: {
       $$be = $1182;$$be341 = $294;$$be342 = $267;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
      }
      }
      break;
     }
     case 99:  {
      $381 = $267&255;
      HEAP8[$4>>0] = $381;
      $1183 = $294;$1184 = $267;$a$2 = $4;$fl$6 = $266;$p$5 = 1;$pl$2 = 0;$prefix$2 = 24032;$z$2 = $2;
      break;
     }
     case 109:  {
      $382 = (___errno_location()|0);
      $383 = HEAP32[$382>>2]|0;
      $384 = (_strerror(($383|0))|0);
      $a$1 = $384;
      label = 109;
      break;
     }
     case 115:  {
      $385 = $267;
      $386 = ($267|0)==(0);
      $$21 = $386 ? 24048 : $385;
      $a$1 = $$21;
      label = 109;
      break;
     }
     default: {
      $1183 = $294;$1184 = $267;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 24032;$z$2 = $2;
     }
     }
    } while(0);
    do {
     if ((label|0) == 82) {
      label = 0;
      $292 = $t$1 & 32;
      $293 = ($267|0)==(0);
      $295 = ($294|0)==(0);
      $296 = $293 & $295;
      if ($296) {
       $369 = $267;$371 = $294;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 24032;
       label = 104;
      } else {
       $$012$i = $2;$298 = $267;$305 = $294;
       while(1) {
        $297 = $298 & 15;
        $299 = (24112 + ($297)|0);
        $300 = HEAP8[$299>>0]|0;
        $301 = $300&255;
        $302 = $301 | $292;
        $303 = $302&255;
        $304 = (($$012$i) + -1|0);
        HEAP8[$304>>0] = $303;
        $306 = (_bitshift64Lshr(($298|0),($305|0),4)|0);
        $307 = tempRet0;
        $308 = ($306|0)==(0);
        $309 = ($307|0)==(0);
        $310 = $308 & $309;
        if ($310) {
         $$lcssa386 = $304;
         break;
        } else {
         $$012$i = $304;$298 = $306;$305 = $307;
        }
       }
       $311 = $fl$3 & 8;
       $312 = ($311|0)==(0);
       if ($312) {
        $369 = $267;$371 = $294;$a$0 = $$lcssa386;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 24032;
        label = 104;
       } else {
        $313 = $t$1 >> 4;
        $314 = (24032 + ($313)|0);
        $369 = $267;$371 = $294;$a$0 = $$lcssa386;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $314;
        label = 104;
       }
      }
     }
     else if ((label|0) == 96) {
      label = 0;
      $340 = ($339>>>0)>(0);
      $342 = ($341>>>0)>(4294967295);
      $343 = ($339|0)==(0);
      $344 = $343 & $342;
      $345 = $340 | $344;
      if ($345) {
       $$05$i = $2;$346 = $341;$347 = $339;
       while(1) {
        $348 = (___uremdi3(($346|0),($347|0),10,0)|0);
        $349 = tempRet0;
        $350 = $348 | 48;
        $351 = $350&255;
        $352 = (($$05$i) + -1|0);
        HEAP8[$352>>0] = $351;
        $353 = (___udivdi3(($346|0),($347|0),10,0)|0);
        $354 = tempRet0;
        $355 = ($347>>>0)>(9);
        $356 = ($346>>>0)>(4294967295);
        $357 = ($347|0)==(9);
        $358 = $357 & $356;
        $359 = $355 | $358;
        if ($359) {
         $$05$i = $352;$346 = $353;$347 = $354;
        } else {
         $$lcssa382 = $352;$1185 = $353;$1186 = $354;
         break;
        }
       }
       $$0$lcssa$i54 = $$lcssa382;$$01$lcssa$off0$i = $1185;
      } else {
       $$0$lcssa$i54 = $2;$$01$lcssa$off0$i = $341;
      }
      $360 = ($$01$lcssa$off0$i|0)==(0);
      if ($360) {
       $369 = $341;$371 = $339;$a$0 = $$0$lcssa$i54;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 104;
      } else {
       $$12$i = $$0$lcssa$i54;$y$03$i = $$01$lcssa$off0$i;
       while(1) {
        $361 = (($y$03$i>>>0) % 10)&-1;
        $362 = $361 | 48;
        $363 = $362&255;
        $364 = (($$12$i) + -1|0);
        HEAP8[$364>>0] = $363;
        $365 = (($y$03$i>>>0) / 10)&-1;
        $366 = ($y$03$i>>>0)<(10);
        if ($366) {
         $$lcssa384 = $364;
         break;
        } else {
         $$12$i = $364;$y$03$i = $365;
        }
       }
       $369 = $341;$371 = $339;$a$0 = $$lcssa384;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 104;
      }
     }
     else if ((label|0) == 109) {
      label = 0;
      $387 = (_memchr($a$1,0,$p$0)|0);
      $388 = ($387|0)==(0|0);
      if ($388) {
       $389 = (($a$1) + ($p$0)|0);
       $1183 = $294;$1184 = $267;$a$2 = $a$1;$fl$6 = $266;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 24032;$z$2 = $389;
       break;
      } else {
       $390 = $387;
       $391 = $a$1;
       $392 = (($390) - ($391))|0;
       $1183 = $294;$1184 = $267;$a$2 = $a$1;$fl$6 = $266;$p$5 = $392;$pl$2 = 0;$prefix$2 = 24032;$z$2 = $387;
       break;
      }
     }
     else if ((label|0) == 114) {
      label = 0;
      $i$0176 = 0;$l$1175 = 0;$ws$0177 = $1187;
      while(1) {
       $395 = HEAP32[$ws$0177>>2]|0;
       $396 = ($395|0)==(0);
       if ($396) {
        $i$0$lcssa = $i$0176;$l$2 = $l$1175;
        break;
       }
       $397 = (_wctomb($mb,$395)|0);
       $398 = ($397|0)<(0);
       $399 = (($p$4271) - ($i$0176))|0;
       $400 = ($397>>>0)>($399>>>0);
       $or$cond23 = $398 | $400;
       if ($or$cond23) {
        $i$0$lcssa = $i$0176;$l$2 = $397;
        break;
       }
       $401 = (($ws$0177) + 4|0);
       $402 = (($397) + ($i$0176))|0;
       $403 = ($p$4271>>>0)>($402>>>0);
       if ($403) {
        $i$0176 = $402;$l$1175 = $397;$ws$0177 = $401;
       } else {
        $i$0$lcssa = $402;$l$2 = $397;
        break;
       }
      }
      $404 = ($l$2|0)<(0);
      if ($404) {
       $$0$ph340 = -1;
       label = 453;
       break L1;
      } else {
       $1189 = $1188;$1190 = $1187;$i$0$lcssa272 = $i$0$lcssa;
       label = 119;
      }
     }
    } while(0);
    if ((label|0) == 104) {
     label = 0;
     $367 = ($p$2|0)>(-1);
     $368 = $fl$4 & -65537;
     $$fl$4 = $367 ? $368 : $fl$4;
     $370 = ($369|0)!=(0);
     $372 = ($371|0)!=(0);
     $373 = $370 | $372;
     $374 = ($p$2|0)!=(0);
     $or$cond = $373 | $374;
     if ($or$cond) {
      $375 = $a$0;
      $376 = (($3) - ($375))|0;
      $377 = $373&1;
      $378 = $377 ^ 1;
      $379 = (($378) + ($376))|0;
      $380 = ($p$2|0)>($379|0);
      $p$2$ = $380 ? $p$2 : $379;
      $1183 = $371;$1184 = $369;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     } else {
      $1183 = $371;$1184 = $369;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     }
    }
    else if ((label|0) == 119) {
     label = 0;
     $405 = $fl$1$ & 73728;
     $406 = ($405|0)==(0);
     $407 = ($w$1|0)>($i$0$lcssa272|0);
     $or$cond$i65 = $406 & $407;
     if ($or$cond$i65) {
      $408 = (($w$1) - ($i$0$lcssa272))|0;
      $409 = ($408>>>0)>(256);
      $410 = $409 ? 256 : $408;
      _memset(($pad$i|0),32,($410|0))|0;
      $411 = ($408>>>0)>(255);
      if ($411) {
       $$01$i67 = $408;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $412 = (($$01$i67) + -256)|0;
        $413 = ($412>>>0)>(255);
        if ($413) {
         $$01$i67 = $412;
        } else {
         break;
        }
       }
       $414 = $408 & 255;
       $$0$lcssa$i69 = $414;
      } else {
       $$0$lcssa$i69 = $408;
      }
      (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
     }
     $415 = ($i$0$lcssa272|0)==(0);
     if (!($415)) {
      $i$1187 = 0;$ws$1188 = $1190;
      while(1) {
       $416 = HEAP32[$ws$1188>>2]|0;
       $417 = ($416|0)==(0);
       if ($417) {
        break;
       }
       $418 = (_wctomb($mb,$416)|0);
       $419 = (($418) + ($i$1187))|0;
       $420 = ($419|0)>($i$0$lcssa272|0);
       if ($420) {
        break;
       }
       $421 = (($ws$1188) + 4|0);
       (___fwritex($mb,$418,$f)|0);
       $422 = ($419>>>0)<($i$0$lcssa272>>>0);
       if ($422) {
        $i$1187 = $419;$ws$1188 = $421;
       } else {
        break;
       }
      }
     }
     $423 = ($405|0)==(8192);
     $or$cond$i72 = $423 & $407;
     if ($or$cond$i72) {
      $424 = (($w$1) - ($i$0$lcssa272))|0;
      $425 = ($424>>>0)>(256);
      $426 = $425 ? 256 : $424;
      _memset(($pad$i|0),32,($426|0))|0;
      $427 = ($424>>>0)>(255);
      if ($427) {
       $$01$i74 = $424;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $428 = (($$01$i74) + -256)|0;
        $429 = ($428>>>0)>(255);
        if ($429) {
         $$01$i74 = $428;
        } else {
         break;
        }
       }
       $430 = $424 & 255;
       $$0$lcssa$i76 = $430;
      } else {
       $$0$lcssa$i76 = $424;
      }
      (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
     }
     $431 = $407 ? $w$1 : $i$0$lcssa272;
     $$be = $1182;$$be341 = $294;$$be342 = $1189;$l$0$be = $431;$l10n$0$be = $l10n$3;
     break;
    }
    $1007 = $z$2;
    $1008 = $a$2;
    $1009 = (($1007) - ($1008))|0;
    $1010 = ($p$5|0)<($1009|0);
    $$p$5 = $1010 ? $1009 : $p$5;
    $1011 = (($pl$2) + ($$p$5))|0;
    $1012 = ($w$1|0)<($1011|0);
    $w$2 = $1012 ? $1011 : $w$1;
    $1013 = $fl$6 & 73728;
    $1014 = ($1013|0)==(0);
    $1015 = ($w$2|0)>($1011|0);
    $or$cond$i82 = $1014 & $1015;
    if ($or$cond$i82) {
     $1016 = (($w$2) - ($1011))|0;
     $1017 = ($1016>>>0)>(256);
     $1018 = $1017 ? 256 : $1016;
     _memset(($pad$i|0),32,($1018|0))|0;
     $1019 = ($1016>>>0)>(255);
     if ($1019) {
      $$01$i84 = $1016;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $1020 = (($$01$i84) + -256)|0;
       $1021 = ($1020>>>0)>(255);
       if ($1021) {
        $$01$i84 = $1020;
       } else {
        break;
       }
      }
      $1022 = $1016 & 255;
      $$0$lcssa$i86 = $1022;
     } else {
      $$0$lcssa$i86 = $1016;
     }
     (___fwritex($pad$i,$$0$lcssa$i86,$f)|0);
    }
    (___fwritex($prefix$2,$pl$2,$f)|0);
    $1023 = ($1013|0)==(65536);
    $or$cond$i58 = $1023 & $1015;
    if ($or$cond$i58) {
     $1024 = (($w$2) - ($1011))|0;
     $1025 = ($1024>>>0)>(256);
     $1026 = $1025 ? 256 : $1024;
     _memset(($pad$i|0),48,($1026|0))|0;
     $1027 = ($1024>>>0)>(255);
     if ($1027) {
      $$01$i60 = $1024;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $1028 = (($$01$i60) + -256)|0;
       $1029 = ($1028>>>0)>(255);
       if ($1029) {
        $$01$i60 = $1028;
       } else {
        break;
       }
      }
      $1030 = $1024 & 255;
      $$0$lcssa$i62 = $1030;
     } else {
      $$0$lcssa$i62 = $1024;
     }
     (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
    }
    $1031 = ($$p$5|0)>($1009|0);
    if ($1031) {
     $1032 = (($$p$5) - ($1009))|0;
     $1033 = ($1032>>>0)>(256);
     $1034 = $1033 ? 256 : $1032;
     _memset(($pad$i|0),48,($1034|0))|0;
     $1035 = ($1032>>>0)>(255);
     if ($1035) {
      $$01$i45 = $1032;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $1036 = (($$01$i45) + -256)|0;
       $1037 = ($1036>>>0)>(255);
       if ($1037) {
        $$01$i45 = $1036;
       } else {
        break;
       }
      }
      $1038 = $1032 & 255;
      $$0$lcssa$i47 = $1038;
     } else {
      $$0$lcssa$i47 = $1032;
     }
     (___fwritex($pad$i,$$0$lcssa$i47,$f)|0);
    }
    (___fwritex($a$2,$1009,$f)|0);
    $1039 = ($1013|0)==(8192);
    $or$cond$i = $1039 & $1015;
    if ($or$cond$i) {
     $1040 = (($w$2) - ($1011))|0;
     $1041 = ($1040>>>0)>(256);
     $1042 = $1041 ? 256 : $1040;
     _memset(($pad$i|0),32,($1042|0))|0;
     $1043 = ($1040>>>0)>(255);
     if ($1043) {
      $$01$i = $1040;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $1044 = (($$01$i) + -256)|0;
       $1045 = ($1044>>>0)>(255);
       if ($1045) {
        $$01$i = $1044;
       } else {
        break;
       }
      }
      $1046 = $1040 & 255;
      $$0$lcssa$i = $1046;
     } else {
      $$0$lcssa$i = $1040;
     }
     (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
    }
    $$be = $1182;$$be341 = $1183;$$be342 = $1184;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
   } else {
    $$be = $$lcssa107;$$be341 = $1175;$$be342 = $1176;$l$0$be = $37;$l10n$0$be = $l10n$0;
   }
  } while(0);
  $1175 = $$be341;$1176 = $$be342;$23 = $$be;$cnt$0 = $cnt$1;$l$0 = $l$0$be;$l10n$0 = $l10n$0$be;
 }
 if ((label|0) == 429) {
  $1047 = ($f|0)==(0|0);
  if (!($1047)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1048 = ($l10n$0$lcssa|0)==(0);
  if ($1048) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $i$2163 = 1;
  while(1) {
   $1049 = (($nl_type) + ($i$2163<<2)|0);
   $1050 = HEAP32[$1049>>2]|0;
   $1051 = ($1050|0)==(0);
   if ($1051) {
    $i$2163$lcssa = $i$2163;
    break;
   }
   $1053 = (($nl_arg) + ($i$2163<<3)|0);
   $1054 = ($1050>>>0)>(20);
   L614: do {
    if (!($1054)) {
     do {
      switch ($1050|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1055 = $arglist_current35;
       $1056 = (0 + 4|0);
       $expanded148 = $1056;
       $expanded147 = (($expanded148) - 1)|0;
       $1057 = (($1055) + ($expanded147))|0;
       $1058 = (0 + 4|0);
       $expanded152 = $1058;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1059 = $1057 & $expanded150;
       $1060 = $1059;
       $1061 = HEAP32[$1060>>2]|0;
       $arglist_next36 = (($1060) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1053>>2] = $1061;
       break L614;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1062 = $arglist_current38;
       $1063 = (0 + 4|0);
       $expanded155 = $1063;
       $expanded154 = (($expanded155) - 1)|0;
       $1064 = (($1062) + ($expanded154))|0;
       $1065 = (0 + 4|0);
       $expanded159 = $1065;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1066 = $1064 & $expanded157;
       $1067 = $1066;
       $1068 = HEAP32[$1067>>2]|0;
       $arglist_next39 = (($1067) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1069 = ($1068|0)<(0);
       $1070 = $1069 << 31 >> 31;
       $1071 = $1053;
       $1072 = $1071;
       HEAP32[$1072>>2] = $1068;
       $1073 = (($1071) + 4)|0;
       $1074 = $1073;
       HEAP32[$1074>>2] = $1070;
       break L614;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1075 = $arglist_current41;
       $1076 = (0 + 4|0);
       $expanded162 = $1076;
       $expanded161 = (($expanded162) - 1)|0;
       $1077 = (($1075) + ($expanded161))|0;
       $1078 = (0 + 4|0);
       $expanded166 = $1078;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1079 = $1077 & $expanded164;
       $1080 = $1079;
       $1081 = HEAP32[$1080>>2]|0;
       $arglist_next42 = (($1080) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1082 = $1053;
       $1083 = $1082;
       HEAP32[$1083>>2] = $1081;
       $1084 = (($1082) + 4)|0;
       $1085 = $1084;
       HEAP32[$1085>>2] = 0;
       break L614;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1086 = $arglist_current44;
       $1087 = (0 + 8|0);
       $expanded169 = $1087;
       $expanded168 = (($expanded169) - 1)|0;
       $1088 = (($1086) + ($expanded168))|0;
       $1089 = (0 + 8|0);
       $expanded173 = $1089;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1090 = $1088 & $expanded171;
       $1091 = $1090;
       $1092 = $1091;
       $1093 = $1092;
       $1094 = HEAP32[$1093>>2]|0;
       $1095 = (($1092) + 4)|0;
       $1096 = $1095;
       $1097 = HEAP32[$1096>>2]|0;
       $arglist_next45 = (($1091) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1098 = $1053;
       $1099 = $1098;
       HEAP32[$1099>>2] = $1094;
       $1100 = (($1098) + 4)|0;
       $1101 = $1100;
       HEAP32[$1101>>2] = $1097;
       break L614;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1102 = $arglist_current47;
       $1103 = (0 + 4|0);
       $expanded176 = $1103;
       $expanded175 = (($expanded176) - 1)|0;
       $1104 = (($1102) + ($expanded175))|0;
       $1105 = (0 + 4|0);
       $expanded180 = $1105;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1106 = $1104 & $expanded178;
       $1107 = $1106;
       $1108 = HEAP32[$1107>>2]|0;
       $arglist_next48 = (($1107) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1109 = $1108&65535;
       $1110 = $1109 << 16 >> 16;
       $1111 = ($1110|0)<(0);
       $1112 = $1111 << 31 >> 31;
       $1113 = $1053;
       $1114 = $1113;
       HEAP32[$1114>>2] = $1110;
       $1115 = (($1113) + 4)|0;
       $1116 = $1115;
       HEAP32[$1116>>2] = $1112;
       break L614;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1117 = $arglist_current50;
       $1118 = (0 + 4|0);
       $expanded183 = $1118;
       $expanded182 = (($expanded183) - 1)|0;
       $1119 = (($1117) + ($expanded182))|0;
       $1120 = (0 + 4|0);
       $expanded187 = $1120;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1121 = $1119 & $expanded185;
       $1122 = $1121;
       $1123 = HEAP32[$1122>>2]|0;
       $arglist_next51 = (($1122) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1123 & 65535;
       $1124 = $1053;
       $1125 = $1124;
       HEAP32[$1125>>2] = $$mask1$i;
       $1126 = (($1124) + 4)|0;
       $1127 = $1126;
       HEAP32[$1127>>2] = 0;
       break L614;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1128 = $arglist_current53;
       $1129 = (0 + 4|0);
       $expanded190 = $1129;
       $expanded189 = (($expanded190) - 1)|0;
       $1130 = (($1128) + ($expanded189))|0;
       $1131 = (0 + 4|0);
       $expanded194 = $1131;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1132 = $1130 & $expanded192;
       $1133 = $1132;
       $1134 = HEAP32[$1133>>2]|0;
       $arglist_next54 = (($1133) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1135 = $1134&255;
       $1136 = $1135 << 24 >> 24;
       $1137 = ($1136|0)<(0);
       $1138 = $1137 << 31 >> 31;
       $1139 = $1053;
       $1140 = $1139;
       HEAP32[$1140>>2] = $1136;
       $1141 = (($1139) + 4)|0;
       $1142 = $1141;
       HEAP32[$1142>>2] = $1138;
       break L614;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1143 = $arglist_current56;
       $1144 = (0 + 4|0);
       $expanded197 = $1144;
       $expanded196 = (($expanded197) - 1)|0;
       $1145 = (($1143) + ($expanded196))|0;
       $1146 = (0 + 4|0);
       $expanded201 = $1146;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1147 = $1145 & $expanded199;
       $1148 = $1147;
       $1149 = HEAP32[$1148>>2]|0;
       $arglist_next57 = (($1148) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1149 & 255;
       $1150 = $1053;
       $1151 = $1150;
       HEAP32[$1151>>2] = $$mask$i;
       $1152 = (($1150) + 4)|0;
       $1153 = $1152;
       HEAP32[$1153>>2] = 0;
       break L614;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1154 = $arglist_current59;
       $1155 = (0 + 8|0);
       $expanded204 = $1155;
       $expanded203 = (($expanded204) - 1)|0;
       $1156 = (($1154) + ($expanded203))|0;
       $1157 = (0 + 8|0);
       $expanded208 = $1157;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1158 = $1156 & $expanded206;
       $1159 = $1158;
       $1160 = +HEAPF64[$1159>>3];
       $arglist_next60 = (($1159) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1053>>3] = $1160;
       break L614;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1161 = $arglist_current62;
       $1162 = (0 + 8|0);
       $expanded211 = $1162;
       $expanded210 = (($expanded211) - 1)|0;
       $1163 = (($1161) + ($expanded210))|0;
       $1164 = (0 + 8|0);
       $expanded215 = $1164;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1165 = $1163 & $expanded213;
       $1166 = $1165;
       $1167 = +HEAPF64[$1166>>3];
       $arglist_next63 = (($1166) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1053>>3] = $1167;
       break L614;
       break;
      }
      default: {
       break L614;
      }
      }
     } while(0);
    }
   } while(0);
   $1168 = (($i$2163) + 1)|0;
   $1169 = ($1168|0)<(10);
   if ($1169) {
    $i$2163 = $1168;
   } else {
    label = 451;
    break;
   }
  }
  if ((label|0) == 451) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $1052 = ($i$2163$lcssa|0)<(10);
  if (!($1052)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $i$3161 = $i$2163$lcssa;
  while(1) {
   $1172 = (($nl_type) + ($i$3161<<2)|0);
   $1173 = HEAP32[$1172>>2]|0;
   $1174 = ($1173|0)==(0);
   $1170 = (($i$3161) + 1)|0;
   if (!($1174)) {
    $$0$ph = -1;
    break;
   }
   $1171 = ($1170|0)<(10);
   if ($1171) {
    $i$3161 = $1170;
   } else {
    $$0$ph = 1;
    break;
   }
  }
  $$0 = $$0$ph;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 452) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 453) {
  $$0 = $$0$ph340;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function runPostSets() {

}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&63]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&63]();
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
function b1(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0; }
function _fprintf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fprintf(p0|0,p1|0,p2|0)|0; }
function b2() { ; nullFunc_i(2);return 0; }
function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
function _emscripten_longjmp__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_longjmp(p0|0,p1|0); }
function b5(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
function _strlen__wrapper(p0) { p0 = p0|0; return _strlen(p0|0)|0; }
function b6() { ; nullFunc_v(6); }
function b7(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(7); }
function b8(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(8);return 0; }
function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
function b9(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(9);return 0; }
function b10(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_build_directory_structure,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,b1,_file_skip,_file_pad,_file_write,b1,b1,_gz_file_skip,_gz_file_pad,_gz_file_write,b1,_write_normal_data_chunk,_write_normal_fill_chunk,_write_normal_skip_chunk,b1,_write_sparse_data_chunk,_write_sparse_fill_chunk,_write_sparse_skip_chunk,b1,b1,b1,b1,_sn_write,b1,b1,b1,b1,b1,b1
,_fprintf__wrapper,b1,b1,b1,b1,b1,b1,b1,b1,_sparse_file_new,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_strncmp,b1,b1,b1,b1,b1,b1
,b1,b1,_zcalloc,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,_compute_block_size,_compute_journal_blocks,_compute_blocks_per_group,_compute_inodes,_compute_inodes_per_group,_compute_bg_desc_reserve_blocks,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_get_saved_allocation_chain,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,_file_close,b3,b3,b3,b3,_gz_file_close,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_free_alloc,b3,_sparse_file_destroy,_free,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_emscripten_longjmp__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_print_blocks,b4,b4,b4,b4,b4
,b4,b4,b4,_zcfree,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_write_normal_end_chunk,b5,b5,b5,_write_sparse_end_chunk,b5,b5,b5,b5,b5,b5,___strdup,_canonicalize_abs_slashes,_canonicalize_rel_slashes,_get_file_size
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_strlen__wrapper,b5,b5,b5,b5,b5,b5,b5,_filter_dot
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_v = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,_ext4_create_fs_aux_info,b6,_block_allocator_init,_ext4_fill_in_sb,b6,b6,_ext4_create_journal_inode,_ext4_create_resize_inode,b6,b6,b6,_ext4_update_free,_ext4_queue_sb,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_canned_fs_config,_fs_config,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iii = [b8,_file_open,b8,b8,b8,b8,_gz_file_open,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_deflate_stored,_deflate_fast,_deflate_slow,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,_printf__wrapper,b8,b8,b8,b8,_reserve_inodes,b8,b8,b8,b8,_build_default_directory_structure,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,_alphasort,_path_compare,b8,b8,b8];
var FUNCTION_TABLE_iiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_inode_set_permissions,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_write_ext4_image,b10,b10,b10
,b10,b10,b10,b10,b10];

  return { _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, _main: _main, _strncpy: _strncpy, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _i64Add: _i64Add, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _i64Subtract: _i64Subtract, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {
    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



